
nucleo-f767ZI-blinky-CMSIS-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076c0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080078c0  080078c0  000178c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079a8  080079a8  000201bc  2**0
                  CONTENTS
  4 .ARM          00000008  080079a8  080079a8  000179a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079b0  080079b0  000201bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079b0  080079b0  000179b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079b4  080079b4  000179b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080079b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000007c  08007a34  0002007c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000011c  08007ad4  0002011c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005148  200001bc  08007b74  000201bc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20005304  08007b74  00025304  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00025105  00000000  00000000  000201ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000041f1  00000000  00000000  000452ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b68  00000000  00000000  000494e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000019e0  00000000  00000000  0004b048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004627  00000000  00000000  0004ca28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f4d7  00000000  00000000  0005104f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001106d9  00000000  00000000  00070526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00180bff  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007858  00000000  00000000  00180c50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001bc 	.word	0x200001bc
 800021c:	00000000 	.word	0x00000000
 8000220:	080078a8 	.word	0x080078a8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001c0 	.word	0x200001c0
 800023c:	080078a8 	.word	0x080078a8

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fd55 	bl	8000ff6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f82c 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 f994 	bl	800087c <MX_GPIO_Init>
  MX_ETH_Init();
 8000554:	f000 f8e6 	bl	8000724 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000558:	f000 f932 	bl	80007c0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800055c:	f000 f960 	bl	8000820 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 8000560:	f000 f894 	bl	800068c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000564:	f004 faaa 	bl	8004abc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000568:	4a09      	ldr	r2, [pc, #36]	; (8000590 <main+0x4c>)
 800056a:	2100      	movs	r1, #0
 800056c:	4809      	ldr	r0, [pc, #36]	; (8000594 <main+0x50>)
 800056e:	f004 fb0f 	bl	8004b90 <osThreadNew>
 8000572:	4603      	mov	r3, r0
 8000574:	4a08      	ldr	r2, [pc, #32]	; (8000598 <main+0x54>)
 8000576:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000578:	4a08      	ldr	r2, [pc, #32]	; (800059c <main+0x58>)
 800057a:	2100      	movs	r1, #0
 800057c:	4808      	ldr	r0, [pc, #32]	; (80005a0 <main+0x5c>)
 800057e:	f004 fb07 	bl	8004b90 <osThreadNew>
 8000582:	4603      	mov	r3, r0
 8000584:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <main+0x60>)
 8000586:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000588:	f004 facc 	bl	8004b24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058c:	e7fe      	b.n	800058c <main+0x48>
 800058e:	bf00      	nop
 8000590:	080078e8 	.word	0x080078e8
 8000594:	080009c1 	.word	0x080009c1
 8000598:	20000878 	.word	0x20000878
 800059c:	0800790c 	.word	0x0800790c
 80005a0:	08000a05 	.word	0x08000a05
 80005a4:	2000087c 	.word	0x2000087c

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	; 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 031c 	add.w	r3, r7, #28
 80005b2:	2234      	movs	r2, #52	; 0x34
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f007 f8ac 	bl	8007714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 0308 	add.w	r3, r7, #8
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005cc:	f001 fea4 	bl	8002318 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d0:	4b2c      	ldr	r3, [pc, #176]	; (8000684 <SystemClock_Config+0xdc>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	4a2b      	ldr	r2, [pc, #172]	; (8000684 <SystemClock_Config+0xdc>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	; 0x40
 80005dc:	4b29      	ldr	r3, [pc, #164]	; (8000684 <SystemClock_Config+0xdc>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005e8:	4b27      	ldr	r3, [pc, #156]	; (8000688 <SystemClock_Config+0xe0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005f0:	4a25      	ldr	r2, [pc, #148]	; (8000688 <SystemClock_Config+0xe0>)
 80005f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b23      	ldr	r3, [pc, #140]	; (8000688 <SystemClock_Config+0xe0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000600:	603b      	str	r3, [r7, #0]
 8000602:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000604:	2301      	movs	r3, #1
 8000606:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000608:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800060c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000612:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000616:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000618:	2304      	movs	r3, #4
 800061a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800061c:	2360      	movs	r3, #96	; 0x60
 800061e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000624:	2304      	movs	r3, #4
 8000626:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000628:	2302      	movs	r3, #2
 800062a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 031c 	add.w	r3, r7, #28
 8000630:	4618      	mov	r0, r3
 8000632:	f001 fed1 	bl	80023d8 <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800063c:	f000 fa02 	bl	8000a44 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000640:	f001 fe7a 	bl	8002338 <HAL_PWREx_EnableOverDrive>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800064a:	f000 f9fb 	bl	8000a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064e:	230f      	movs	r3, #15
 8000650:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000652:	2302      	movs	r3, #2
 8000654:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	2103      	movs	r1, #3
 800066a:	4618      	mov	r0, r3
 800066c:	f002 f962 	bl	8002934 <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000676:	f000 f9e5 	bl	8000a44 <Error_Handler>
  }
}
 800067a:	bf00      	nop
 800067c:	3750      	adds	r7, #80	; 0x50
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000690:	4b21      	ldr	r3, [pc, #132]	; (8000718 <MX_CAN1_Init+0x8c>)
 8000692:	4a22      	ldr	r2, [pc, #136]	; (800071c <MX_CAN1_Init+0x90>)
 8000694:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 32;
 8000696:	4b20      	ldr	r3, [pc, #128]	; (8000718 <MX_CAN1_Init+0x8c>)
 8000698:	2220      	movs	r2, #32
 800069a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800069c:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <MX_CAN1_Init+0x8c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006a2:	4b1d      	ldr	r3, [pc, #116]	; (8000718 <MX_CAN1_Init+0x8c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80006a8:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <MX_CAN1_Init+0x8c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006ae:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <MX_CAN1_Init+0x8c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006b4:	4b18      	ldr	r3, [pc, #96]	; (8000718 <MX_CAN1_Init+0x8c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006ba:	4b17      	ldr	r3, [pc, #92]	; (8000718 <MX_CAN1_Init+0x8c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006c0:	4b15      	ldr	r3, [pc, #84]	; (8000718 <MX_CAN1_Init+0x8c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_CAN1_Init+0x8c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_CAN1_Init+0x8c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_CAN1_Init+0x8c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006d8:	480f      	ldr	r0, [pc, #60]	; (8000718 <MX_CAN1_Init+0x8c>)
 80006da:	f000 fcdd 	bl	8001098 <HAL_CAN_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80006e4:	f000 f9ae 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	TxHeader.IDE = CAN_ID_STD;
 80006e8:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <MX_CAN1_Init+0x94>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = 0x446;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_CAN1_Init+0x94>)
 80006f0:	f240 4246 	movw	r2, #1094	; 0x446
 80006f4:	601a      	str	r2, [r3, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 80006f6:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_CAN1_Init+0x94>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 8;
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_CAN1_Init+0x94>)
 80006fe:	2208      	movs	r2, #8
 8000700:	611a      	str	r2, [r3, #16]

	if(HAL_CAN_Start(&hcan1) != HAL_OK){
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_CAN1_Init+0x8c>)
 8000704:	f000 fdc3 	bl	800128e <HAL_CAN_Start>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_CAN1_Init+0x86>
	   Error_Handler();
 800070e:	f000 f999 	bl	8000a44 <Error_Handler>
	}
  /* USER CODE END CAN1_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000210 	.word	0x20000210
 800071c:	40006400 	.word	0x40006400
 8000720:	20000880 	.word	0x20000880

08000724 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <MX_ETH_Init+0x84>)
 800072a:	4a20      	ldr	r2, [pc, #128]	; (80007ac <MX_ETH_Init+0x88>)
 800072c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800072e:	4b20      	ldr	r3, [pc, #128]	; (80007b0 <MX_ETH_Init+0x8c>)
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000734:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <MX_ETH_Init+0x8c>)
 8000736:	2280      	movs	r2, #128	; 0x80
 8000738:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800073a:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <MX_ETH_Init+0x8c>)
 800073c:	22e1      	movs	r2, #225	; 0xe1
 800073e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <MX_ETH_Init+0x8c>)
 8000742:	2200      	movs	r2, #0
 8000744:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_ETH_Init+0x8c>)
 8000748:	2200      	movs	r2, #0
 800074a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_ETH_Init+0x8c>)
 800074e:	2200      	movs	r2, #0
 8000750:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_ETH_Init+0x84>)
 8000754:	4a16      	ldr	r2, [pc, #88]	; (80007b0 <MX_ETH_Init+0x8c>)
 8000756:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_ETH_Init+0x84>)
 800075a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800075e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_ETH_Init+0x84>)
 8000762:	4a14      	ldr	r2, [pc, #80]	; (80007b4 <MX_ETH_Init+0x90>)
 8000764:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_ETH_Init+0x84>)
 8000768:	4a13      	ldr	r2, [pc, #76]	; (80007b8 <MX_ETH_Init+0x94>)
 800076a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800076c:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_ETH_Init+0x84>)
 800076e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000772:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000774:	480c      	ldr	r0, [pc, #48]	; (80007a8 <MX_ETH_Init+0x84>)
 8000776:	f000 ff81 	bl	800167c <HAL_ETH_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000780:	f000 f960 	bl	8000a44 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000784:	2238      	movs	r2, #56	; 0x38
 8000786:	2100      	movs	r1, #0
 8000788:	480c      	ldr	r0, [pc, #48]	; (80007bc <MX_ETH_Init+0x98>)
 800078a:	f006 ffc3 	bl	8007714 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_ETH_Init+0x98>)
 8000790:	2221      	movs	r2, #33	; 0x21
 8000792:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_ETH_Init+0x98>)
 8000796:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800079a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <MX_ETH_Init+0x98>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000238 	.word	0x20000238
 80007ac:	40028000 	.word	0x40028000
 80007b0:	2000089c 	.word	0x2000089c
 80007b4:	2000011c 	.word	0x2000011c
 80007b8:	2000007c 	.word	0x2000007c
 80007bc:	200001d8 	.word	0x200001d8

080007c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_USART3_UART_Init+0x58>)
 80007c6:	4a15      	ldr	r2, [pc, #84]	; (800081c <MX_USART3_UART_Init+0x5c>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_USART3_UART_Init+0x58>)
 80007cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_USART3_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_USART3_UART_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_USART3_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_USART3_UART_Init+0x58>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_USART3_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_USART3_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_USART3_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_USART3_UART_Init+0x58>)
 80007fe:	2200      	movs	r2, #0
 8000800:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_USART3_UART_Init+0x58>)
 8000804:	f003 f9f6 	bl	8003bf4 <HAL_UART_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800080e:	f000 f919 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200002e8 	.word	0x200002e8
 800081c:	40004800 	.word	0x40004800

08000820 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000826:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800082a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082e:	2206      	movs	r2, #6
 8000830:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000834:	2202      	movs	r2, #2
 8000836:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000840:	2202      	movs	r2, #2
 8000842:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000846:	2201      	movs	r2, #1
 8000848:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000858:	2201      	movs	r2, #1
 800085a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000864:	f001 fc0f 	bl	8002086 <HAL_PCD_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800086e:	f000 f8e9 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000370 	.word	0x20000370

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	; 0x30
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	4b47      	ldr	r3, [pc, #284]	; (80009b0 <MX_GPIO_Init+0x134>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a46      	ldr	r2, [pc, #280]	; (80009b0 <MX_GPIO_Init+0x134>)
 8000898:	f043 0304 	orr.w	r3, r3, #4
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b44      	ldr	r3, [pc, #272]	; (80009b0 <MX_GPIO_Init+0x134>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	61bb      	str	r3, [r7, #24]
 80008a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008aa:	4b41      	ldr	r3, [pc, #260]	; (80009b0 <MX_GPIO_Init+0x134>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a40      	ldr	r2, [pc, #256]	; (80009b0 <MX_GPIO_Init+0x134>)
 80008b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b3e      	ldr	r3, [pc, #248]	; (80009b0 <MX_GPIO_Init+0x134>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	4b3b      	ldr	r3, [pc, #236]	; (80009b0 <MX_GPIO_Init+0x134>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a3a      	ldr	r2, [pc, #232]	; (80009b0 <MX_GPIO_Init+0x134>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b38      	ldr	r3, [pc, #224]	; (80009b0 <MX_GPIO_Init+0x134>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	4b35      	ldr	r3, [pc, #212]	; (80009b0 <MX_GPIO_Init+0x134>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a34      	ldr	r2, [pc, #208]	; (80009b0 <MX_GPIO_Init+0x134>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b32      	ldr	r3, [pc, #200]	; (80009b0 <MX_GPIO_Init+0x134>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f2:	4b2f      	ldr	r3, [pc, #188]	; (80009b0 <MX_GPIO_Init+0x134>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a2e      	ldr	r2, [pc, #184]	; (80009b0 <MX_GPIO_Init+0x134>)
 80008f8:	f043 0308 	orr.w	r3, r3, #8
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b2c      	ldr	r3, [pc, #176]	; (80009b0 <MX_GPIO_Init+0x134>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0308 	and.w	r3, r3, #8
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800090a:	4b29      	ldr	r3, [pc, #164]	; (80009b0 <MX_GPIO_Init+0x134>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a28      	ldr	r2, [pc, #160]	; (80009b0 <MX_GPIO_Init+0x134>)
 8000910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b26      	ldr	r3, [pc, #152]	; (80009b0 <MX_GPIO_Init+0x134>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f244 0181 	movw	r1, #16513	; 0x4081
 8000928:	4822      	ldr	r0, [pc, #136]	; (80009b4 <MX_GPIO_Init+0x138>)
 800092a:	f001 fb79 	bl	8002020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2140      	movs	r1, #64	; 0x40
 8000932:	4821      	ldr	r0, [pc, #132]	; (80009b8 <MX_GPIO_Init+0x13c>)
 8000934:	f001 fb74 	bl	8002020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000938:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	481b      	ldr	r0, [pc, #108]	; (80009bc <MX_GPIO_Init+0x140>)
 8000950:	f001 f9ba 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000954:	f244 0381 	movw	r3, #16513	; 0x4081
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4811      	ldr	r0, [pc, #68]	; (80009b4 <MX_GPIO_Init+0x138>)
 800096e:	f001 f9ab 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000972:	2340      	movs	r3, #64	; 0x40
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	480b      	ldr	r0, [pc, #44]	; (80009b8 <MX_GPIO_Init+0x13c>)
 800098a:	f001 f99d 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800098e:	2380      	movs	r3, #128	; 0x80
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_GPIO_Init+0x13c>)
 80009a2:	f001 f991 	bl	8001cc8 <HAL_GPIO_Init>

}
 80009a6:	bf00      	nop
 80009a8:	3730      	adds	r7, #48	; 0x30
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020400 	.word	0x40020400
 80009b8:	40021800 	.word	0x40021800
 80009bc:	40020800 	.word	0x40020800

080009c0 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) == CAN_TXSTATUS_OK) {
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <StartBlink01+0x30>)
 80009ca:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <StartBlink01+0x34>)
 80009cc:	490a      	ldr	r1, [pc, #40]	; (80009f8 <StartBlink01+0x38>)
 80009ce:	480b      	ldr	r0, [pc, #44]	; (80009fc <StartBlink01+0x3c>)
 80009d0:	f000 fca1 	bl	8001316 <HAL_CAN_AddTxMessage>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d104      	bne.n	80009e4 <StartBlink01+0x24>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80009da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009de:	4808      	ldr	r0, [pc, #32]	; (8000a00 <StartBlink01+0x40>)
 80009e0:	f001 fb37 	bl	8002052 <HAL_GPIO_TogglePin>
	  }
	  osDelay(500);
 80009e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009e8:	f004 f978 	bl	8004cdc <osDelay>
	  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) == CAN_TXSTATUS_OK) {
 80009ec:	e7ec      	b.n	80009c8 <StartBlink01+0x8>
 80009ee:	bf00      	nop
 80009f0:	20000898 	.word	0x20000898
 80009f4:	20000000 	.word	0x20000000
 80009f8:	20000880 	.word	0x20000880
 80009fc:	20000210 	.word	0x20000210
 8000a00:	40020400 	.word	0x40020400

08000a04 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000a0c:	2180      	movs	r1, #128	; 0x80
 8000a0e:	4803      	ldr	r0, [pc, #12]	; (8000a1c <StartBlink02+0x18>)
 8000a10:	f001 fb1f 	bl	8002052 <HAL_GPIO_TogglePin>
	  osDelay(250);
 8000a14:	20fa      	movs	r0, #250	; 0xfa
 8000a16:	f004 f961 	bl	8004cdc <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000a1a:	e7f7      	b.n	8000a0c <StartBlink02+0x8>
 8000a1c:	40020400 	.word	0x40020400

08000a20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d101      	bne.n	8000a36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a32:	f000 faed 	bl	8001010 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40001400 	.word	0x40001400

08000a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a48:	b672      	cpsid	i
}
 8000a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <Error_Handler+0x8>
	...

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	4a10      	ldr	r2, [pc, #64]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a60:	6413      	str	r3, [r2, #64]	; 0x40
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a78:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	210f      	movs	r1, #15
 8000a8a:	f06f 0001 	mvn.w	r0, #1
 8000a8e:	f000 fdcb 	bl	8001628 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a17      	ldr	r2, [pc, #92]	; (8000b1c <HAL_CAN_MspInit+0x7c>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d127      	bne.n	8000b12 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ac2:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <HAL_CAN_MspInit+0x80>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a16      	ldr	r2, [pc, #88]	; (8000b20 <HAL_CAN_MspInit+0x80>)
 8000ac8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <HAL_CAN_MspInit+0x80>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <HAL_CAN_MspInit+0x80>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a10      	ldr	r2, [pc, #64]	; (8000b20 <HAL_CAN_MspInit+0x80>)
 8000ae0:	f043 0308 	orr.w	r3, r3, #8
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <HAL_CAN_MspInit+0x80>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0308 	and.w	r3, r3, #8
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000af2:	2303      	movs	r3, #3
 8000af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b02:	2309      	movs	r3, #9
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4805      	ldr	r0, [pc, #20]	; (8000b24 <HAL_CAN_MspInit+0x84>)
 8000b0e:	f001 f8db 	bl	8001cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000b12:	bf00      	nop
 8000b14:	3728      	adds	r7, #40	; 0x28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40006400 	.word	0x40006400
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020c00 	.word	0x40020c00

08000b28 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08e      	sub	sp, #56	; 0x38
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a4e      	ldr	r2, [pc, #312]	; (8000c80 <HAL_ETH_MspInit+0x158>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	f040 8096 	bne.w	8000c78 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b4c:	4b4d      	ldr	r3, [pc, #308]	; (8000c84 <HAL_ETH_MspInit+0x15c>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	4a4c      	ldr	r2, [pc, #304]	; (8000c84 <HAL_ETH_MspInit+0x15c>)
 8000b52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b56:	6313      	str	r3, [r2, #48]	; 0x30
 8000b58:	4b4a      	ldr	r3, [pc, #296]	; (8000c84 <HAL_ETH_MspInit+0x15c>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b60:	623b      	str	r3, [r7, #32]
 8000b62:	6a3b      	ldr	r3, [r7, #32]
 8000b64:	4b47      	ldr	r3, [pc, #284]	; (8000c84 <HAL_ETH_MspInit+0x15c>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b68:	4a46      	ldr	r2, [pc, #280]	; (8000c84 <HAL_ETH_MspInit+0x15c>)
 8000b6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b70:	4b44      	ldr	r3, [pc, #272]	; (8000c84 <HAL_ETH_MspInit+0x15c>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b78:	61fb      	str	r3, [r7, #28]
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	4b41      	ldr	r3, [pc, #260]	; (8000c84 <HAL_ETH_MspInit+0x15c>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	4a40      	ldr	r2, [pc, #256]	; (8000c84 <HAL_ETH_MspInit+0x15c>)
 8000b82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b86:	6313      	str	r3, [r2, #48]	; 0x30
 8000b88:	4b3e      	ldr	r3, [pc, #248]	; (8000c84 <HAL_ETH_MspInit+0x15c>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b90:	61bb      	str	r3, [r7, #24]
 8000b92:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b94:	4b3b      	ldr	r3, [pc, #236]	; (8000c84 <HAL_ETH_MspInit+0x15c>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b98:	4a3a      	ldr	r2, [pc, #232]	; (8000c84 <HAL_ETH_MspInit+0x15c>)
 8000b9a:	f043 0304 	orr.w	r3, r3, #4
 8000b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba0:	4b38      	ldr	r3, [pc, #224]	; (8000c84 <HAL_ETH_MspInit+0x15c>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba4:	f003 0304 	and.w	r3, r3, #4
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bac:	4b35      	ldr	r3, [pc, #212]	; (8000c84 <HAL_ETH_MspInit+0x15c>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	4a34      	ldr	r2, [pc, #208]	; (8000c84 <HAL_ETH_MspInit+0x15c>)
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb8:	4b32      	ldr	r3, [pc, #200]	; (8000c84 <HAL_ETH_MspInit+0x15c>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc4:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <HAL_ETH_MspInit+0x15c>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	4a2e      	ldr	r2, [pc, #184]	; (8000c84 <HAL_ETH_MspInit+0x15c>)
 8000bca:	f043 0302 	orr.w	r3, r3, #2
 8000bce:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd0:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <HAL_ETH_MspInit+0x15c>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	f003 0302 	and.w	r3, r3, #2
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bdc:	4b29      	ldr	r3, [pc, #164]	; (8000c84 <HAL_ETH_MspInit+0x15c>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	4a28      	ldr	r2, [pc, #160]	; (8000c84 <HAL_ETH_MspInit+0x15c>)
 8000be2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000be6:	6313      	str	r3, [r2, #48]	; 0x30
 8000be8:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <HAL_ETH_MspInit+0x15c>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bf4:	2332      	movs	r3, #50	; 0x32
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c04:	230b      	movs	r3, #11
 8000c06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	481e      	ldr	r0, [pc, #120]	; (8000c88 <HAL_ETH_MspInit+0x160>)
 8000c10:	f001 f85a 	bl	8001cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c14:	2386      	movs	r3, #134	; 0x86
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c24:	230b      	movs	r3, #11
 8000c26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4817      	ldr	r0, [pc, #92]	; (8000c8c <HAL_ETH_MspInit+0x164>)
 8000c30:	f001 f84a 	bl	8001cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c42:	2303      	movs	r3, #3
 8000c44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c46:	230b      	movs	r3, #11
 8000c48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480f      	ldr	r0, [pc, #60]	; (8000c90 <HAL_ETH_MspInit+0x168>)
 8000c52:	f001 f839 	bl	8001cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c56:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c68:	230b      	movs	r3, #11
 8000c6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c70:	4619      	mov	r1, r3
 8000c72:	4808      	ldr	r0, [pc, #32]	; (8000c94 <HAL_ETH_MspInit+0x16c>)
 8000c74:	f001 f828 	bl	8001cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c78:	bf00      	nop
 8000c7a:	3738      	adds	r7, #56	; 0x38
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40028000 	.word	0x40028000
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020800 	.word	0x40020800
 8000c8c:	40020000 	.word	0x40020000
 8000c90:	40020400 	.word	0x40020400
 8000c94:	40021800 	.word	0x40021800

08000c98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b0ae      	sub	sp, #184	; 0xb8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2290      	movs	r2, #144	; 0x90
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f006 fd2b 	bl	8007714 <memset>
  if(huart->Instance==USART3)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a22      	ldr	r2, [pc, #136]	; (8000d4c <HAL_UART_MspInit+0xb4>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d13c      	bne.n	8000d42 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ccc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f002 f884 	bl	8002de4 <HAL_RCCEx_PeriphCLKConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ce2:	f7ff feaf 	bl	8000a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <HAL_UART_MspInit+0xb8>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a19      	ldr	r2, [pc, #100]	; (8000d50 <HAL_UART_MspInit+0xb8>)
 8000cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <HAL_UART_MspInit+0xb8>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <HAL_UART_MspInit+0xb8>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a13      	ldr	r2, [pc, #76]	; (8000d50 <HAL_UART_MspInit+0xb8>)
 8000d04:	f043 0308 	orr.w	r3, r3, #8
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <HAL_UART_MspInit+0xb8>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0308 	and.w	r3, r3, #8
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d30:	2307      	movs	r3, #7
 8000d32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d36:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4805      	ldr	r0, [pc, #20]	; (8000d54 <HAL_UART_MspInit+0xbc>)
 8000d3e:	f000 ffc3 	bl	8001cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d42:	bf00      	nop
 8000d44:	37b8      	adds	r7, #184	; 0xb8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40004800 	.word	0x40004800
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020c00 	.word	0x40020c00

08000d58 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b0ae      	sub	sp, #184	; 0xb8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	2290      	movs	r2, #144	; 0x90
 8000d76:	2100      	movs	r1, #0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f006 fccb 	bl	8007714 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d86:	d159      	bne.n	8000e3c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000d88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d8c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f002 f823 	bl	8002de4 <HAL_RCCEx_PeriphCLKConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000da4:	f7ff fe4e 	bl	8000a44 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da8:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <HAL_PCD_MspInit+0xec>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	4a25      	ldr	r2, [pc, #148]	; (8000e44 <HAL_PCD_MspInit+0xec>)
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	6313      	str	r3, [r2, #48]	; 0x30
 8000db4:	4b23      	ldr	r3, [pc, #140]	; (8000e44 <HAL_PCD_MspInit+0xec>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000dc0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000dc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000dda:	230a      	movs	r3, #10
 8000ddc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000de4:	4619      	mov	r1, r3
 8000de6:	4818      	ldr	r0, [pc, #96]	; (8000e48 <HAL_PCD_MspInit+0xf0>)
 8000de8:	f000 ff6e 	bl	8001cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000dec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000df0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df4:	2300      	movs	r3, #0
 8000df6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e04:	4619      	mov	r1, r3
 8000e06:	4810      	ldr	r0, [pc, #64]	; (8000e48 <HAL_PCD_MspInit+0xf0>)
 8000e08:	f000 ff5e 	bl	8001cc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e0c:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <HAL_PCD_MspInit+0xec>)
 8000e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e10:	4a0c      	ldr	r2, [pc, #48]	; (8000e44 <HAL_PCD_MspInit+0xec>)
 8000e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e16:	6353      	str	r3, [r2, #52]	; 0x34
 8000e18:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <HAL_PCD_MspInit+0xec>)
 8000e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <HAL_PCD_MspInit+0xec>)
 8000e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e28:	4a06      	ldr	r2, [pc, #24]	; (8000e44 <HAL_PCD_MspInit+0xec>)
 8000e2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e2e:	6453      	str	r3, [r2, #68]	; 0x44
 8000e30:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <HAL_PCD_MspInit+0xec>)
 8000e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e3c:	bf00      	nop
 8000e3e:	37b8      	adds	r7, #184	; 0xb8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40020000 	.word	0x40020000

08000e4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08e      	sub	sp, #56	; 0x38
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000e5c:	4b33      	ldr	r3, [pc, #204]	; (8000f2c <HAL_InitTick+0xe0>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	4a32      	ldr	r2, [pc, #200]	; (8000f2c <HAL_InitTick+0xe0>)
 8000e62:	f043 0320 	orr.w	r3, r3, #32
 8000e66:	6413      	str	r3, [r2, #64]	; 0x40
 8000e68:	4b30      	ldr	r3, [pc, #192]	; (8000f2c <HAL_InitTick+0xe0>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	f003 0320 	and.w	r3, r3, #32
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e74:	f107 0210 	add.w	r2, r7, #16
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f001 ff7e 	bl	8002d80 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e84:	6a3b      	ldr	r3, [r7, #32]
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d103      	bne.n	8000e96 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e8e:	f001 ff4f 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 8000e92:	6378      	str	r0, [r7, #52]	; 0x34
 8000e94:	e004      	b.n	8000ea0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e96:	f001 ff4b 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ea2:	4a23      	ldr	r2, [pc, #140]	; (8000f30 <HAL_InitTick+0xe4>)
 8000ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea8:	0c9b      	lsrs	r3, r3, #18
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000eae:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <HAL_InitTick+0xe8>)
 8000eb0:	4a21      	ldr	r2, [pc, #132]	; (8000f38 <HAL_InitTick+0xec>)
 8000eb2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000eb4:	4b1f      	ldr	r3, [pc, #124]	; (8000f34 <HAL_InitTick+0xe8>)
 8000eb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eba:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000ebc:	4a1d      	ldr	r2, [pc, #116]	; (8000f34 <HAL_InitTick+0xe8>)
 8000ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec0:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <HAL_InitTick+0xe8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <HAL_InitTick+0xe8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <HAL_InitTick+0xe8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000ed4:	4817      	ldr	r0, [pc, #92]	; (8000f34 <HAL_InitTick+0xe8>)
 8000ed6:	f002 fbad 	bl	8003634 <HAL_TIM_Base_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ee0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d11b      	bne.n	8000f20 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000ee8:	4812      	ldr	r0, [pc, #72]	; (8000f34 <HAL_InitTick+0xe8>)
 8000eea:	f002 fc05 	bl	80036f8 <HAL_TIM_Base_Start_IT>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ef4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d111      	bne.n	8000f20 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000efc:	2037      	movs	r0, #55	; 0x37
 8000efe:	f000 fbaf 	bl	8001660 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b0f      	cmp	r3, #15
 8000f06:	d808      	bhi.n	8000f1a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	2037      	movs	r0, #55	; 0x37
 8000f0e:	f000 fb8b 	bl	8001628 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <HAL_InitTick+0xf0>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	e002      	b.n	8000f20 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3738      	adds	r7, #56	; 0x38
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	431bde83 	.word	0x431bde83
 8000f34:	200008a4 	.word	0x200008a4
 8000f38:	40001400 	.word	0x40001400
 8000f3c:	2000000c 	.word	0x2000000c

08000f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <NMI_Handler+0x4>

08000f46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <HardFault_Handler+0x4>

08000f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <MemManage_Handler+0x4>

08000f52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <BusFault_Handler+0x4>

08000f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <UsageFault_Handler+0x4>

08000f5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <TIM7_IRQHandler+0x10>)
 8000f72:	f002 fc39 	bl	80037e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200008a4 	.word	0x200008a4

08000f80 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <SystemInit+0x20>)
 8000f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f8a:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <SystemInit+0x20>)
 8000f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000faa:	490e      	ldr	r1, [pc, #56]	; (8000fe4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fac:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb0:	e002      	b.n	8000fb8 <LoopCopyDataInit>

08000fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb6:	3304      	adds	r3, #4

08000fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fbc:	d3f9      	bcc.n	8000fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fbe:	4a0b      	ldr	r2, [pc, #44]	; (8000fec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fc0:	4c0b      	ldr	r4, [pc, #44]	; (8000ff0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc4:	e001      	b.n	8000fca <LoopFillZerobss>

08000fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc8:	3204      	adds	r2, #4

08000fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fcc:	d3fb      	bcc.n	8000fc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fce:	f7ff ffd7 	bl	8000f80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fd2:	f006 fb6b 	bl	80076ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd6:	f7ff fab5 	bl	8000544 <main>
  bx  lr    
 8000fda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fdc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000fe8:	080079b8 	.word	0x080079b8
  ldr r2, =_sbss
 8000fec:	200001bc 	.word	0x200001bc
  ldr r4, =_ebss
 8000ff0:	20005304 	.word	0x20005304

08000ff4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff4:	e7fe      	b.n	8000ff4 <ADC_IRQHandler>

08000ff6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffa:	2003      	movs	r0, #3
 8000ffc:	f000 fb09 	bl	8001612 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001000:	200f      	movs	r0, #15
 8001002:	f7ff ff23 	bl	8000e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001006:	f7ff fd23 	bl	8000a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
}
 800100c:	4618      	mov	r0, r3
 800100e:	bd80      	pop	{r7, pc}

08001010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_IncTick+0x20>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_IncTick+0x24>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4413      	add	r3, r2
 8001020:	4a04      	ldr	r2, [pc, #16]	; (8001034 <HAL_IncTick+0x24>)
 8001022:	6013      	str	r3, [r2, #0]
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000010 	.word	0x20000010
 8001034:	200008f0 	.word	0x200008f0

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	200008f0 	.word	0x200008f0

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff ffee 	bl	8001038 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001068:	d005      	beq.n	8001076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <HAL_Delay+0x44>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4413      	add	r3, r2
 8001074:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001076:	bf00      	nop
 8001078:	f7ff ffde 	bl	8001038 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	429a      	cmp	r2, r3
 8001086:	d8f7      	bhi.n	8001078 <HAL_Delay+0x28>
  {
  }
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000010 	.word	0x20000010

08001098 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e0ed      	b.n	8001286 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d102      	bne.n	80010bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff fcf2 	bl	8000aa0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f042 0201 	orr.w	r2, r2, #1
 80010ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010cc:	f7ff ffb4 	bl	8001038 <HAL_GetTick>
 80010d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010d2:	e012      	b.n	80010fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010d4:	f7ff ffb0 	bl	8001038 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b0a      	cmp	r3, #10
 80010e0:	d90b      	bls.n	80010fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2205      	movs	r2, #5
 80010f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e0c5      	b.n	8001286 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0e5      	beq.n	80010d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f022 0202 	bic.w	r2, r2, #2
 8001116:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001118:	f7ff ff8e 	bl	8001038 <HAL_GetTick>
 800111c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800111e:	e012      	b.n	8001146 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001120:	f7ff ff8a 	bl	8001038 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b0a      	cmp	r3, #10
 800112c:	d90b      	bls.n	8001146 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001132:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2205      	movs	r2, #5
 800113e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e09f      	b.n	8001286 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1e5      	bne.n	8001120 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	7e1b      	ldrb	r3, [r3, #24]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d108      	bne.n	800116e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	e007      	b.n	800117e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800117c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7e5b      	ldrb	r3, [r3, #25]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d108      	bne.n	8001198 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	e007      	b.n	80011a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	7e9b      	ldrb	r3, [r3, #26]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d108      	bne.n	80011c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f042 0220 	orr.w	r2, r2, #32
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	e007      	b.n	80011d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 0220 	bic.w	r2, r2, #32
 80011d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	7edb      	ldrb	r3, [r3, #27]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d108      	bne.n	80011ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 0210 	bic.w	r2, r2, #16
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	e007      	b.n	80011fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f042 0210 	orr.w	r2, r2, #16
 80011fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	7f1b      	ldrb	r3, [r3, #28]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d108      	bne.n	8001216 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f042 0208 	orr.w	r2, r2, #8
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	e007      	b.n	8001226 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 0208 	bic.w	r2, r2, #8
 8001224:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	7f5b      	ldrb	r3, [r3, #29]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d108      	bne.n	8001240 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f042 0204 	orr.w	r2, r2, #4
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	e007      	b.n	8001250 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0204 	bic.w	r2, r2, #4
 800124e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	431a      	orrs	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	431a      	orrs	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	ea42 0103 	orr.w	r1, r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	1e5a      	subs	r2, r3, #1
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	430a      	orrs	r2, r1
 8001274:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2201      	movs	r2, #1
 8001280:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b084      	sub	sp, #16
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 3020 	ldrb.w	r3, [r3, #32]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d12e      	bne.n	8001300 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2202      	movs	r2, #2
 80012a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 0201 	bic.w	r2, r2, #1
 80012b8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80012ba:	f7ff febd 	bl	8001038 <HAL_GetTick>
 80012be:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012c0:	e012      	b.n	80012e8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012c2:	f7ff feb9 	bl	8001038 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b0a      	cmp	r3, #10
 80012ce:	d90b      	bls.n	80012e8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2205      	movs	r2, #5
 80012e0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e012      	b.n	800130e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1e5      	bne.n	80012c2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80012fc:	2300      	movs	r3, #0
 80012fe:	e006      	b.n	800130e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001304:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
  }
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001316:	b480      	push	{r7}
 8001318:	b089      	sub	sp, #36	; 0x24
 800131a:	af00      	add	r7, sp, #0
 800131c:	60f8      	str	r0, [r7, #12]
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f893 3020 	ldrb.w	r3, [r3, #32]
 800132a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001334:	7ffb      	ldrb	r3, [r7, #31]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d003      	beq.n	8001342 <HAL_CAN_AddTxMessage+0x2c>
 800133a:	7ffb      	ldrb	r3, [r7, #31]
 800133c:	2b02      	cmp	r3, #2
 800133e:	f040 80ad 	bne.w	800149c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d10a      	bne.n	8001362 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001352:	2b00      	cmp	r3, #0
 8001354:	d105      	bne.n	8001362 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 8095 	beq.w	800148c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	0e1b      	lsrs	r3, r3, #24
 8001366:	f003 0303 	and.w	r3, r3, #3
 800136a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800136c:	2201      	movs	r2, #1
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	409a      	lsls	r2, r3
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d10d      	bne.n	800139a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001388:	68f9      	ldr	r1, [r7, #12]
 800138a:	6809      	ldr	r1, [r1, #0]
 800138c:	431a      	orrs	r2, r3
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	3318      	adds	r3, #24
 8001392:	011b      	lsls	r3, r3, #4
 8001394:	440b      	add	r3, r1
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	e00f      	b.n	80013ba <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013a4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013aa:	68f9      	ldr	r1, [r7, #12]
 80013ac:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80013ae:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	3318      	adds	r3, #24
 80013b4:	011b      	lsls	r3, r3, #4
 80013b6:	440b      	add	r3, r1
 80013b8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6819      	ldr	r1, [r3, #0]
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	691a      	ldr	r2, [r3, #16]
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	3318      	adds	r3, #24
 80013c6:	011b      	lsls	r3, r3, #4
 80013c8:	440b      	add	r3, r1
 80013ca:	3304      	adds	r3, #4
 80013cc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	7d1b      	ldrb	r3, [r3, #20]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d111      	bne.n	80013fa <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	3318      	adds	r3, #24
 80013de:	011b      	lsls	r3, r3, #4
 80013e0:	4413      	add	r3, r2
 80013e2:	3304      	adds	r3, #4
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	6811      	ldr	r1, [r2, #0]
 80013ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	3318      	adds	r3, #24
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	440b      	add	r3, r1
 80013f6:	3304      	adds	r3, #4
 80013f8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3307      	adds	r3, #7
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	061a      	lsls	r2, r3, #24
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3306      	adds	r3, #6
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	041b      	lsls	r3, r3, #16
 800140a:	431a      	orrs	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3305      	adds	r3, #5
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	021b      	lsls	r3, r3, #8
 8001414:	4313      	orrs	r3, r2
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	3204      	adds	r2, #4
 800141a:	7812      	ldrb	r2, [r2, #0]
 800141c:	4610      	mov	r0, r2
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	6811      	ldr	r1, [r2, #0]
 8001422:	ea43 0200 	orr.w	r2, r3, r0
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	011b      	lsls	r3, r3, #4
 800142a:	440b      	add	r3, r1
 800142c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001430:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3303      	adds	r3, #3
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	061a      	lsls	r2, r3, #24
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3302      	adds	r3, #2
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	041b      	lsls	r3, r3, #16
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3301      	adds	r3, #1
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	021b      	lsls	r3, r3, #8
 800144c:	4313      	orrs	r3, r2
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	7812      	ldrb	r2, [r2, #0]
 8001452:	4610      	mov	r0, r2
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	6811      	ldr	r1, [r2, #0]
 8001458:	ea43 0200 	orr.w	r2, r3, r0
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	011b      	lsls	r3, r3, #4
 8001460:	440b      	add	r3, r1
 8001462:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001466:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	3318      	adds	r3, #24
 8001470:	011b      	lsls	r3, r3, #4
 8001472:	4413      	add	r3, r2
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	6811      	ldr	r1, [r2, #0]
 800147a:	f043 0201 	orr.w	r2, r3, #1
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	3318      	adds	r3, #24
 8001482:	011b      	lsls	r3, r3, #4
 8001484:	440b      	add	r3, r1
 8001486:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	e00e      	b.n	80014aa <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001490:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e006      	b.n	80014aa <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
  }
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3724      	adds	r7, #36	; 0x24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c8:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <__NVIC_SetPriorityGrouping+0x40>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d4:	4013      	ands	r3, r2
 80014d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <__NVIC_SetPriorityGrouping+0x44>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e6:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <__NVIC_SetPriorityGrouping+0x40>)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	60d3      	str	r3, [r2, #12]
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000ed00 	.word	0xe000ed00
 80014fc:	05fa0000 	.word	0x05fa0000

08001500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001504:	4b04      	ldr	r3, [pc, #16]	; (8001518 <__NVIC_GetPriorityGrouping+0x18>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	0a1b      	lsrs	r3, r3, #8
 800150a:	f003 0307 	and.w	r3, r3, #7
}
 800150e:	4618      	mov	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	2b00      	cmp	r3, #0
 800152c:	db0b      	blt.n	8001546 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	f003 021f 	and.w	r2, r3, #31
 8001534:	4907      	ldr	r1, [pc, #28]	; (8001554 <__NVIC_EnableIRQ+0x38>)
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	095b      	lsrs	r3, r3, #5
 800153c:	2001      	movs	r0, #1
 800153e:	fa00 f202 	lsl.w	r2, r0, r2
 8001542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000e100 	.word	0xe000e100

08001558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	6039      	str	r1, [r7, #0]
 8001562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001568:	2b00      	cmp	r3, #0
 800156a:	db0a      	blt.n	8001582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	b2da      	uxtb	r2, r3
 8001570:	490c      	ldr	r1, [pc, #48]	; (80015a4 <__NVIC_SetPriority+0x4c>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	0112      	lsls	r2, r2, #4
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	440b      	add	r3, r1
 800157c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001580:	e00a      	b.n	8001598 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4908      	ldr	r1, [pc, #32]	; (80015a8 <__NVIC_SetPriority+0x50>)
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	3b04      	subs	r3, #4
 8001590:	0112      	lsls	r2, r2, #4
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	440b      	add	r3, r1
 8001596:	761a      	strb	r2, [r3, #24]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000e100 	.word	0xe000e100
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b089      	sub	sp, #36	; 0x24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f1c3 0307 	rsb	r3, r3, #7
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	bf28      	it	cs
 80015ca:	2304      	movcs	r3, #4
 80015cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3304      	adds	r3, #4
 80015d2:	2b06      	cmp	r3, #6
 80015d4:	d902      	bls.n	80015dc <NVIC_EncodePriority+0x30>
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3b03      	subs	r3, #3
 80015da:	e000      	b.n	80015de <NVIC_EncodePriority+0x32>
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43da      	mvns	r2, r3
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	401a      	ands	r2, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	fa01 f303 	lsl.w	r3, r1, r3
 80015fe:	43d9      	mvns	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	4313      	orrs	r3, r2
         );
}
 8001606:	4618      	mov	r0, r3
 8001608:	3724      	adds	r7, #36	; 0x24
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff ff4c 	bl	80014b8 <__NVIC_SetPriorityGrouping>
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
 8001634:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800163a:	f7ff ff61 	bl	8001500 <__NVIC_GetPriorityGrouping>
 800163e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	68b9      	ldr	r1, [r7, #8]
 8001644:	6978      	ldr	r0, [r7, #20]
 8001646:	f7ff ffb1 	bl	80015ac <NVIC_EncodePriority>
 800164a:	4602      	mov	r2, r0
 800164c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001650:	4611      	mov	r1, r2
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ff80 	bl	8001558 <__NVIC_SetPriority>
}
 8001658:	bf00      	nop
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff ff54 	bl	800151c <__NVIC_EnableIRQ>
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e06a      	b.n	8001764 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001694:	2b00      	cmp	r3, #0
 8001696:	d106      	bne.n	80016a6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2223      	movs	r2, #35	; 0x23
 800169c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff fa41 	bl	8000b28 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a6:	4b31      	ldr	r3, [pc, #196]	; (800176c <HAL_ETH_Init+0xf0>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	4a30      	ldr	r2, [pc, #192]	; (800176c <HAL_ETH_Init+0xf0>)
 80016ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b0:	6453      	str	r3, [r2, #68]	; 0x44
 80016b2:	4b2e      	ldr	r3, [pc, #184]	; (800176c <HAL_ETH_Init+0xf0>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80016be:	4b2c      	ldr	r3, [pc, #176]	; (8001770 <HAL_ETH_Init+0xf4>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	4a2b      	ldr	r2, [pc, #172]	; (8001770 <HAL_ETH_Init+0xf4>)
 80016c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80016c8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80016ca:	4b29      	ldr	r3, [pc, #164]	; (8001770 <HAL_ETH_Init+0xf4>)
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	4927      	ldr	r1, [pc, #156]	; (8001770 <HAL_ETH_Init+0xf4>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80016d8:	4b25      	ldr	r3, [pc, #148]	; (8001770 <HAL_ETH_Init+0xf4>)
 80016da:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6812      	ldr	r2, [r2, #0]
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016f4:	f7ff fca0 	bl	8001038 <HAL_GetTick>
 80016f8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80016fa:	e011      	b.n	8001720 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80016fc:	f7ff fc9c 	bl	8001038 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800170a:	d909      	bls.n	8001720 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2204      	movs	r2, #4
 8001710:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	22e0      	movs	r2, #224	; 0xe0
 8001718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e021      	b.n	8001764 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1e4      	bne.n	80016fc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f958 	bl	80019e8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 f9ff 	bl	8001b3c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 fa55 	bl	8001bee <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	461a      	mov	r2, r3
 800174a:	2100      	movs	r1, #0
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 f9bd 	bl	8001acc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2210      	movs	r2, #16
 800175e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40023800 	.word	0x40023800
 8001770:	40013800 	.word	0x40013800

08001774 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	4b51      	ldr	r3, [pc, #324]	; (80018d0 <ETH_SetMACConfig+0x15c>)
 800178a:	4013      	ands	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	7c1b      	ldrb	r3, [r3, #16]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d102      	bne.n	800179c <ETH_SetMACConfig+0x28>
 8001796:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800179a:	e000      	b.n	800179e <ETH_SetMACConfig+0x2a>
 800179c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	7c5b      	ldrb	r3, [r3, #17]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d102      	bne.n	80017ac <ETH_SetMACConfig+0x38>
 80017a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017aa:	e000      	b.n	80017ae <ETH_SetMACConfig+0x3a>
 80017ac:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80017ae:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80017b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	7fdb      	ldrb	r3, [r3, #31]
 80017ba:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80017bc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80017c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	7f92      	ldrb	r2, [r2, #30]
 80017c8:	2a00      	cmp	r2, #0
 80017ca:	d102      	bne.n	80017d2 <ETH_SetMACConfig+0x5e>
 80017cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017d0:	e000      	b.n	80017d4 <ETH_SetMACConfig+0x60>
 80017d2:	2200      	movs	r2, #0
                        macconf->Speed |
 80017d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	7f1b      	ldrb	r3, [r3, #28]
 80017da:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80017dc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80017e2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	791b      	ldrb	r3, [r3, #4]
 80017e8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80017ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	f892 2020 	ldrb.w	r2, [r2, #32]
 80017f2:	2a00      	cmp	r2, #0
 80017f4:	d102      	bne.n	80017fc <ETH_SetMACConfig+0x88>
 80017f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017fa:	e000      	b.n	80017fe <ETH_SetMACConfig+0x8a>
 80017fc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80017fe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	7bdb      	ldrb	r3, [r3, #15]
 8001804:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001806:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800180c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001814:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001816:	4313      	orrs	r3, r2
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	4313      	orrs	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800182e:	2001      	movs	r0, #1
 8001830:	f7ff fc0e 	bl	8001050 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	f64f 7341 	movw	r3, #65345	; 0xff41
 800184a:	4013      	ands	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001852:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800185a:	2a00      	cmp	r2, #0
 800185c:	d101      	bne.n	8001862 <ETH_SetMACConfig+0xee>
 800185e:	2280      	movs	r2, #128	; 0x80
 8001860:	e000      	b.n	8001864 <ETH_SetMACConfig+0xf0>
 8001862:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001864:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800186a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001872:	2a01      	cmp	r2, #1
 8001874:	d101      	bne.n	800187a <ETH_SetMACConfig+0x106>
 8001876:	2208      	movs	r2, #8
 8001878:	e000      	b.n	800187c <ETH_SetMACConfig+0x108>
 800187a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800187c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001884:	2a01      	cmp	r2, #1
 8001886:	d101      	bne.n	800188c <ETH_SetMACConfig+0x118>
 8001888:	2204      	movs	r2, #4
 800188a:	e000      	b.n	800188e <ETH_SetMACConfig+0x11a>
 800188c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800188e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001896:	2a01      	cmp	r2, #1
 8001898:	d101      	bne.n	800189e <ETH_SetMACConfig+0x12a>
 800189a:	2202      	movs	r2, #2
 800189c:	e000      	b.n	80018a0 <ETH_SetMACConfig+0x12c>
 800189e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80018a0:	4313      	orrs	r3, r2
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80018b8:	2001      	movs	r0, #1
 80018ba:	f7ff fbc9 	bl	8001050 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	619a      	str	r2, [r3, #24]
}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	ff20810f 	.word	0xff20810f

080018d4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	4b3d      	ldr	r3, [pc, #244]	; (80019e4 <ETH_SetDMAConfig+0x110>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	7b1b      	ldrb	r3, [r3, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d102      	bne.n	8001900 <ETH_SetDMAConfig+0x2c>
 80018fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018fe:	e000      	b.n	8001902 <ETH_SetDMAConfig+0x2e>
 8001900:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	7b5b      	ldrb	r3, [r3, #13]
 8001906:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001908:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	7f52      	ldrb	r2, [r2, #29]
 800190e:	2a00      	cmp	r2, #0
 8001910:	d102      	bne.n	8001918 <ETH_SetDMAConfig+0x44>
 8001912:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001916:	e000      	b.n	800191a <ETH_SetDMAConfig+0x46>
 8001918:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800191a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	7b9b      	ldrb	r3, [r3, #14]
 8001920:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001922:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001928:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	7f1b      	ldrb	r3, [r3, #28]
 800192e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001930:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	7f9b      	ldrb	r3, [r3, #30]
 8001936:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001938:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800193e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001946:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001948:	4313      	orrs	r3, r2
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	4313      	orrs	r3, r2
 800194e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001958:	461a      	mov	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800196a:	2001      	movs	r0, #1
 800196c:	f7ff fb70 	bl	8001050 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001978:	461a      	mov	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	791b      	ldrb	r3, [r3, #4]
 8001982:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001988:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800198e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001994:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800199c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800199e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80019a6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80019ac:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6812      	ldr	r2, [r2, #0]
 80019b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019ba:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019c8:	2001      	movs	r0, #1
 80019ca:	f7ff fb41 	bl	8001050 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019d6:	461a      	mov	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6013      	str	r3, [r2, #0]
}
 80019dc:	bf00      	nop
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	f8de3f23 	.word	0xf8de3f23

080019e8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b0a6      	sub	sp, #152	; 0x98
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80019f0:	2301      	movs	r3, #1
 80019f2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80019f6:	2301      	movs	r3, #1
 80019f8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80019fc:	2300      	movs	r3, #0
 80019fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001a06:	2301      	movs	r3, #1
 8001a08:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001a12:	2301      	movs	r3, #1
 8001a14:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a24:	2300      	movs	r3, #0
 8001a26:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001a4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a4e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001a50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a54:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a60:	4619      	mov	r1, r3
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff fe86 	bl	8001774 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001a70:	2301      	movs	r3, #1
 8001a72:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001a76:	2301      	movs	r3, #1
 8001a78:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001a94:	2301      	movs	r3, #1
 8001a96:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a9c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001aa2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001aa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ab8:	f107 0308 	add.w	r3, r7, #8
 8001abc:	4619      	mov	r1, r3
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ff08 	bl	80018d4 <ETH_SetDMAConfig>
}
 8001ac4:	bf00      	nop
 8001ac6:	3798      	adds	r7, #152	; 0x98
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b087      	sub	sp, #28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3305      	adds	r3, #5
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	021b      	lsls	r3, r3, #8
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	3204      	adds	r2, #4
 8001ae4:	7812      	ldrb	r2, [r2, #0]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <ETH_MACAddressConfig+0x68>)
 8001aee:	4413      	add	r3, r2
 8001af0:	461a      	mov	r2, r3
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3303      	adds	r3, #3
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	061a      	lsls	r2, r3, #24
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3302      	adds	r3, #2
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	041b      	lsls	r3, r3, #16
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	021b      	lsls	r3, r3, #8
 8001b10:	4313      	orrs	r3, r2
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	7812      	ldrb	r2, [r2, #0]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <ETH_MACAddressConfig+0x6c>)
 8001b1e:	4413      	add	r3, r2
 8001b20:	461a      	mov	r2, r3
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	6013      	str	r3, [r2, #0]
}
 8001b26:	bf00      	nop
 8001b28:	371c      	adds	r7, #28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40028040 	.word	0x40028040
 8001b38:	40028044 	.word	0x40028044

08001b3c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	e03e      	b.n	8001bc8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68d9      	ldr	r1, [r3, #12]
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	440b      	add	r3, r1
 8001b5a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	2200      	movs	r2, #0
 8001b66:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	2200      	movs	r2, #0
 8001b72:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	3206      	adds	r2, #6
 8001b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d80c      	bhi.n	8001bac <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68d9      	ldr	r1, [r3, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1c5a      	adds	r2, r3, #1
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	440b      	add	r3, r1
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	e004      	b.n	8001bb6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	d9bd      	bls.n	8001b4a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be0:	611a      	str	r2, [r3, #16]
}
 8001be2:	bf00      	nop
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b085      	sub	sp, #20
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	e046      	b.n	8001c8a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6919      	ldr	r1, [r3, #16]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	440b      	add	r3, r1
 8001c0c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2200      	movs	r2, #0
 8001c18:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001c38:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001c40:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001c4e:	68b9      	ldr	r1, [r7, #8]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	3212      	adds	r2, #18
 8001c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d80c      	bhi.n	8001c7a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6919      	ldr	r1, [r3, #16]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	440b      	add	r3, r1
 8001c72:	461a      	mov	r2, r3
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	60da      	str	r2, [r3, #12]
 8001c78:	e004      	b.n	8001c84 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	3301      	adds	r3, #1
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2b03      	cmp	r3, #3
 8001c8e:	d9b5      	bls.n	8001bfc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691a      	ldr	r2, [r3, #16]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cba:	60da      	str	r2, [r3, #12]
}
 8001cbc:	bf00      	nop
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	; 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	e175      	b.n	8001fd4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ce8:	2201      	movs	r2, #1
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	f040 8164 	bne.w	8001fce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d005      	beq.n	8001d1e <HAL_GPIO_Init+0x56>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d130      	bne.n	8001d80 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	2203      	movs	r2, #3
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d54:	2201      	movs	r2, #1
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 0201 	and.w	r2, r3, #1
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d017      	beq.n	8001dbc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d123      	bne.n	8001e10 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	08da      	lsrs	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3208      	adds	r2, #8
 8001dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	220f      	movs	r2, #15
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	08da      	lsrs	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3208      	adds	r2, #8
 8001e0a:	69b9      	ldr	r1, [r7, #24]
 8001e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0203 	and.w	r2, r3, #3
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 80be 	beq.w	8001fce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e52:	4b66      	ldr	r3, [pc, #408]	; (8001fec <HAL_GPIO_Init+0x324>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	4a65      	ldr	r2, [pc, #404]	; (8001fec <HAL_GPIO_Init+0x324>)
 8001e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e5e:	4b63      	ldr	r3, [pc, #396]	; (8001fec <HAL_GPIO_Init+0x324>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e6a:	4a61      	ldr	r2, [pc, #388]	; (8001ff0 <HAL_GPIO_Init+0x328>)
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	089b      	lsrs	r3, r3, #2
 8001e70:	3302      	adds	r3, #2
 8001e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	220f      	movs	r2, #15
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a58      	ldr	r2, [pc, #352]	; (8001ff4 <HAL_GPIO_Init+0x32c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d037      	beq.n	8001f06 <HAL_GPIO_Init+0x23e>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a57      	ldr	r2, [pc, #348]	; (8001ff8 <HAL_GPIO_Init+0x330>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d031      	beq.n	8001f02 <HAL_GPIO_Init+0x23a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a56      	ldr	r2, [pc, #344]	; (8001ffc <HAL_GPIO_Init+0x334>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d02b      	beq.n	8001efe <HAL_GPIO_Init+0x236>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a55      	ldr	r2, [pc, #340]	; (8002000 <HAL_GPIO_Init+0x338>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d025      	beq.n	8001efa <HAL_GPIO_Init+0x232>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a54      	ldr	r2, [pc, #336]	; (8002004 <HAL_GPIO_Init+0x33c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d01f      	beq.n	8001ef6 <HAL_GPIO_Init+0x22e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a53      	ldr	r2, [pc, #332]	; (8002008 <HAL_GPIO_Init+0x340>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d019      	beq.n	8001ef2 <HAL_GPIO_Init+0x22a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a52      	ldr	r2, [pc, #328]	; (800200c <HAL_GPIO_Init+0x344>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d013      	beq.n	8001eee <HAL_GPIO_Init+0x226>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a51      	ldr	r2, [pc, #324]	; (8002010 <HAL_GPIO_Init+0x348>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00d      	beq.n	8001eea <HAL_GPIO_Init+0x222>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a50      	ldr	r2, [pc, #320]	; (8002014 <HAL_GPIO_Init+0x34c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d007      	beq.n	8001ee6 <HAL_GPIO_Init+0x21e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a4f      	ldr	r2, [pc, #316]	; (8002018 <HAL_GPIO_Init+0x350>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d101      	bne.n	8001ee2 <HAL_GPIO_Init+0x21a>
 8001ede:	2309      	movs	r3, #9
 8001ee0:	e012      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001ee2:	230a      	movs	r3, #10
 8001ee4:	e010      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001ee6:	2308      	movs	r3, #8
 8001ee8:	e00e      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001eea:	2307      	movs	r3, #7
 8001eec:	e00c      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001eee:	2306      	movs	r3, #6
 8001ef0:	e00a      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001ef2:	2305      	movs	r3, #5
 8001ef4:	e008      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001ef6:	2304      	movs	r3, #4
 8001ef8:	e006      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001efa:	2303      	movs	r3, #3
 8001efc:	e004      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e002      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001f06:	2300      	movs	r3, #0
 8001f08:	69fa      	ldr	r2, [r7, #28]
 8001f0a:	f002 0203 	and.w	r2, r2, #3
 8001f0e:	0092      	lsls	r2, r2, #2
 8001f10:	4093      	lsls	r3, r2
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f18:	4935      	ldr	r1, [pc, #212]	; (8001ff0 <HAL_GPIO_Init+0x328>)
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	089b      	lsrs	r3, r3, #2
 8001f1e:	3302      	adds	r3, #2
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f26:	4b3d      	ldr	r3, [pc, #244]	; (800201c <HAL_GPIO_Init+0x354>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f4a:	4a34      	ldr	r2, [pc, #208]	; (800201c <HAL_GPIO_Init+0x354>)
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f50:	4b32      	ldr	r3, [pc, #200]	; (800201c <HAL_GPIO_Init+0x354>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f74:	4a29      	ldr	r2, [pc, #164]	; (800201c <HAL_GPIO_Init+0x354>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f7a:	4b28      	ldr	r3, [pc, #160]	; (800201c <HAL_GPIO_Init+0x354>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4013      	ands	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f9e:	4a1f      	ldr	r2, [pc, #124]	; (800201c <HAL_GPIO_Init+0x354>)
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fa4:	4b1d      	ldr	r3, [pc, #116]	; (800201c <HAL_GPIO_Init+0x354>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fc8:	4a14      	ldr	r2, [pc, #80]	; (800201c <HAL_GPIO_Init+0x354>)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	61fb      	str	r3, [r7, #28]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	2b0f      	cmp	r3, #15
 8001fd8:	f67f ae86 	bls.w	8001ce8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001fdc:	bf00      	nop
 8001fde:	bf00      	nop
 8001fe0:	3724      	adds	r7, #36	; 0x24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40013800 	.word	0x40013800
 8001ff4:	40020000 	.word	0x40020000
 8001ff8:	40020400 	.word	0x40020400
 8001ffc:	40020800 	.word	0x40020800
 8002000:	40020c00 	.word	0x40020c00
 8002004:	40021000 	.word	0x40021000
 8002008:	40021400 	.word	0x40021400
 800200c:	40021800 	.word	0x40021800
 8002010:	40021c00 	.word	0x40021c00
 8002014:	40022000 	.word	0x40022000
 8002018:	40022400 	.word	0x40022400
 800201c:	40013c00 	.word	0x40013c00

08002020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	807b      	strh	r3, [r7, #2]
 800202c:	4613      	mov	r3, r2
 800202e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002030:	787b      	ldrb	r3, [r7, #1]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002036:	887a      	ldrh	r2, [r7, #2]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800203c:	e003      	b.n	8002046 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800203e:	887b      	ldrh	r3, [r7, #2]
 8002040:	041a      	lsls	r2, r3, #16
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	619a      	str	r2, [r3, #24]
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002052:	b480      	push	{r7}
 8002054:	b085      	sub	sp, #20
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	460b      	mov	r3, r1
 800205c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002064:	887a      	ldrh	r2, [r7, #2]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4013      	ands	r3, r2
 800206a:	041a      	lsls	r2, r3, #16
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	43d9      	mvns	r1, r3
 8002070:	887b      	ldrh	r3, [r7, #2]
 8002072:	400b      	ands	r3, r1
 8002074:	431a      	orrs	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	619a      	str	r2, [r3, #24]
}
 800207a:	bf00      	nop
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002086:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002088:	b08f      	sub	sp, #60	; 0x3c
 800208a:	af0a      	add	r7, sp, #40	; 0x28
 800208c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e116      	b.n	80022c6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d106      	bne.n	80020b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7fe fe50 	bl	8000d58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2203      	movs	r2, #3
 80020bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d102      	bne.n	80020d2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f002 fa4c 	bl	8004574 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	687e      	ldr	r6, [r7, #4]
 80020e4:	466d      	mov	r5, sp
 80020e6:	f106 0410 	add.w	r4, r6, #16
 80020ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80020fa:	1d33      	adds	r3, r6, #4
 80020fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020fe:	6838      	ldr	r0, [r7, #0]
 8002100:	f002 f9e0 	bl	80044c4 <USB_CoreInit>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d005      	beq.n	8002116 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2202      	movs	r2, #2
 800210e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e0d7      	b.n	80022c6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2100      	movs	r1, #0
 800211c:	4618      	mov	r0, r3
 800211e:	f002 fa3a 	bl	8004596 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002122:	2300      	movs	r3, #0
 8002124:	73fb      	strb	r3, [r7, #15]
 8002126:	e04a      	b.n	80021be <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002128:	7bfa      	ldrb	r2, [r7, #15]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	333d      	adds	r3, #61	; 0x3d
 8002138:	2201      	movs	r2, #1
 800213a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800213c:	7bfa      	ldrb	r2, [r7, #15]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4413      	add	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	333c      	adds	r3, #60	; 0x3c
 800214c:	7bfa      	ldrb	r2, [r7, #15]
 800214e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002150:	7bfa      	ldrb	r2, [r7, #15]
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	b298      	uxth	r0, r3
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4413      	add	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	3344      	adds	r3, #68	; 0x44
 8002164:	4602      	mov	r2, r0
 8002166:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002168:	7bfa      	ldrb	r2, [r7, #15]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	3340      	adds	r3, #64	; 0x40
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800217c:	7bfa      	ldrb	r2, [r7, #15]
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	3348      	adds	r3, #72	; 0x48
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002190:	7bfa      	ldrb	r2, [r7, #15]
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	334c      	adds	r3, #76	; 0x4c
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021a4:	7bfa      	ldrb	r2, [r7, #15]
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4413      	add	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	3354      	adds	r3, #84	; 0x54
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	3301      	adds	r3, #1
 80021bc:	73fb      	strb	r3, [r7, #15]
 80021be:	7bfa      	ldrb	r2, [r7, #15]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d3af      	bcc.n	8002128 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c8:	2300      	movs	r3, #0
 80021ca:	73fb      	strb	r3, [r7, #15]
 80021cc:	e044      	b.n	8002258 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021ce:	7bfa      	ldrb	r2, [r7, #15]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4413      	add	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	440b      	add	r3, r1
 80021dc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021e4:	7bfa      	ldrb	r2, [r7, #15]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80021f6:	7bfa      	ldrb	r2, [r7, #15]
 80021f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021fa:	7bfa      	ldrb	r2, [r7, #15]
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	4413      	add	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002210:	7bfa      	ldrb	r2, [r7, #15]
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	4613      	mov	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4413      	add	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002226:	7bfa      	ldrb	r2, [r7, #15]
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	4413      	add	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800223c:	7bfa      	ldrb	r2, [r7, #15]
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4413      	add	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	3301      	adds	r3, #1
 8002256:	73fb      	strb	r3, [r7, #15]
 8002258:	7bfa      	ldrb	r2, [r7, #15]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	429a      	cmp	r2, r3
 8002260:	d3b5      	bcc.n	80021ce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	687e      	ldr	r6, [r7, #4]
 800226a:	466d      	mov	r5, sp
 800226c:	f106 0410 	add.w	r4, r6, #16
 8002270:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002272:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002274:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002276:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002278:	e894 0003 	ldmia.w	r4, {r0, r1}
 800227c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002280:	1d33      	adds	r3, r6, #4
 8002282:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002284:	6838      	ldr	r0, [r7, #0]
 8002286:	f002 f9d3 	bl	8004630 <USB_DevInit>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e014      	b.n	80022c6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d102      	bne.n	80022ba <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f80b 	bl	80022d0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f002 fb91 	bl	80049e6 <USB_DevDisconnect>

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080022d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022fe:	4b05      	ldr	r3, [pc, #20]	; (8002314 <HAL_PCDEx_ActivateLPM+0x44>)
 8002300:	4313      	orrs	r3, r2
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	10000003 	.word	0x10000003

08002318 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a04      	ldr	r2, [pc, #16]	; (8002334 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002326:	6013      	str	r3, [r2, #0]
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40007000 	.word	0x40007000

08002338 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002342:	4b23      	ldr	r3, [pc, #140]	; (80023d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	4a22      	ldr	r2, [pc, #136]	; (80023d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234c:	6413      	str	r3, [r2, #64]	; 0x40
 800234e:	4b20      	ldr	r3, [pc, #128]	; (80023d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800235a:	4b1e      	ldr	r3, [pc, #120]	; (80023d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a1d      	ldr	r2, [pc, #116]	; (80023d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002364:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002366:	f7fe fe67 	bl	8001038 <HAL_GetTick>
 800236a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800236c:	e009      	b.n	8002382 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800236e:	f7fe fe63 	bl	8001038 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800237c:	d901      	bls.n	8002382 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e022      	b.n	80023c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002382:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238e:	d1ee      	bne.n	800236e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002390:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a0f      	ldr	r2, [pc, #60]	; (80023d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002396:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800239a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800239c:	f7fe fe4c 	bl	8001038 <HAL_GetTick>
 80023a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023a2:	e009      	b.n	80023b8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023a4:	f7fe fe48 	bl	8001038 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023b2:	d901      	bls.n	80023b8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e007      	b.n	80023c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023c4:	d1ee      	bne.n	80023a4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40007000 	.word	0x40007000

080023d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80023e0:	2300      	movs	r3, #0
 80023e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e29b      	b.n	8002926 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 8087 	beq.w	800250a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023fc:	4b96      	ldr	r3, [pc, #600]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 030c 	and.w	r3, r3, #12
 8002404:	2b04      	cmp	r3, #4
 8002406:	d00c      	beq.n	8002422 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002408:	4b93      	ldr	r3, [pc, #588]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 030c 	and.w	r3, r3, #12
 8002410:	2b08      	cmp	r3, #8
 8002412:	d112      	bne.n	800243a <HAL_RCC_OscConfig+0x62>
 8002414:	4b90      	ldr	r3, [pc, #576]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002420:	d10b      	bne.n	800243a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002422:	4b8d      	ldr	r3, [pc, #564]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d06c      	beq.n	8002508 <HAL_RCC_OscConfig+0x130>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d168      	bne.n	8002508 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e275      	b.n	8002926 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002442:	d106      	bne.n	8002452 <HAL_RCC_OscConfig+0x7a>
 8002444:	4b84      	ldr	r3, [pc, #528]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a83      	ldr	r2, [pc, #524]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 800244a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	e02e      	b.n	80024b0 <HAL_RCC_OscConfig+0xd8>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10c      	bne.n	8002474 <HAL_RCC_OscConfig+0x9c>
 800245a:	4b7f      	ldr	r3, [pc, #508]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a7e      	ldr	r2, [pc, #504]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 8002460:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	4b7c      	ldr	r3, [pc, #496]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a7b      	ldr	r2, [pc, #492]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 800246c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	e01d      	b.n	80024b0 <HAL_RCC_OscConfig+0xd8>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800247c:	d10c      	bne.n	8002498 <HAL_RCC_OscConfig+0xc0>
 800247e:	4b76      	ldr	r3, [pc, #472]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a75      	ldr	r2, [pc, #468]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 8002484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	4b73      	ldr	r3, [pc, #460]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a72      	ldr	r2, [pc, #456]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 8002490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	e00b      	b.n	80024b0 <HAL_RCC_OscConfig+0xd8>
 8002498:	4b6f      	ldr	r3, [pc, #444]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a6e      	ldr	r2, [pc, #440]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 800249e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	4b6c      	ldr	r3, [pc, #432]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a6b      	ldr	r2, [pc, #428]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 80024aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d013      	beq.n	80024e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b8:	f7fe fdbe 	bl	8001038 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c0:	f7fe fdba 	bl	8001038 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b64      	cmp	r3, #100	; 0x64
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e229      	b.n	8002926 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	4b61      	ldr	r3, [pc, #388]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0f0      	beq.n	80024c0 <HAL_RCC_OscConfig+0xe8>
 80024de:	e014      	b.n	800250a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e0:	f7fe fdaa 	bl	8001038 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e8:	f7fe fda6 	bl	8001038 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	; 0x64
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e215      	b.n	8002926 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fa:	4b57      	ldr	r3, [pc, #348]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x110>
 8002506:	e000      	b.n	800250a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d069      	beq.n	80025ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002516:	4b50      	ldr	r3, [pc, #320]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00b      	beq.n	800253a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002522:	4b4d      	ldr	r3, [pc, #308]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b08      	cmp	r3, #8
 800252c:	d11c      	bne.n	8002568 <HAL_RCC_OscConfig+0x190>
 800252e:	4b4a      	ldr	r3, [pc, #296]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d116      	bne.n	8002568 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800253a:	4b47      	ldr	r3, [pc, #284]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d005      	beq.n	8002552 <HAL_RCC_OscConfig+0x17a>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d001      	beq.n	8002552 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e1e9      	b.n	8002926 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002552:	4b41      	ldr	r3, [pc, #260]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	493d      	ldr	r1, [pc, #244]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 8002562:	4313      	orrs	r3, r2
 8002564:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002566:	e040      	b.n	80025ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d023      	beq.n	80025b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002570:	4b39      	ldr	r3, [pc, #228]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a38      	ldr	r2, [pc, #224]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257c:	f7fe fd5c 	bl	8001038 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002584:	f7fe fd58 	bl	8001038 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e1c7      	b.n	8002926 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002596:	4b30      	ldr	r3, [pc, #192]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0f0      	beq.n	8002584 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a2:	4b2d      	ldr	r3, [pc, #180]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	4929      	ldr	r1, [pc, #164]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]
 80025b6:	e018      	b.n	80025ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025b8:	4b27      	ldr	r3, [pc, #156]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a26      	ldr	r2, [pc, #152]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 80025be:	f023 0301 	bic.w	r3, r3, #1
 80025c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c4:	f7fe fd38 	bl	8001038 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025cc:	f7fe fd34 	bl	8001038 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e1a3      	b.n	8002926 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025de:	4b1e      	ldr	r3, [pc, #120]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f0      	bne.n	80025cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d038      	beq.n	8002668 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d019      	beq.n	8002632 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025fe:	4b16      	ldr	r3, [pc, #88]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 8002600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002602:	4a15      	ldr	r2, [pc, #84]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260a:	f7fe fd15 	bl	8001038 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002612:	f7fe fd11 	bl	8001038 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e180      	b.n	8002926 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002624:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 8002626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f0      	beq.n	8002612 <HAL_RCC_OscConfig+0x23a>
 8002630:	e01a      	b.n	8002668 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002632:	4b09      	ldr	r3, [pc, #36]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 8002634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002636:	4a08      	ldr	r2, [pc, #32]	; (8002658 <HAL_RCC_OscConfig+0x280>)
 8002638:	f023 0301 	bic.w	r3, r3, #1
 800263c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263e:	f7fe fcfb 	bl	8001038 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002644:	e00a      	b.n	800265c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002646:	f7fe fcf7 	bl	8001038 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d903      	bls.n	800265c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e166      	b.n	8002926 <HAL_RCC_OscConfig+0x54e>
 8002658:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800265c:	4b92      	ldr	r3, [pc, #584]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 800265e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1ee      	bne.n	8002646 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80a4 	beq.w	80027be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002676:	4b8c      	ldr	r3, [pc, #560]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10d      	bne.n	800269e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002682:	4b89      	ldr	r3, [pc, #548]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	4a88      	ldr	r2, [pc, #544]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 8002688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800268c:	6413      	str	r3, [r2, #64]	; 0x40
 800268e:	4b86      	ldr	r3, [pc, #536]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002696:	60bb      	str	r3, [r7, #8]
 8002698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800269a:	2301      	movs	r3, #1
 800269c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800269e:	4b83      	ldr	r3, [pc, #524]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d118      	bne.n	80026dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80026aa:	4b80      	ldr	r3, [pc, #512]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a7f      	ldr	r2, [pc, #508]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 80026b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026b6:	f7fe fcbf 	bl	8001038 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026be:	f7fe fcbb 	bl	8001038 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b64      	cmp	r3, #100	; 0x64
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e12a      	b.n	8002926 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026d0:	4b76      	ldr	r3, [pc, #472]	; (80028ac <HAL_RCC_OscConfig+0x4d4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0f0      	beq.n	80026be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d106      	bne.n	80026f2 <HAL_RCC_OscConfig+0x31a>
 80026e4:	4b70      	ldr	r3, [pc, #448]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 80026e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e8:	4a6f      	ldr	r2, [pc, #444]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	6713      	str	r3, [r2, #112]	; 0x70
 80026f0:	e02d      	b.n	800274e <HAL_RCC_OscConfig+0x376>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10c      	bne.n	8002714 <HAL_RCC_OscConfig+0x33c>
 80026fa:	4b6b      	ldr	r3, [pc, #428]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 80026fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fe:	4a6a      	ldr	r2, [pc, #424]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 8002700:	f023 0301 	bic.w	r3, r3, #1
 8002704:	6713      	str	r3, [r2, #112]	; 0x70
 8002706:	4b68      	ldr	r3, [pc, #416]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 8002708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270a:	4a67      	ldr	r2, [pc, #412]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 800270c:	f023 0304 	bic.w	r3, r3, #4
 8002710:	6713      	str	r3, [r2, #112]	; 0x70
 8002712:	e01c      	b.n	800274e <HAL_RCC_OscConfig+0x376>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2b05      	cmp	r3, #5
 800271a:	d10c      	bne.n	8002736 <HAL_RCC_OscConfig+0x35e>
 800271c:	4b62      	ldr	r3, [pc, #392]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 800271e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002720:	4a61      	ldr	r2, [pc, #388]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 8002722:	f043 0304 	orr.w	r3, r3, #4
 8002726:	6713      	str	r3, [r2, #112]	; 0x70
 8002728:	4b5f      	ldr	r3, [pc, #380]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 800272a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272c:	4a5e      	ldr	r2, [pc, #376]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	6713      	str	r3, [r2, #112]	; 0x70
 8002734:	e00b      	b.n	800274e <HAL_RCC_OscConfig+0x376>
 8002736:	4b5c      	ldr	r3, [pc, #368]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 8002738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273a:	4a5b      	ldr	r2, [pc, #364]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 800273c:	f023 0301 	bic.w	r3, r3, #1
 8002740:	6713      	str	r3, [r2, #112]	; 0x70
 8002742:	4b59      	ldr	r3, [pc, #356]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 8002744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002746:	4a58      	ldr	r2, [pc, #352]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 8002748:	f023 0304 	bic.w	r3, r3, #4
 800274c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d015      	beq.n	8002782 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002756:	f7fe fc6f 	bl	8001038 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275c:	e00a      	b.n	8002774 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275e:	f7fe fc6b 	bl	8001038 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	f241 3288 	movw	r2, #5000	; 0x1388
 800276c:	4293      	cmp	r3, r2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e0d8      	b.n	8002926 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002774:	4b4c      	ldr	r3, [pc, #304]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 8002776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0ee      	beq.n	800275e <HAL_RCC_OscConfig+0x386>
 8002780:	e014      	b.n	80027ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002782:	f7fe fc59 	bl	8001038 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002788:	e00a      	b.n	80027a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278a:	f7fe fc55 	bl	8001038 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	f241 3288 	movw	r2, #5000	; 0x1388
 8002798:	4293      	cmp	r3, r2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e0c2      	b.n	8002926 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a0:	4b41      	ldr	r3, [pc, #260]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 80027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1ee      	bne.n	800278a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027ac:	7dfb      	ldrb	r3, [r7, #23]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d105      	bne.n	80027be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b2:	4b3d      	ldr	r3, [pc, #244]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	4a3c      	ldr	r2, [pc, #240]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 80027b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 80ae 	beq.w	8002924 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027c8:	4b37      	ldr	r3, [pc, #220]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 030c 	and.w	r3, r3, #12
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d06d      	beq.n	80028b0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d14b      	bne.n	8002874 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027dc:	4b32      	ldr	r3, [pc, #200]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a31      	ldr	r2, [pc, #196]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 80027e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e8:	f7fe fc26 	bl	8001038 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f0:	f7fe fc22 	bl	8001038 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e091      	b.n	8002926 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002802:	4b29      	ldr	r3, [pc, #164]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69da      	ldr	r2, [r3, #28]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	019b      	lsls	r3, r3, #6
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002824:	085b      	lsrs	r3, r3, #1
 8002826:	3b01      	subs	r3, #1
 8002828:	041b      	lsls	r3, r3, #16
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002830:	061b      	lsls	r3, r3, #24
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002838:	071b      	lsls	r3, r3, #28
 800283a:	491b      	ldr	r1, [pc, #108]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 800283c:	4313      	orrs	r3, r2
 800283e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002840:	4b19      	ldr	r3, [pc, #100]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a18      	ldr	r2, [pc, #96]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 8002846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800284a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284c:	f7fe fbf4 	bl	8001038 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002854:	f7fe fbf0 	bl	8001038 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e05f      	b.n	8002926 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002866:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0x47c>
 8002872:	e057      	b.n	8002924 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002874:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a0b      	ldr	r2, [pc, #44]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 800287a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800287e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002880:	f7fe fbda 	bl	8001038 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002888:	f7fe fbd6 	bl	8001038 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e045      	b.n	8002926 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289a:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <HAL_RCC_OscConfig+0x4d0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x4b0>
 80028a6:	e03d      	b.n	8002924 <HAL_RCC_OscConfig+0x54c>
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80028b0:	4b1f      	ldr	r3, [pc, #124]	; (8002930 <HAL_RCC_OscConfig+0x558>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d030      	beq.n	8002920 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d129      	bne.n	8002920 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d122      	bne.n	8002920 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028e0:	4013      	ands	r3, r2
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d119      	bne.n	8002920 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f6:	085b      	lsrs	r3, r3, #1
 80028f8:	3b01      	subs	r3, #1
 80028fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d10f      	bne.n	8002920 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800290c:	429a      	cmp	r2, r3
 800290e:	d107      	bne.n	8002920 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800291c:	429a      	cmp	r2, r3
 800291e:	d001      	beq.n	8002924 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40023800 	.word	0x40023800

08002934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0d0      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800294c:	4b6a      	ldr	r3, [pc, #424]	; (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d910      	bls.n	800297c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295a:	4b67      	ldr	r3, [pc, #412]	; (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 020f 	bic.w	r2, r3, #15
 8002962:	4965      	ldr	r1, [pc, #404]	; (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	4313      	orrs	r3, r2
 8002968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800296a:	4b63      	ldr	r3, [pc, #396]	; (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d001      	beq.n	800297c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0b8      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d020      	beq.n	80029ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002994:	4b59      	ldr	r3, [pc, #356]	; (8002afc <HAL_RCC_ClockConfig+0x1c8>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	4a58      	ldr	r2, [pc, #352]	; (8002afc <HAL_RCC_ClockConfig+0x1c8>)
 800299a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800299e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029ac:	4b53      	ldr	r3, [pc, #332]	; (8002afc <HAL_RCC_ClockConfig+0x1c8>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4a52      	ldr	r2, [pc, #328]	; (8002afc <HAL_RCC_ClockConfig+0x1c8>)
 80029b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b8:	4b50      	ldr	r3, [pc, #320]	; (8002afc <HAL_RCC_ClockConfig+0x1c8>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	494d      	ldr	r1, [pc, #308]	; (8002afc <HAL_RCC_ClockConfig+0x1c8>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d040      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d107      	bne.n	80029ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029de:	4b47      	ldr	r3, [pc, #284]	; (8002afc <HAL_RCC_ClockConfig+0x1c8>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d115      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e07f      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d107      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f6:	4b41      	ldr	r3, [pc, #260]	; (8002afc <HAL_RCC_ClockConfig+0x1c8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e073      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a06:	4b3d      	ldr	r3, [pc, #244]	; (8002afc <HAL_RCC_ClockConfig+0x1c8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e06b      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a16:	4b39      	ldr	r3, [pc, #228]	; (8002afc <HAL_RCC_ClockConfig+0x1c8>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f023 0203 	bic.w	r2, r3, #3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	4936      	ldr	r1, [pc, #216]	; (8002afc <HAL_RCC_ClockConfig+0x1c8>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a28:	f7fe fb06 	bl	8001038 <HAL_GetTick>
 8002a2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2e:	e00a      	b.n	8002a46 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a30:	f7fe fb02 	bl	8001038 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e053      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a46:	4b2d      	ldr	r3, [pc, #180]	; (8002afc <HAL_RCC_ClockConfig+0x1c8>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 020c 	and.w	r2, r3, #12
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d1eb      	bne.n	8002a30 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a58:	4b27      	ldr	r3, [pc, #156]	; (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d210      	bcs.n	8002a88 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b24      	ldr	r3, [pc, #144]	; (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 020f 	bic.w	r2, r3, #15
 8002a6e:	4922      	ldr	r1, [pc, #136]	; (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a76:	4b20      	ldr	r3, [pc, #128]	; (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e032      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a94:	4b19      	ldr	r3, [pc, #100]	; (8002afc <HAL_RCC_ClockConfig+0x1c8>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4916      	ldr	r1, [pc, #88]	; (8002afc <HAL_RCC_ClockConfig+0x1c8>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d009      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ab2:	4b12      	ldr	r3, [pc, #72]	; (8002afc <HAL_RCC_ClockConfig+0x1c8>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	490e      	ldr	r1, [pc, #56]	; (8002afc <HAL_RCC_ClockConfig+0x1c8>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ac6:	f000 f821 	bl	8002b0c <HAL_RCC_GetSysClockFreq>
 8002aca:	4602      	mov	r2, r0
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <HAL_RCC_ClockConfig+0x1c8>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	490a      	ldr	r1, [pc, #40]	; (8002b00 <HAL_RCC_ClockConfig+0x1cc>)
 8002ad8:	5ccb      	ldrb	r3, [r1, r3]
 8002ada:	fa22 f303 	lsr.w	r3, r2, r3
 8002ade:	4a09      	ldr	r2, [pc, #36]	; (8002b04 <HAL_RCC_ClockConfig+0x1d0>)
 8002ae0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ae2:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <HAL_RCC_ClockConfig+0x1d4>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe f9b0 	bl	8000e4c <HAL_InitTick>

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40023c00 	.word	0x40023c00
 8002afc:	40023800 	.word	0x40023800
 8002b00:	08007930 	.word	0x08007930
 8002b04:	20000008 	.word	0x20000008
 8002b08:	2000000c 	.word	0x2000000c

08002b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b10:	b094      	sub	sp, #80	; 0x50
 8002b12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	647b      	str	r3, [r7, #68]	; 0x44
 8002b18:	2300      	movs	r3, #0
 8002b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b24:	4b79      	ldr	r3, [pc, #484]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d00d      	beq.n	8002b4c <HAL_RCC_GetSysClockFreq+0x40>
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	f200 80e1 	bhi.w	8002cf8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <HAL_RCC_GetSysClockFreq+0x34>
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d003      	beq.n	8002b46 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b3e:	e0db      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b40:	4b73      	ldr	r3, [pc, #460]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b44:	e0db      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b46:	4b73      	ldr	r3, [pc, #460]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b4a:	e0d8      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b4c:	4b6f      	ldr	r3, [pc, #444]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b54:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002b56:	4b6d      	ldr	r3, [pc, #436]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d063      	beq.n	8002c2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b62:	4b6a      	ldr	r3, [pc, #424]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	099b      	lsrs	r3, r3, #6
 8002b68:	2200      	movs	r2, #0
 8002b6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b74:	633b      	str	r3, [r7, #48]	; 0x30
 8002b76:	2300      	movs	r3, #0
 8002b78:	637b      	str	r3, [r7, #52]	; 0x34
 8002b7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b7e:	4622      	mov	r2, r4
 8002b80:	462b      	mov	r3, r5
 8002b82:	f04f 0000 	mov.w	r0, #0
 8002b86:	f04f 0100 	mov.w	r1, #0
 8002b8a:	0159      	lsls	r1, r3, #5
 8002b8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b90:	0150      	lsls	r0, r2, #5
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4621      	mov	r1, r4
 8002b98:	1a51      	subs	r1, r2, r1
 8002b9a:	6139      	str	r1, [r7, #16]
 8002b9c:	4629      	mov	r1, r5
 8002b9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bb0:	4659      	mov	r1, fp
 8002bb2:	018b      	lsls	r3, r1, #6
 8002bb4:	4651      	mov	r1, sl
 8002bb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bba:	4651      	mov	r1, sl
 8002bbc:	018a      	lsls	r2, r1, #6
 8002bbe:	4651      	mov	r1, sl
 8002bc0:	ebb2 0801 	subs.w	r8, r2, r1
 8002bc4:	4659      	mov	r1, fp
 8002bc6:	eb63 0901 	sbc.w	r9, r3, r1
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bde:	4690      	mov	r8, r2
 8002be0:	4699      	mov	r9, r3
 8002be2:	4623      	mov	r3, r4
 8002be4:	eb18 0303 	adds.w	r3, r8, r3
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	462b      	mov	r3, r5
 8002bec:	eb49 0303 	adc.w	r3, r9, r3
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	f04f 0300 	mov.w	r3, #0
 8002bfa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bfe:	4629      	mov	r1, r5
 8002c00:	024b      	lsls	r3, r1, #9
 8002c02:	4621      	mov	r1, r4
 8002c04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c08:	4621      	mov	r1, r4
 8002c0a:	024a      	lsls	r2, r1, #9
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c12:	2200      	movs	r2, #0
 8002c14:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c1c:	f7fd fb10 	bl	8000240 <__aeabi_uldivmod>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4613      	mov	r3, r2
 8002c26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c28:	e058      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c2a:	4b38      	ldr	r3, [pc, #224]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	099b      	lsrs	r3, r3, #6
 8002c30:	2200      	movs	r2, #0
 8002c32:	4618      	mov	r0, r3
 8002c34:	4611      	mov	r1, r2
 8002c36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c3a:	623b      	str	r3, [r7, #32]
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c44:	4642      	mov	r2, r8
 8002c46:	464b      	mov	r3, r9
 8002c48:	f04f 0000 	mov.w	r0, #0
 8002c4c:	f04f 0100 	mov.w	r1, #0
 8002c50:	0159      	lsls	r1, r3, #5
 8002c52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c56:	0150      	lsls	r0, r2, #5
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4641      	mov	r1, r8
 8002c5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c62:	4649      	mov	r1, r9
 8002c64:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c7c:	ebb2 040a 	subs.w	r4, r2, sl
 8002c80:	eb63 050b 	sbc.w	r5, r3, fp
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	f04f 0300 	mov.w	r3, #0
 8002c8c:	00eb      	lsls	r3, r5, #3
 8002c8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c92:	00e2      	lsls	r2, r4, #3
 8002c94:	4614      	mov	r4, r2
 8002c96:	461d      	mov	r5, r3
 8002c98:	4643      	mov	r3, r8
 8002c9a:	18e3      	adds	r3, r4, r3
 8002c9c:	603b      	str	r3, [r7, #0]
 8002c9e:	464b      	mov	r3, r9
 8002ca0:	eb45 0303 	adc.w	r3, r5, r3
 8002ca4:	607b      	str	r3, [r7, #4]
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	028b      	lsls	r3, r1, #10
 8002cb6:	4621      	mov	r1, r4
 8002cb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cbc:	4621      	mov	r1, r4
 8002cbe:	028a      	lsls	r2, r1, #10
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	61bb      	str	r3, [r7, #24]
 8002cca:	61fa      	str	r2, [r7, #28]
 8002ccc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cd0:	f7fd fab6 	bl	8000240 <__aeabi_uldivmod>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4613      	mov	r3, r2
 8002cda:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	0c1b      	lsrs	r3, r3, #16
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002cec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cf6:	e002      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cfa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3750      	adds	r7, #80	; 0x50
 8002d04:	46bd      	mov	sp, r7
 8002d06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	00f42400 	.word	0x00f42400
 8002d14:	007a1200 	.word	0x007a1200

08002d18 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d1c:	4b03      	ldr	r3, [pc, #12]	; (8002d2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	20000008 	.word	0x20000008

08002d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d34:	f7ff fff0 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	0a9b      	lsrs	r3, r3, #10
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	4903      	ldr	r1, [pc, #12]	; (8002d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d46:	5ccb      	ldrb	r3, [r1, r3]
 8002d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40023800 	.word	0x40023800
 8002d54:	08007940 	.word	0x08007940

08002d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d5c:	f7ff ffdc 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 8002d60:	4602      	mov	r2, r0
 8002d62:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	0b5b      	lsrs	r3, r3, #13
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	4903      	ldr	r1, [pc, #12]	; (8002d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d6e:	5ccb      	ldrb	r3, [r1, r3]
 8002d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	08007940 	.word	0x08007940

08002d80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	220f      	movs	r2, #15
 8002d8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d90:	4b12      	ldr	r3, [pc, #72]	; (8002ddc <HAL_RCC_GetClockConfig+0x5c>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 0203 	and.w	r2, r3, #3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d9c:	4b0f      	ldr	r3, [pc, #60]	; (8002ddc <HAL_RCC_GetClockConfig+0x5c>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002da8:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <HAL_RCC_GetClockConfig+0x5c>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002db4:	4b09      	ldr	r3, [pc, #36]	; (8002ddc <HAL_RCC_GetClockConfig+0x5c>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	08db      	lsrs	r3, r3, #3
 8002dba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002dc2:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <HAL_RCC_GetClockConfig+0x60>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 020f 	and.w	r2, r3, #15
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	601a      	str	r2, [r3, #0]
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40023c00 	.word	0x40023c00

08002de4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002df0:	2300      	movs	r3, #0
 8002df2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d012      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e0c:	4b69      	ldr	r3, [pc, #420]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	4a68      	ldr	r2, [pc, #416]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e12:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e16:	6093      	str	r3, [r2, #8]
 8002e18:	4b66      	ldr	r3, [pc, #408]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e20:	4964      	ldr	r1, [pc, #400]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d017      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e3e:	4b5d      	ldr	r3, [pc, #372]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4c:	4959      	ldr	r1, [pc, #356]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d017      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e7a:	4b4e      	ldr	r3, [pc, #312]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	494a      	ldr	r1, [pc, #296]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e98:	d101      	bne.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0320 	and.w	r3, r3, #32
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 808b 	beq.w	8002fde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ec8:	4b3a      	ldr	r3, [pc, #232]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	4a39      	ldr	r2, [pc, #228]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ed4:	4b37      	ldr	r3, [pc, #220]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ee0:	4b35      	ldr	r3, [pc, #212]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a34      	ldr	r2, [pc, #208]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eec:	f7fe f8a4 	bl	8001038 <HAL_GetTick>
 8002ef0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef4:	f7fe f8a0 	bl	8001038 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b64      	cmp	r3, #100	; 0x64
 8002f00:	d901      	bls.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e38f      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f06:	4b2c      	ldr	r3, [pc, #176]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f12:	4b28      	ldr	r3, [pc, #160]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f1a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d035      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d02e      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f30:	4b20      	ldr	r3, [pc, #128]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f38:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f3a:	4b1e      	ldr	r3, [pc, #120]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3e:	4a1d      	ldr	r2, [pc, #116]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f44:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f46:	4b1b      	ldr	r3, [pc, #108]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4a:	4a1a      	ldr	r2, [pc, #104]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f50:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f52:	4a18      	ldr	r2, [pc, #96]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f58:	4b16      	ldr	r3, [pc, #88]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d114      	bne.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f64:	f7fe f868 	bl	8001038 <HAL_GetTick>
 8002f68:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f6a:	e00a      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f6c:	f7fe f864 	bl	8001038 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e351      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f82:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0ee      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f9a:	d111      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002f9c:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fa8:	4b04      	ldr	r3, [pc, #16]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002faa:	400b      	ands	r3, r1
 8002fac:	4901      	ldr	r1, [pc, #4]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	608b      	str	r3, [r1, #8]
 8002fb2:	e00b      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	40007000 	.word	0x40007000
 8002fbc:	0ffffcff 	.word	0x0ffffcff
 8002fc0:	4bac      	ldr	r3, [pc, #688]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	4aab      	ldr	r2, [pc, #684]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fc6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002fca:	6093      	str	r3, [r2, #8]
 8002fcc:	4ba9      	ldr	r3, [pc, #676]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd8:	49a6      	ldr	r1, [pc, #664]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0310 	and.w	r3, r3, #16
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d010      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002fea:	4ba2      	ldr	r3, [pc, #648]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ff0:	4aa0      	ldr	r2, [pc, #640]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ff2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ff6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ffa:	4b9e      	ldr	r3, [pc, #632]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ffc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003004:	499b      	ldr	r1, [pc, #620]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00a      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003018:	4b96      	ldr	r3, [pc, #600]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800301a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003026:	4993      	ldr	r1, [pc, #588]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00a      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800303a:	4b8e      	ldr	r3, [pc, #568]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800303c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003040:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003048:	498a      	ldr	r1, [pc, #552]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00a      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800305c:	4b85      	ldr	r3, [pc, #532]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800305e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003062:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800306a:	4982      	ldr	r1, [pc, #520]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00a      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800307e:	4b7d      	ldr	r3, [pc, #500]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003084:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308c:	4979      	ldr	r1, [pc, #484]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800308e:	4313      	orrs	r3, r2
 8003090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00a      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030a0:	4b74      	ldr	r3, [pc, #464]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a6:	f023 0203 	bic.w	r2, r3, #3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	4971      	ldr	r1, [pc, #452]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00a      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030c2:	4b6c      	ldr	r3, [pc, #432]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c8:	f023 020c 	bic.w	r2, r3, #12
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d0:	4968      	ldr	r1, [pc, #416]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00a      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030e4:	4b63      	ldr	r3, [pc, #396]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f2:	4960      	ldr	r1, [pc, #384]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003106:	4b5b      	ldr	r3, [pc, #364]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003114:	4957      	ldr	r1, [pc, #348]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003116:	4313      	orrs	r3, r2
 8003118:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00a      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003128:	4b52      	ldr	r3, [pc, #328]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800312a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003136:	494f      	ldr	r1, [pc, #316]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003138:	4313      	orrs	r3, r2
 800313a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800314a:	4b4a      	ldr	r3, [pc, #296]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800314c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003150:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003158:	4946      	ldr	r1, [pc, #280]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800315a:	4313      	orrs	r3, r2
 800315c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800316c:	4b41      	ldr	r3, [pc, #260]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800316e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003172:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317a:	493e      	ldr	r1, [pc, #248]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00a      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800318e:	4b39      	ldr	r3, [pc, #228]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003194:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800319c:	4935      	ldr	r1, [pc, #212]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00a      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031b0:	4b30      	ldr	r3, [pc, #192]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031be:	492d      	ldr	r1, [pc, #180]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d011      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80031d2:	4b28      	ldr	r3, [pc, #160]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031e0:	4924      	ldr	r1, [pc, #144]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031f0:	d101      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80031f2:	2301      	movs	r3, #1
 80031f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003202:	2301      	movs	r3, #1
 8003204:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00a      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003212:	4b18      	ldr	r3, [pc, #96]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003218:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003220:	4914      	ldr	r1, [pc, #80]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003222:	4313      	orrs	r3, r2
 8003224:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00b      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003234:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003244:	490b      	ldr	r1, [pc, #44]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00f      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003258:	4b06      	ldr	r3, [pc, #24]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800325a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003268:	4902      	ldr	r1, [pc, #8]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800326a:	4313      	orrs	r3, r2
 800326c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003270:	e002      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003272:	bf00      	nop
 8003274:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00b      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003284:	4b8a      	ldr	r3, [pc, #552]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003286:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800328a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003294:	4986      	ldr	r1, [pc, #536]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00b      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80032a8:	4b81      	ldr	r3, [pc, #516]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032b8:	497d      	ldr	r1, [pc, #500]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d006      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 80d6 	beq.w	8003480 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80032d4:	4b76      	ldr	r3, [pc, #472]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a75      	ldr	r2, [pc, #468]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032e0:	f7fd feaa 	bl	8001038 <HAL_GetTick>
 80032e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032e8:	f7fd fea6 	bl	8001038 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b64      	cmp	r3, #100	; 0x64
 80032f4:	d901      	bls.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e195      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032fa:	4b6d      	ldr	r3, [pc, #436]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d021      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003316:	2b00      	cmp	r3, #0
 8003318:	d11d      	bne.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800331a:	4b65      	ldr	r3, [pc, #404]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800331c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003320:	0c1b      	lsrs	r3, r3, #16
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003328:	4b61      	ldr	r3, [pc, #388]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800332a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800332e:	0e1b      	lsrs	r3, r3, #24
 8003330:	f003 030f 	and.w	r3, r3, #15
 8003334:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	019a      	lsls	r2, r3, #6
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	041b      	lsls	r3, r3, #16
 8003340:	431a      	orrs	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	061b      	lsls	r3, r3, #24
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	071b      	lsls	r3, r3, #28
 800334e:	4958      	ldr	r1, [pc, #352]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d004      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800336a:	d00a      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003374:	2b00      	cmp	r3, #0
 8003376:	d02e      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003380:	d129      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003382:	4b4b      	ldr	r3, [pc, #300]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003388:	0c1b      	lsrs	r3, r3, #16
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003390:	4b47      	ldr	r3, [pc, #284]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003396:	0f1b      	lsrs	r3, r3, #28
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	019a      	lsls	r2, r3, #6
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	041b      	lsls	r3, r3, #16
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	061b      	lsls	r3, r3, #24
 80033b0:	431a      	orrs	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	071b      	lsls	r3, r3, #28
 80033b6:	493e      	ldr	r1, [pc, #248]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80033be:	4b3c      	ldr	r3, [pc, #240]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033c4:	f023 021f 	bic.w	r2, r3, #31
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	3b01      	subs	r3, #1
 80033ce:	4938      	ldr	r1, [pc, #224]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d01d      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033e2:	4b33      	ldr	r3, [pc, #204]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033e8:	0e1b      	lsrs	r3, r3, #24
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033f0:	4b2f      	ldr	r3, [pc, #188]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033f6:	0f1b      	lsrs	r3, r3, #28
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	019a      	lsls	r2, r3, #6
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	041b      	lsls	r3, r3, #16
 800340a:	431a      	orrs	r2, r3
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	061b      	lsls	r3, r3, #24
 8003410:	431a      	orrs	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	071b      	lsls	r3, r3, #28
 8003416:	4926      	ldr	r1, [pc, #152]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d011      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	019a      	lsls	r2, r3, #6
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	041b      	lsls	r3, r3, #16
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	061b      	lsls	r3, r3, #24
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	071b      	lsls	r3, r3, #28
 8003446:	491a      	ldr	r1, [pc, #104]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800344e:	4b18      	ldr	r3, [pc, #96]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a17      	ldr	r2, [pc, #92]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003454:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003458:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800345a:	f7fd fded 	bl	8001038 <HAL_GetTick>
 800345e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003460:	e008      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003462:	f7fd fde9 	bl	8001038 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b64      	cmp	r3, #100	; 0x64
 800346e:	d901      	bls.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e0d8      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003474:	4b0e      	ldr	r3, [pc, #56]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	2b01      	cmp	r3, #1
 8003484:	f040 80ce 	bne.w	8003624 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003488:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a08      	ldr	r2, [pc, #32]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800348e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003492:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003494:	f7fd fdd0 	bl	8001038 <HAL_GetTick>
 8003498:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800349a:	e00b      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800349c:	f7fd fdcc 	bl	8001038 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b64      	cmp	r3, #100	; 0x64
 80034a8:	d904      	bls.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e0bb      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80034ae:	bf00      	nop
 80034b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034b4:	4b5e      	ldr	r3, [pc, #376]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034c0:	d0ec      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d009      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d02e      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d12a      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034ea:	4b51      	ldr	r3, [pc, #324]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f0:	0c1b      	lsrs	r3, r3, #16
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034f8:	4b4d      	ldr	r3, [pc, #308]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fe:	0f1b      	lsrs	r3, r3, #28
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	019a      	lsls	r2, r3, #6
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	041b      	lsls	r3, r3, #16
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	061b      	lsls	r3, r3, #24
 8003518:	431a      	orrs	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	071b      	lsls	r3, r3, #28
 800351e:	4944      	ldr	r1, [pc, #272]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003526:	4b42      	ldr	r3, [pc, #264]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800352c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003534:	3b01      	subs	r3, #1
 8003536:	021b      	lsls	r3, r3, #8
 8003538:	493d      	ldr	r1, [pc, #244]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d022      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003550:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003554:	d11d      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003556:	4b36      	ldr	r3, [pc, #216]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355c:	0e1b      	lsrs	r3, r3, #24
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003564:	4b32      	ldr	r3, [pc, #200]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356a:	0f1b      	lsrs	r3, r3, #28
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	019a      	lsls	r2, r3, #6
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	041b      	lsls	r3, r3, #16
 800357e:	431a      	orrs	r2, r3
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	061b      	lsls	r3, r3, #24
 8003584:	431a      	orrs	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	071b      	lsls	r3, r3, #28
 800358a:	4929      	ldr	r1, [pc, #164]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d028      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800359e:	4b24      	ldr	r3, [pc, #144]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a4:	0e1b      	lsrs	r3, r3, #24
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035ac:	4b20      	ldr	r3, [pc, #128]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b2:	0c1b      	lsrs	r3, r3, #16
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	019a      	lsls	r2, r3, #6
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	041b      	lsls	r3, r3, #16
 80035c4:	431a      	orrs	r2, r3
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	061b      	lsls	r3, r3, #24
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	071b      	lsls	r3, r3, #28
 80035d2:	4917      	ldr	r1, [pc, #92]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80035da:	4b15      	ldr	r3, [pc, #84]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	4911      	ldr	r1, [pc, #68]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80035f0:	4b0f      	ldr	r3, [pc, #60]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a0e      	ldr	r2, [pc, #56]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035fc:	f7fd fd1c 	bl	8001038 <HAL_GetTick>
 8003600:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003604:	f7fd fd18 	bl	8001038 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b64      	cmp	r3, #100	; 0x64
 8003610:	d901      	bls.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e007      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003616:	4b06      	ldr	r3, [pc, #24]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800361e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003622:	d1ef      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3720      	adds	r7, #32
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40023800 	.word	0x40023800

08003634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e049      	b.n	80036da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f841 	bl	80036e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3304      	adds	r3, #4
 8003670:	4619      	mov	r1, r3
 8003672:	4610      	mov	r0, r2
 8003674:	f000 fa00 	bl	8003a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
	...

080036f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b01      	cmp	r3, #1
 800370a:	d001      	beq.n	8003710 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e054      	b.n	80037ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a26      	ldr	r2, [pc, #152]	; (80037c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d022      	beq.n	8003778 <HAL_TIM_Base_Start_IT+0x80>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800373a:	d01d      	beq.n	8003778 <HAL_TIM_Base_Start_IT+0x80>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a22      	ldr	r2, [pc, #136]	; (80037cc <HAL_TIM_Base_Start_IT+0xd4>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d018      	beq.n	8003778 <HAL_TIM_Base_Start_IT+0x80>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a21      	ldr	r2, [pc, #132]	; (80037d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d013      	beq.n	8003778 <HAL_TIM_Base_Start_IT+0x80>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a1f      	ldr	r2, [pc, #124]	; (80037d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d00e      	beq.n	8003778 <HAL_TIM_Base_Start_IT+0x80>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a1e      	ldr	r2, [pc, #120]	; (80037d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d009      	beq.n	8003778 <HAL_TIM_Base_Start_IT+0x80>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a1c      	ldr	r2, [pc, #112]	; (80037dc <HAL_TIM_Base_Start_IT+0xe4>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d004      	beq.n	8003778 <HAL_TIM_Base_Start_IT+0x80>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a1b      	ldr	r2, [pc, #108]	; (80037e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d115      	bne.n	80037a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	4b19      	ldr	r3, [pc, #100]	; (80037e4 <HAL_TIM_Base_Start_IT+0xec>)
 8003780:	4013      	ands	r3, r2
 8003782:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2b06      	cmp	r3, #6
 8003788:	d015      	beq.n	80037b6 <HAL_TIM_Base_Start_IT+0xbe>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003790:	d011      	beq.n	80037b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 0201 	orr.w	r2, r2, #1
 80037a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a2:	e008      	b.n	80037b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	e000      	b.n	80037b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40010000 	.word	0x40010000
 80037cc:	40000400 	.word	0x40000400
 80037d0:	40000800 	.word	0x40000800
 80037d4:	40000c00 	.word	0x40000c00
 80037d8:	40010400 	.word	0x40010400
 80037dc:	40014000 	.word	0x40014000
 80037e0:	40001800 	.word	0x40001800
 80037e4:	00010007 	.word	0x00010007

080037e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d122      	bne.n	8003844 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b02      	cmp	r3, #2
 800380a:	d11b      	bne.n	8003844 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f06f 0202 	mvn.w	r2, #2
 8003814:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f905 	bl	8003a3a <HAL_TIM_IC_CaptureCallback>
 8003830:	e005      	b.n	800383e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f8f7 	bl	8003a26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f908 	bl	8003a4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	2b04      	cmp	r3, #4
 8003850:	d122      	bne.n	8003898 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b04      	cmp	r3, #4
 800385e:	d11b      	bne.n	8003898 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f06f 0204 	mvn.w	r2, #4
 8003868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2202      	movs	r2, #2
 800386e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f8db 	bl	8003a3a <HAL_TIM_IC_CaptureCallback>
 8003884:	e005      	b.n	8003892 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f8cd 	bl	8003a26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 f8de 	bl	8003a4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d122      	bne.n	80038ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f003 0308 	and.w	r3, r3, #8
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	d11b      	bne.n	80038ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f06f 0208 	mvn.w	r2, #8
 80038bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2204      	movs	r2, #4
 80038c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	f003 0303 	and.w	r3, r3, #3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f8b1 	bl	8003a3a <HAL_TIM_IC_CaptureCallback>
 80038d8:	e005      	b.n	80038e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f8a3 	bl	8003a26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f8b4 	bl	8003a4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f003 0310 	and.w	r3, r3, #16
 80038f6:	2b10      	cmp	r3, #16
 80038f8:	d122      	bne.n	8003940 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0310 	and.w	r3, r3, #16
 8003904:	2b10      	cmp	r3, #16
 8003906:	d11b      	bne.n	8003940 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0210 	mvn.w	r2, #16
 8003910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2208      	movs	r2, #8
 8003916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f887 	bl	8003a3a <HAL_TIM_IC_CaptureCallback>
 800392c:	e005      	b.n	800393a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f879 	bl	8003a26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 f88a 	bl	8003a4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b01      	cmp	r3, #1
 800394c:	d10e      	bne.n	800396c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b01      	cmp	r3, #1
 800395a:	d107      	bne.n	800396c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f06f 0201 	mvn.w	r2, #1
 8003964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7fd f85a 	bl	8000a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003976:	2b80      	cmp	r3, #128	; 0x80
 8003978:	d10e      	bne.n	8003998 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003984:	2b80      	cmp	r3, #128	; 0x80
 8003986:	d107      	bne.n	8003998 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f91a 	bl	8003bcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039a6:	d10e      	bne.n	80039c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b2:	2b80      	cmp	r3, #128	; 0x80
 80039b4:	d107      	bne.n	80039c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80039be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f90d 	bl	8003be0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d0:	2b40      	cmp	r3, #64	; 0x40
 80039d2:	d10e      	bne.n	80039f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039de:	2b40      	cmp	r3, #64	; 0x40
 80039e0:	d107      	bne.n	80039f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f838 	bl	8003a62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	f003 0320 	and.w	r3, r3, #32
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	d10e      	bne.n	8003a1e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	f003 0320 	and.w	r3, r3, #32
 8003a0a:	2b20      	cmp	r3, #32
 8003a0c:	d107      	bne.n	8003a1e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f06f 0220 	mvn.w	r2, #32
 8003a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f8cd 	bl	8003bb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a1e:	bf00      	nop
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
	...

08003a78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a40      	ldr	r2, [pc, #256]	; (8003b8c <TIM_Base_SetConfig+0x114>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d013      	beq.n	8003ab8 <TIM_Base_SetConfig+0x40>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a96:	d00f      	beq.n	8003ab8 <TIM_Base_SetConfig+0x40>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a3d      	ldr	r2, [pc, #244]	; (8003b90 <TIM_Base_SetConfig+0x118>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d00b      	beq.n	8003ab8 <TIM_Base_SetConfig+0x40>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a3c      	ldr	r2, [pc, #240]	; (8003b94 <TIM_Base_SetConfig+0x11c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d007      	beq.n	8003ab8 <TIM_Base_SetConfig+0x40>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a3b      	ldr	r2, [pc, #236]	; (8003b98 <TIM_Base_SetConfig+0x120>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d003      	beq.n	8003ab8 <TIM_Base_SetConfig+0x40>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a3a      	ldr	r2, [pc, #232]	; (8003b9c <TIM_Base_SetConfig+0x124>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d108      	bne.n	8003aca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003abe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a2f      	ldr	r2, [pc, #188]	; (8003b8c <TIM_Base_SetConfig+0x114>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d02b      	beq.n	8003b2a <TIM_Base_SetConfig+0xb2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad8:	d027      	beq.n	8003b2a <TIM_Base_SetConfig+0xb2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a2c      	ldr	r2, [pc, #176]	; (8003b90 <TIM_Base_SetConfig+0x118>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d023      	beq.n	8003b2a <TIM_Base_SetConfig+0xb2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a2b      	ldr	r2, [pc, #172]	; (8003b94 <TIM_Base_SetConfig+0x11c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d01f      	beq.n	8003b2a <TIM_Base_SetConfig+0xb2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a2a      	ldr	r2, [pc, #168]	; (8003b98 <TIM_Base_SetConfig+0x120>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d01b      	beq.n	8003b2a <TIM_Base_SetConfig+0xb2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a29      	ldr	r2, [pc, #164]	; (8003b9c <TIM_Base_SetConfig+0x124>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d017      	beq.n	8003b2a <TIM_Base_SetConfig+0xb2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a28      	ldr	r2, [pc, #160]	; (8003ba0 <TIM_Base_SetConfig+0x128>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d013      	beq.n	8003b2a <TIM_Base_SetConfig+0xb2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a27      	ldr	r2, [pc, #156]	; (8003ba4 <TIM_Base_SetConfig+0x12c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d00f      	beq.n	8003b2a <TIM_Base_SetConfig+0xb2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a26      	ldr	r2, [pc, #152]	; (8003ba8 <TIM_Base_SetConfig+0x130>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00b      	beq.n	8003b2a <TIM_Base_SetConfig+0xb2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a25      	ldr	r2, [pc, #148]	; (8003bac <TIM_Base_SetConfig+0x134>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d007      	beq.n	8003b2a <TIM_Base_SetConfig+0xb2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a24      	ldr	r2, [pc, #144]	; (8003bb0 <TIM_Base_SetConfig+0x138>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d003      	beq.n	8003b2a <TIM_Base_SetConfig+0xb2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a23      	ldr	r2, [pc, #140]	; (8003bb4 <TIM_Base_SetConfig+0x13c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d108      	bne.n	8003b3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a0a      	ldr	r2, [pc, #40]	; (8003b8c <TIM_Base_SetConfig+0x114>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d003      	beq.n	8003b70 <TIM_Base_SetConfig+0xf8>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a0c      	ldr	r2, [pc, #48]	; (8003b9c <TIM_Base_SetConfig+0x124>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d103      	bne.n	8003b78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	615a      	str	r2, [r3, #20]
}
 8003b7e:	bf00      	nop
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	40010000 	.word	0x40010000
 8003b90:	40000400 	.word	0x40000400
 8003b94:	40000800 	.word	0x40000800
 8003b98:	40000c00 	.word	0x40000c00
 8003b9c:	40010400 	.word	0x40010400
 8003ba0:	40014000 	.word	0x40014000
 8003ba4:	40014400 	.word	0x40014400
 8003ba8:	40014800 	.word	0x40014800
 8003bac:	40001800 	.word	0x40001800
 8003bb0:	40001c00 	.word	0x40001c00
 8003bb4:	40002000 	.word	0x40002000

08003bb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e040      	b.n	8003c88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7fd f83e 	bl	8000c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2224      	movs	r2, #36	; 0x24
 8003c20:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0201 	bic.w	r2, r2, #1
 8003c30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f82c 	bl	8003c90 <UART_SetConfig>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d101      	bne.n	8003c42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e022      	b.n	8003c88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 fa84 	bl	8004158 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0201 	orr.w	r2, r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 fb0b 	bl	800429c <UART_CheckIdleState>
 8003c86:	4603      	mov	r3, r0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b088      	sub	sp, #32
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	4ba6      	ldr	r3, [pc, #664]	; (8003f54 <UART_SetConfig+0x2c4>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6812      	ldr	r2, [r2, #0]
 8003cc2:	6979      	ldr	r1, [r7, #20]
 8003cc4:	430b      	orrs	r3, r1
 8003cc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a94      	ldr	r2, [pc, #592]	; (8003f58 <UART_SetConfig+0x2c8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d120      	bne.n	8003d4e <UART_SetConfig+0xbe>
 8003d0c:	4b93      	ldr	r3, [pc, #588]	; (8003f5c <UART_SetConfig+0x2cc>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d816      	bhi.n	8003d48 <UART_SetConfig+0xb8>
 8003d1a:	a201      	add	r2, pc, #4	; (adr r2, 8003d20 <UART_SetConfig+0x90>)
 8003d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d20:	08003d31 	.word	0x08003d31
 8003d24:	08003d3d 	.word	0x08003d3d
 8003d28:	08003d37 	.word	0x08003d37
 8003d2c:	08003d43 	.word	0x08003d43
 8003d30:	2301      	movs	r3, #1
 8003d32:	77fb      	strb	r3, [r7, #31]
 8003d34:	e150      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003d36:	2302      	movs	r3, #2
 8003d38:	77fb      	strb	r3, [r7, #31]
 8003d3a:	e14d      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003d3c:	2304      	movs	r3, #4
 8003d3e:	77fb      	strb	r3, [r7, #31]
 8003d40:	e14a      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003d42:	2308      	movs	r3, #8
 8003d44:	77fb      	strb	r3, [r7, #31]
 8003d46:	e147      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003d48:	2310      	movs	r3, #16
 8003d4a:	77fb      	strb	r3, [r7, #31]
 8003d4c:	e144      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a83      	ldr	r2, [pc, #524]	; (8003f60 <UART_SetConfig+0x2d0>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d132      	bne.n	8003dbe <UART_SetConfig+0x12e>
 8003d58:	4b80      	ldr	r3, [pc, #512]	; (8003f5c <UART_SetConfig+0x2cc>)
 8003d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5e:	f003 030c 	and.w	r3, r3, #12
 8003d62:	2b0c      	cmp	r3, #12
 8003d64:	d828      	bhi.n	8003db8 <UART_SetConfig+0x128>
 8003d66:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <UART_SetConfig+0xdc>)
 8003d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6c:	08003da1 	.word	0x08003da1
 8003d70:	08003db9 	.word	0x08003db9
 8003d74:	08003db9 	.word	0x08003db9
 8003d78:	08003db9 	.word	0x08003db9
 8003d7c:	08003dad 	.word	0x08003dad
 8003d80:	08003db9 	.word	0x08003db9
 8003d84:	08003db9 	.word	0x08003db9
 8003d88:	08003db9 	.word	0x08003db9
 8003d8c:	08003da7 	.word	0x08003da7
 8003d90:	08003db9 	.word	0x08003db9
 8003d94:	08003db9 	.word	0x08003db9
 8003d98:	08003db9 	.word	0x08003db9
 8003d9c:	08003db3 	.word	0x08003db3
 8003da0:	2300      	movs	r3, #0
 8003da2:	77fb      	strb	r3, [r7, #31]
 8003da4:	e118      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003da6:	2302      	movs	r3, #2
 8003da8:	77fb      	strb	r3, [r7, #31]
 8003daa:	e115      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003dac:	2304      	movs	r3, #4
 8003dae:	77fb      	strb	r3, [r7, #31]
 8003db0:	e112      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003db2:	2308      	movs	r3, #8
 8003db4:	77fb      	strb	r3, [r7, #31]
 8003db6:	e10f      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003db8:	2310      	movs	r3, #16
 8003dba:	77fb      	strb	r3, [r7, #31]
 8003dbc:	e10c      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a68      	ldr	r2, [pc, #416]	; (8003f64 <UART_SetConfig+0x2d4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d120      	bne.n	8003e0a <UART_SetConfig+0x17a>
 8003dc8:	4b64      	ldr	r3, [pc, #400]	; (8003f5c <UART_SetConfig+0x2cc>)
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003dd2:	2b30      	cmp	r3, #48	; 0x30
 8003dd4:	d013      	beq.n	8003dfe <UART_SetConfig+0x16e>
 8003dd6:	2b30      	cmp	r3, #48	; 0x30
 8003dd8:	d814      	bhi.n	8003e04 <UART_SetConfig+0x174>
 8003dda:	2b20      	cmp	r3, #32
 8003ddc:	d009      	beq.n	8003df2 <UART_SetConfig+0x162>
 8003dde:	2b20      	cmp	r3, #32
 8003de0:	d810      	bhi.n	8003e04 <UART_SetConfig+0x174>
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <UART_SetConfig+0x15c>
 8003de6:	2b10      	cmp	r3, #16
 8003de8:	d006      	beq.n	8003df8 <UART_SetConfig+0x168>
 8003dea:	e00b      	b.n	8003e04 <UART_SetConfig+0x174>
 8003dec:	2300      	movs	r3, #0
 8003dee:	77fb      	strb	r3, [r7, #31]
 8003df0:	e0f2      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003df2:	2302      	movs	r3, #2
 8003df4:	77fb      	strb	r3, [r7, #31]
 8003df6:	e0ef      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003df8:	2304      	movs	r3, #4
 8003dfa:	77fb      	strb	r3, [r7, #31]
 8003dfc:	e0ec      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003dfe:	2308      	movs	r3, #8
 8003e00:	77fb      	strb	r3, [r7, #31]
 8003e02:	e0e9      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003e04:	2310      	movs	r3, #16
 8003e06:	77fb      	strb	r3, [r7, #31]
 8003e08:	e0e6      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a56      	ldr	r2, [pc, #344]	; (8003f68 <UART_SetConfig+0x2d8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d120      	bne.n	8003e56 <UART_SetConfig+0x1c6>
 8003e14:	4b51      	ldr	r3, [pc, #324]	; (8003f5c <UART_SetConfig+0x2cc>)
 8003e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e1e:	2bc0      	cmp	r3, #192	; 0xc0
 8003e20:	d013      	beq.n	8003e4a <UART_SetConfig+0x1ba>
 8003e22:	2bc0      	cmp	r3, #192	; 0xc0
 8003e24:	d814      	bhi.n	8003e50 <UART_SetConfig+0x1c0>
 8003e26:	2b80      	cmp	r3, #128	; 0x80
 8003e28:	d009      	beq.n	8003e3e <UART_SetConfig+0x1ae>
 8003e2a:	2b80      	cmp	r3, #128	; 0x80
 8003e2c:	d810      	bhi.n	8003e50 <UART_SetConfig+0x1c0>
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d002      	beq.n	8003e38 <UART_SetConfig+0x1a8>
 8003e32:	2b40      	cmp	r3, #64	; 0x40
 8003e34:	d006      	beq.n	8003e44 <UART_SetConfig+0x1b4>
 8003e36:	e00b      	b.n	8003e50 <UART_SetConfig+0x1c0>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	77fb      	strb	r3, [r7, #31]
 8003e3c:	e0cc      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	77fb      	strb	r3, [r7, #31]
 8003e42:	e0c9      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003e44:	2304      	movs	r3, #4
 8003e46:	77fb      	strb	r3, [r7, #31]
 8003e48:	e0c6      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003e4a:	2308      	movs	r3, #8
 8003e4c:	77fb      	strb	r3, [r7, #31]
 8003e4e:	e0c3      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003e50:	2310      	movs	r3, #16
 8003e52:	77fb      	strb	r3, [r7, #31]
 8003e54:	e0c0      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a44      	ldr	r2, [pc, #272]	; (8003f6c <UART_SetConfig+0x2dc>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d125      	bne.n	8003eac <UART_SetConfig+0x21c>
 8003e60:	4b3e      	ldr	r3, [pc, #248]	; (8003f5c <UART_SetConfig+0x2cc>)
 8003e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e6e:	d017      	beq.n	8003ea0 <UART_SetConfig+0x210>
 8003e70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e74:	d817      	bhi.n	8003ea6 <UART_SetConfig+0x216>
 8003e76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e7a:	d00b      	beq.n	8003e94 <UART_SetConfig+0x204>
 8003e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e80:	d811      	bhi.n	8003ea6 <UART_SetConfig+0x216>
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <UART_SetConfig+0x1fe>
 8003e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e8a:	d006      	beq.n	8003e9a <UART_SetConfig+0x20a>
 8003e8c:	e00b      	b.n	8003ea6 <UART_SetConfig+0x216>
 8003e8e:	2300      	movs	r3, #0
 8003e90:	77fb      	strb	r3, [r7, #31]
 8003e92:	e0a1      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003e94:	2302      	movs	r3, #2
 8003e96:	77fb      	strb	r3, [r7, #31]
 8003e98:	e09e      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003e9a:	2304      	movs	r3, #4
 8003e9c:	77fb      	strb	r3, [r7, #31]
 8003e9e:	e09b      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003ea0:	2308      	movs	r3, #8
 8003ea2:	77fb      	strb	r3, [r7, #31]
 8003ea4:	e098      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003ea6:	2310      	movs	r3, #16
 8003ea8:	77fb      	strb	r3, [r7, #31]
 8003eaa:	e095      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a2f      	ldr	r2, [pc, #188]	; (8003f70 <UART_SetConfig+0x2e0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d125      	bne.n	8003f02 <UART_SetConfig+0x272>
 8003eb6:	4b29      	ldr	r3, [pc, #164]	; (8003f5c <UART_SetConfig+0x2cc>)
 8003eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ebc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ec0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ec4:	d017      	beq.n	8003ef6 <UART_SetConfig+0x266>
 8003ec6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003eca:	d817      	bhi.n	8003efc <UART_SetConfig+0x26c>
 8003ecc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ed0:	d00b      	beq.n	8003eea <UART_SetConfig+0x25a>
 8003ed2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ed6:	d811      	bhi.n	8003efc <UART_SetConfig+0x26c>
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <UART_SetConfig+0x254>
 8003edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee0:	d006      	beq.n	8003ef0 <UART_SetConfig+0x260>
 8003ee2:	e00b      	b.n	8003efc <UART_SetConfig+0x26c>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	77fb      	strb	r3, [r7, #31]
 8003ee8:	e076      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003eea:	2302      	movs	r3, #2
 8003eec:	77fb      	strb	r3, [r7, #31]
 8003eee:	e073      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003ef0:	2304      	movs	r3, #4
 8003ef2:	77fb      	strb	r3, [r7, #31]
 8003ef4:	e070      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003ef6:	2308      	movs	r3, #8
 8003ef8:	77fb      	strb	r3, [r7, #31]
 8003efa:	e06d      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003efc:	2310      	movs	r3, #16
 8003efe:	77fb      	strb	r3, [r7, #31]
 8003f00:	e06a      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a1b      	ldr	r2, [pc, #108]	; (8003f74 <UART_SetConfig+0x2e4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d138      	bne.n	8003f7e <UART_SetConfig+0x2ee>
 8003f0c:	4b13      	ldr	r3, [pc, #76]	; (8003f5c <UART_SetConfig+0x2cc>)
 8003f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f12:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003f16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f1a:	d017      	beq.n	8003f4c <UART_SetConfig+0x2bc>
 8003f1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f20:	d82a      	bhi.n	8003f78 <UART_SetConfig+0x2e8>
 8003f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f26:	d00b      	beq.n	8003f40 <UART_SetConfig+0x2b0>
 8003f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f2c:	d824      	bhi.n	8003f78 <UART_SetConfig+0x2e8>
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <UART_SetConfig+0x2aa>
 8003f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f36:	d006      	beq.n	8003f46 <UART_SetConfig+0x2b6>
 8003f38:	e01e      	b.n	8003f78 <UART_SetConfig+0x2e8>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	77fb      	strb	r3, [r7, #31]
 8003f3e:	e04b      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003f40:	2302      	movs	r3, #2
 8003f42:	77fb      	strb	r3, [r7, #31]
 8003f44:	e048      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003f46:	2304      	movs	r3, #4
 8003f48:	77fb      	strb	r3, [r7, #31]
 8003f4a:	e045      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003f4c:	2308      	movs	r3, #8
 8003f4e:	77fb      	strb	r3, [r7, #31]
 8003f50:	e042      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003f52:	bf00      	nop
 8003f54:	efff69f3 	.word	0xefff69f3
 8003f58:	40011000 	.word	0x40011000
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	40004400 	.word	0x40004400
 8003f64:	40004800 	.word	0x40004800
 8003f68:	40004c00 	.word	0x40004c00
 8003f6c:	40005000 	.word	0x40005000
 8003f70:	40011400 	.word	0x40011400
 8003f74:	40007800 	.word	0x40007800
 8003f78:	2310      	movs	r3, #16
 8003f7a:	77fb      	strb	r3, [r7, #31]
 8003f7c:	e02c      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a72      	ldr	r2, [pc, #456]	; (800414c <UART_SetConfig+0x4bc>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d125      	bne.n	8003fd4 <UART_SetConfig+0x344>
 8003f88:	4b71      	ldr	r3, [pc, #452]	; (8004150 <UART_SetConfig+0x4c0>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f92:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f96:	d017      	beq.n	8003fc8 <UART_SetConfig+0x338>
 8003f98:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f9c:	d817      	bhi.n	8003fce <UART_SetConfig+0x33e>
 8003f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fa2:	d00b      	beq.n	8003fbc <UART_SetConfig+0x32c>
 8003fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fa8:	d811      	bhi.n	8003fce <UART_SetConfig+0x33e>
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <UART_SetConfig+0x326>
 8003fae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fb2:	d006      	beq.n	8003fc2 <UART_SetConfig+0x332>
 8003fb4:	e00b      	b.n	8003fce <UART_SetConfig+0x33e>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	77fb      	strb	r3, [r7, #31]
 8003fba:	e00d      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	77fb      	strb	r3, [r7, #31]
 8003fc0:	e00a      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003fc2:	2304      	movs	r3, #4
 8003fc4:	77fb      	strb	r3, [r7, #31]
 8003fc6:	e007      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003fc8:	2308      	movs	r3, #8
 8003fca:	77fb      	strb	r3, [r7, #31]
 8003fcc:	e004      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003fce:	2310      	movs	r3, #16
 8003fd0:	77fb      	strb	r3, [r7, #31]
 8003fd2:	e001      	b.n	8003fd8 <UART_SetConfig+0x348>
 8003fd4:	2310      	movs	r3, #16
 8003fd6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	69db      	ldr	r3, [r3, #28]
 8003fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fe0:	d15b      	bne.n	800409a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003fe2:	7ffb      	ldrb	r3, [r7, #31]
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d828      	bhi.n	800403a <UART_SetConfig+0x3aa>
 8003fe8:	a201      	add	r2, pc, #4	; (adr r2, 8003ff0 <UART_SetConfig+0x360>)
 8003fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fee:	bf00      	nop
 8003ff0:	08004015 	.word	0x08004015
 8003ff4:	0800401d 	.word	0x0800401d
 8003ff8:	08004025 	.word	0x08004025
 8003ffc:	0800403b 	.word	0x0800403b
 8004000:	0800402b 	.word	0x0800402b
 8004004:	0800403b 	.word	0x0800403b
 8004008:	0800403b 	.word	0x0800403b
 800400c:	0800403b 	.word	0x0800403b
 8004010:	08004033 	.word	0x08004033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004014:	f7fe fe8c 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 8004018:	61b8      	str	r0, [r7, #24]
        break;
 800401a:	e013      	b.n	8004044 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800401c:	f7fe fe9c 	bl	8002d58 <HAL_RCC_GetPCLK2Freq>
 8004020:	61b8      	str	r0, [r7, #24]
        break;
 8004022:	e00f      	b.n	8004044 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004024:	4b4b      	ldr	r3, [pc, #300]	; (8004154 <UART_SetConfig+0x4c4>)
 8004026:	61bb      	str	r3, [r7, #24]
        break;
 8004028:	e00c      	b.n	8004044 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800402a:	f7fe fd6f 	bl	8002b0c <HAL_RCC_GetSysClockFreq>
 800402e:	61b8      	str	r0, [r7, #24]
        break;
 8004030:	e008      	b.n	8004044 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004036:	61bb      	str	r3, [r7, #24]
        break;
 8004038:	e004      	b.n	8004044 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800403a:	2300      	movs	r3, #0
 800403c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	77bb      	strb	r3, [r7, #30]
        break;
 8004042:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d074      	beq.n	8004134 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	005a      	lsls	r2, r3, #1
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	085b      	lsrs	r3, r3, #1
 8004054:	441a      	add	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	fbb2 f3f3 	udiv	r3, r2, r3
 800405e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	2b0f      	cmp	r3, #15
 8004064:	d916      	bls.n	8004094 <UART_SetConfig+0x404>
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800406c:	d212      	bcs.n	8004094 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	b29b      	uxth	r3, r3
 8004072:	f023 030f 	bic.w	r3, r3, #15
 8004076:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	085b      	lsrs	r3, r3, #1
 800407c:	b29b      	uxth	r3, r3
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	b29a      	uxth	r2, r3
 8004084:	89fb      	ldrh	r3, [r7, #14]
 8004086:	4313      	orrs	r3, r2
 8004088:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	89fa      	ldrh	r2, [r7, #14]
 8004090:	60da      	str	r2, [r3, #12]
 8004092:	e04f      	b.n	8004134 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	77bb      	strb	r3, [r7, #30]
 8004098:	e04c      	b.n	8004134 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800409a:	7ffb      	ldrb	r3, [r7, #31]
 800409c:	2b08      	cmp	r3, #8
 800409e:	d828      	bhi.n	80040f2 <UART_SetConfig+0x462>
 80040a0:	a201      	add	r2, pc, #4	; (adr r2, 80040a8 <UART_SetConfig+0x418>)
 80040a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a6:	bf00      	nop
 80040a8:	080040cd 	.word	0x080040cd
 80040ac:	080040d5 	.word	0x080040d5
 80040b0:	080040dd 	.word	0x080040dd
 80040b4:	080040f3 	.word	0x080040f3
 80040b8:	080040e3 	.word	0x080040e3
 80040bc:	080040f3 	.word	0x080040f3
 80040c0:	080040f3 	.word	0x080040f3
 80040c4:	080040f3 	.word	0x080040f3
 80040c8:	080040eb 	.word	0x080040eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040cc:	f7fe fe30 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 80040d0:	61b8      	str	r0, [r7, #24]
        break;
 80040d2:	e013      	b.n	80040fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040d4:	f7fe fe40 	bl	8002d58 <HAL_RCC_GetPCLK2Freq>
 80040d8:	61b8      	str	r0, [r7, #24]
        break;
 80040da:	e00f      	b.n	80040fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040dc:	4b1d      	ldr	r3, [pc, #116]	; (8004154 <UART_SetConfig+0x4c4>)
 80040de:	61bb      	str	r3, [r7, #24]
        break;
 80040e0:	e00c      	b.n	80040fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040e2:	f7fe fd13 	bl	8002b0c <HAL_RCC_GetSysClockFreq>
 80040e6:	61b8      	str	r0, [r7, #24]
        break;
 80040e8:	e008      	b.n	80040fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ee:	61bb      	str	r3, [r7, #24]
        break;
 80040f0:	e004      	b.n	80040fc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80040f2:	2300      	movs	r3, #0
 80040f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	77bb      	strb	r3, [r7, #30]
        break;
 80040fa:	bf00      	nop
    }

    if (pclk != 0U)
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d018      	beq.n	8004134 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	085a      	lsrs	r2, r3, #1
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	441a      	add	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	fbb2 f3f3 	udiv	r3, r2, r3
 8004114:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	2b0f      	cmp	r3, #15
 800411a:	d909      	bls.n	8004130 <UART_SetConfig+0x4a0>
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004122:	d205      	bcs.n	8004130 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	b29a      	uxth	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	60da      	str	r2, [r3, #12]
 800412e:	e001      	b.n	8004134 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004140:	7fbb      	ldrb	r3, [r7, #30]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3720      	adds	r7, #32
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	40007c00 	.word	0x40007c00
 8004150:	40023800 	.word	0x40023800
 8004154:	00f42400 	.word	0x00f42400

08004158 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	f003 0308 	and.w	r3, r3, #8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	f003 0320 	and.w	r3, r3, #32
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004234:	2b00      	cmp	r3, #0
 8004236:	d01a      	beq.n	800426e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004256:	d10a      	bne.n	800426e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	605a      	str	r2, [r3, #4]
  }
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af02      	add	r7, sp, #8
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042ac:	f7fc fec4 	bl	8001038 <HAL_GetTick>
 80042b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0308 	and.w	r3, r3, #8
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d10e      	bne.n	80042de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f831 	bl	8004336 <UART_WaitOnFlagUntilTimeout>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e027      	b.n	800432e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b04      	cmp	r3, #4
 80042ea:	d10e      	bne.n	800430a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f81b 	bl	8004336 <UART_WaitOnFlagUntilTimeout>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e011      	b.n	800432e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2220      	movs	r2, #32
 800430e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b09c      	sub	sp, #112	; 0x70
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	603b      	str	r3, [r7, #0]
 8004342:	4613      	mov	r3, r2
 8004344:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004346:	e0a7      	b.n	8004498 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004348:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800434a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800434e:	f000 80a3 	beq.w	8004498 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004352:	f7fc fe71 	bl	8001038 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800435e:	429a      	cmp	r2, r3
 8004360:	d302      	bcc.n	8004368 <UART_WaitOnFlagUntilTimeout+0x32>
 8004362:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004364:	2b00      	cmp	r3, #0
 8004366:	d13f      	bne.n	80043e8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004370:	e853 3f00 	ldrex	r3, [r3]
 8004374:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004378:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800437c:	667b      	str	r3, [r7, #100]	; 0x64
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004386:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004388:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800438c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800438e:	e841 2300 	strex	r3, r2, [r1]
 8004392:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1e6      	bne.n	8004368 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3308      	adds	r3, #8
 80043a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043a4:	e853 3f00 	ldrex	r3, [r3]
 80043a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ac:	f023 0301 	bic.w	r3, r3, #1
 80043b0:	663b      	str	r3, [r7, #96]	; 0x60
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	3308      	adds	r3, #8
 80043b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80043bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043c2:	e841 2300 	strex	r3, r2, [r1]
 80043c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80043c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1e5      	bne.n	800439a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2220      	movs	r2, #32
 80043d2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e068      	b.n	80044ba <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0304 	and.w	r3, r3, #4
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d050      	beq.n	8004498 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004400:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004404:	d148      	bne.n	8004498 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800440e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	e853 3f00 	ldrex	r3, [r3]
 800441c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004424:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	461a      	mov	r2, r3
 800442c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800442e:	637b      	str	r3, [r7, #52]	; 0x34
 8004430:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004432:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004434:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004436:	e841 2300 	strex	r3, r2, [r1]
 800443a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800443c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1e6      	bne.n	8004410 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3308      	adds	r3, #8
 8004448:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	e853 3f00 	ldrex	r3, [r3]
 8004450:	613b      	str	r3, [r7, #16]
   return(result);
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	f023 0301 	bic.w	r3, r3, #1
 8004458:	66bb      	str	r3, [r7, #104]	; 0x68
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3308      	adds	r3, #8
 8004460:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004462:	623a      	str	r2, [r7, #32]
 8004464:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004466:	69f9      	ldr	r1, [r7, #28]
 8004468:	6a3a      	ldr	r2, [r7, #32]
 800446a:	e841 2300 	strex	r3, r2, [r1]
 800446e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1e5      	bne.n	8004442 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2220      	movs	r2, #32
 800447a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2220      	movs	r2, #32
 8004480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2220      	movs	r2, #32
 8004488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e010      	b.n	80044ba <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	69da      	ldr	r2, [r3, #28]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	4013      	ands	r3, r2
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	bf0c      	ite	eq
 80044a8:	2301      	moveq	r3, #1
 80044aa:	2300      	movne	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	461a      	mov	r2, r3
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	f43f af48 	beq.w	8004348 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3770      	adds	r7, #112	; 0x70
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044c4:	b084      	sub	sp, #16
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	f107 001c 	add.w	r0, r7, #28
 80044d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d120      	bne.n	800451e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	4b20      	ldr	r3, [pc, #128]	; (8004570 <USB_CoreInit+0xac>)
 80044ee:	4013      	ands	r3, r2
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004502:	2b01      	cmp	r3, #1
 8004504:	d105      	bne.n	8004512 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fa96 	bl	8004a44 <USB_CoreReset>
 8004518:	4603      	mov	r3, r0
 800451a:	73fb      	strb	r3, [r7, #15]
 800451c:	e010      	b.n	8004540 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fa8a 	bl	8004a44 <USB_CoreReset>
 8004530:	4603      	mov	r3, r0
 8004532:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004538:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004542:	2b01      	cmp	r3, #1
 8004544:	d10b      	bne.n	800455e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f043 0206 	orr.w	r2, r3, #6
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f043 0220 	orr.w	r2, r3, #32
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800455e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800456a:	b004      	add	sp, #16
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	ffbdffbf 	.word	0xffbdffbf

08004574 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f023 0201 	bic.w	r2, r3, #1
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b084      	sub	sp, #16
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
 800459e:	460b      	mov	r3, r1
 80045a0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045a2:	2300      	movs	r3, #0
 80045a4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045b2:	78fb      	ldrb	r3, [r7, #3]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d115      	bne.n	80045e4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045c4:	2001      	movs	r0, #1
 80045c6:	f7fc fd43 	bl	8001050 <HAL_Delay>
      ms++;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	3301      	adds	r3, #1
 80045ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 fa29 	bl	8004a28 <USB_GetMode>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d01e      	beq.n	800461a <USB_SetCurrentMode+0x84>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b31      	cmp	r3, #49	; 0x31
 80045e0:	d9f0      	bls.n	80045c4 <USB_SetCurrentMode+0x2e>
 80045e2:	e01a      	b.n	800461a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d115      	bne.n	8004616 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045f6:	2001      	movs	r0, #1
 80045f8:	f7fc fd2a 	bl	8001050 <HAL_Delay>
      ms++;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	3301      	adds	r3, #1
 8004600:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fa10 	bl	8004a28 <USB_GetMode>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d005      	beq.n	800461a <USB_SetCurrentMode+0x84>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2b31      	cmp	r3, #49	; 0x31
 8004612:	d9f0      	bls.n	80045f6 <USB_SetCurrentMode+0x60>
 8004614:	e001      	b.n	800461a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e005      	b.n	8004626 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2b32      	cmp	r3, #50	; 0x32
 800461e:	d101      	bne.n	8004624 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e000      	b.n	8004626 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
	...

08004630 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004630:	b084      	sub	sp, #16
 8004632:	b580      	push	{r7, lr}
 8004634:	b086      	sub	sp, #24
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800463e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800464a:	2300      	movs	r3, #0
 800464c:	613b      	str	r3, [r7, #16]
 800464e:	e009      	b.n	8004664 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	3340      	adds	r3, #64	; 0x40
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	2200      	movs	r2, #0
 800465c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	3301      	adds	r3, #1
 8004662:	613b      	str	r3, [r7, #16]
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	2b0e      	cmp	r3, #14
 8004668:	d9f2      	bls.n	8004650 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800466a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800466c:	2b00      	cmp	r3, #0
 800466e:	d11c      	bne.n	80046aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800467e:	f043 0302 	orr.w	r3, r3, #2
 8004682:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004688:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	e005      	b.n	80046b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046bc:	461a      	mov	r2, r3
 80046be:	2300      	movs	r3, #0
 80046c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c8:	4619      	mov	r1, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d0:	461a      	mov	r2, r3
 80046d2:	680b      	ldr	r3, [r1, #0]
 80046d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d10c      	bne.n	80046f6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d104      	bne.n	80046ec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80046e2:	2100      	movs	r1, #0
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f965 	bl	80049b4 <USB_SetDevSpeed>
 80046ea:	e008      	b.n	80046fe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046ec:	2101      	movs	r1, #1
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f960 	bl	80049b4 <USB_SetDevSpeed>
 80046f4:	e003      	b.n	80046fe <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046f6:	2103      	movs	r1, #3
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f95b 	bl	80049b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046fe:	2110      	movs	r1, #16
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 f8f3 	bl	80048ec <USB_FlushTxFifo>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f91f 	bl	8004954 <USB_FlushRxFifo>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004726:	461a      	mov	r2, r3
 8004728:	2300      	movs	r3, #0
 800472a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004732:	461a      	mov	r2, r3
 8004734:	2300      	movs	r3, #0
 8004736:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800473e:	461a      	mov	r2, r3
 8004740:	2300      	movs	r3, #0
 8004742:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004744:	2300      	movs	r3, #0
 8004746:	613b      	str	r3, [r7, #16]
 8004748:	e043      	b.n	80047d2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4413      	add	r3, r2
 8004752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800475c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004760:	d118      	bne.n	8004794 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10a      	bne.n	800477e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004774:	461a      	mov	r2, r3
 8004776:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800477a:	6013      	str	r3, [r2, #0]
 800477c:	e013      	b.n	80047a6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478a:	461a      	mov	r2, r3
 800478c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	e008      	b.n	80047a6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a0:	461a      	mov	r2, r3
 80047a2:	2300      	movs	r3, #0
 80047a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b2:	461a      	mov	r2, r3
 80047b4:	2300      	movs	r3, #0
 80047b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c4:	461a      	mov	r2, r3
 80047c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	3301      	adds	r3, #1
 80047d0:	613b      	str	r3, [r7, #16]
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d3b7      	bcc.n	800474a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047da:	2300      	movs	r3, #0
 80047dc:	613b      	str	r3, [r7, #16]
 80047de:	e043      	b.n	8004868 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047f6:	d118      	bne.n	800482a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10a      	bne.n	8004814 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	015a      	lsls	r2, r3, #5
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4413      	add	r3, r2
 8004806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480a:	461a      	mov	r2, r3
 800480c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	e013      	b.n	800483c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4413      	add	r3, r2
 800481c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004820:	461a      	mov	r2, r3
 8004822:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004826:	6013      	str	r3, [r2, #0]
 8004828:	e008      	b.n	800483c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4413      	add	r3, r2
 8004832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004836:	461a      	mov	r2, r3
 8004838:	2300      	movs	r3, #0
 800483a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004848:	461a      	mov	r2, r3
 800484a:	2300      	movs	r3, #0
 800484c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4413      	add	r3, r2
 8004856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485a:	461a      	mov	r2, r3
 800485c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004860:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	3301      	adds	r3, #1
 8004866:	613b      	str	r3, [r7, #16]
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	429a      	cmp	r2, r3
 800486e:	d3b7      	bcc.n	80047e0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800487e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004882:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004890:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004894:	2b00      	cmp	r3, #0
 8004896:	d105      	bne.n	80048a4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	f043 0210 	orr.w	r2, r3, #16
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	699a      	ldr	r2, [r3, #24]
 80048a8:	4b0e      	ldr	r3, [pc, #56]	; (80048e4 <USB_DevInit+0x2b4>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d005      	beq.n	80048c2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	f043 0208 	orr.w	r2, r3, #8
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d105      	bne.n	80048d4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699a      	ldr	r2, [r3, #24]
 80048cc:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <USB_DevInit+0x2b8>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048e0:	b004      	add	sp, #16
 80048e2:	4770      	bx	lr
 80048e4:	803c3800 	.word	0x803c3800
 80048e8:	40000004 	.word	0x40000004

080048ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3301      	adds	r3, #1
 80048fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4a13      	ldr	r2, [pc, #76]	; (8004950 <USB_FlushTxFifo+0x64>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d901      	bls.n	800490c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e01b      	b.n	8004944 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	2b00      	cmp	r3, #0
 8004912:	daf2      	bge.n	80048fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	019b      	lsls	r3, r3, #6
 800491c:	f043 0220 	orr.w	r2, r3, #32
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	3301      	adds	r3, #1
 8004928:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4a08      	ldr	r2, [pc, #32]	; (8004950 <USB_FlushTxFifo+0x64>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d901      	bls.n	8004936 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e006      	b.n	8004944 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f003 0320 	and.w	r3, r3, #32
 800493e:	2b20      	cmp	r3, #32
 8004940:	d0f0      	beq.n	8004924 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	00030d40 	.word	0x00030d40

08004954 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	3301      	adds	r3, #1
 8004964:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4a11      	ldr	r2, [pc, #68]	; (80049b0 <USB_FlushRxFifo+0x5c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d901      	bls.n	8004972 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e018      	b.n	80049a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	daf2      	bge.n	8004960 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2210      	movs	r2, #16
 8004982:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	3301      	adds	r3, #1
 8004988:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4a08      	ldr	r2, [pc, #32]	; (80049b0 <USB_FlushRxFifo+0x5c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d901      	bls.n	8004996 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e006      	b.n	80049a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	f003 0310 	and.w	r3, r3, #16
 800499e:	2b10      	cmp	r3, #16
 80049a0:	d0f0      	beq.n	8004984 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	00030d40 	.word	0x00030d40

080049b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	460b      	mov	r3, r1
 80049be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	78fb      	ldrb	r3, [r7, #3]
 80049ce:	68f9      	ldr	r1, [r7, #12]
 80049d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049d4:	4313      	orrs	r3, r2
 80049d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b085      	sub	sp, #20
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a00:	f023 0303 	bic.w	r3, r3, #3
 8004a04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a14:	f043 0302 	orr.w	r3, r3, #2
 8004a18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	f003 0301 	and.w	r3, r3, #1
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	3301      	adds	r3, #1
 8004a54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	4a13      	ldr	r2, [pc, #76]	; (8004aa8 <USB_CoreReset+0x64>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d901      	bls.n	8004a62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e01b      	b.n	8004a9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	daf2      	bge.n	8004a50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	f043 0201 	orr.w	r2, r3, #1
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4a09      	ldr	r2, [pc, #36]	; (8004aa8 <USB_CoreReset+0x64>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d901      	bls.n	8004a8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e006      	b.n	8004a9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d0f0      	beq.n	8004a7a <USB_CoreReset+0x36>

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	00030d40 	.word	0x00030d40

08004aac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004ab0:	bf00      	nop
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
	...

08004abc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ac2:	f3ef 8305 	mrs	r3, IPSR
 8004ac6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ac8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10f      	bne.n	8004aee <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ace:	f3ef 8310 	mrs	r3, PRIMASK
 8004ad2:	607b      	str	r3, [r7, #4]
  return(result);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d105      	bne.n	8004ae6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ada:	f3ef 8311 	mrs	r3, BASEPRI
 8004ade:	603b      	str	r3, [r7, #0]
  return(result);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d007      	beq.n	8004af6 <osKernelInitialize+0x3a>
 8004ae6:	4b0e      	ldr	r3, [pc, #56]	; (8004b20 <osKernelInitialize+0x64>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d103      	bne.n	8004af6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004aee:	f06f 0305 	mvn.w	r3, #5
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	e00c      	b.n	8004b10 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004af6:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <osKernelInitialize+0x64>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d105      	bne.n	8004b0a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004afe:	4b08      	ldr	r3, [pc, #32]	; (8004b20 <osKernelInitialize+0x64>)
 8004b00:	2201      	movs	r2, #1
 8004b02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	e002      	b.n	8004b10 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004b0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b0e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004b10:	68fb      	ldr	r3, [r7, #12]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	200008f4 	.word	0x200008f4

08004b24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b2a:	f3ef 8305 	mrs	r3, IPSR
 8004b2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b30:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10f      	bne.n	8004b56 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b36:	f3ef 8310 	mrs	r3, PRIMASK
 8004b3a:	607b      	str	r3, [r7, #4]
  return(result);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d105      	bne.n	8004b4e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b42:	f3ef 8311 	mrs	r3, BASEPRI
 8004b46:	603b      	str	r3, [r7, #0]
  return(result);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d007      	beq.n	8004b5e <osKernelStart+0x3a>
 8004b4e:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <osKernelStart+0x68>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d103      	bne.n	8004b5e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004b56:	f06f 0305 	mvn.w	r3, #5
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	e010      	b.n	8004b80 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004b5e:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <osKernelStart+0x68>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d109      	bne.n	8004b7a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004b66:	f7ff ffa1 	bl	8004aac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004b6a:	4b08      	ldr	r3, [pc, #32]	; (8004b8c <osKernelStart+0x68>)
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004b70:	f001 f8ca 	bl	8005d08 <vTaskStartScheduler>
      stat = osOK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	e002      	b.n	8004b80 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b7e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004b80:	68fb      	ldr	r3, [r7, #12]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	200008f4 	.word	0x200008f4

08004b90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b090      	sub	sp, #64	; 0x40
 8004b94:	af04      	add	r7, sp, #16
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ba0:	f3ef 8305 	mrs	r3, IPSR
 8004ba4:	61fb      	str	r3, [r7, #28]
  return(result);
 8004ba6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f040 808f 	bne.w	8004ccc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bae:	f3ef 8310 	mrs	r3, PRIMASK
 8004bb2:	61bb      	str	r3, [r7, #24]
  return(result);
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d105      	bne.n	8004bc6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004bba:	f3ef 8311 	mrs	r3, BASEPRI
 8004bbe:	617b      	str	r3, [r7, #20]
  return(result);
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <osThreadNew+0x3e>
 8004bc6:	4b44      	ldr	r3, [pc, #272]	; (8004cd8 <osThreadNew+0x148>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d07e      	beq.n	8004ccc <osThreadNew+0x13c>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d07b      	beq.n	8004ccc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004bd4:	2380      	movs	r3, #128	; 0x80
 8004bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004bd8:	2318      	movs	r3, #24
 8004bda:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004be0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004be4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d045      	beq.n	8004c78 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <osThreadNew+0x6a>
        name = attr->name;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d008      	beq.n	8004c20 <osThreadNew+0x90>
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	2b38      	cmp	r3, #56	; 0x38
 8004c12:	d805      	bhi.n	8004c20 <osThreadNew+0x90>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <osThreadNew+0x94>
        return (NULL);
 8004c20:	2300      	movs	r3, #0
 8004c22:	e054      	b.n	8004cce <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	089b      	lsrs	r3, r3, #2
 8004c32:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00e      	beq.n	8004c5a <osThreadNew+0xca>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	2bbb      	cmp	r3, #187	; 0xbb
 8004c42:	d90a      	bls.n	8004c5a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d006      	beq.n	8004c5a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <osThreadNew+0xca>
        mem = 1;
 8004c54:	2301      	movs	r3, #1
 8004c56:	623b      	str	r3, [r7, #32]
 8004c58:	e010      	b.n	8004c7c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10c      	bne.n	8004c7c <osThreadNew+0xec>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d108      	bne.n	8004c7c <osThreadNew+0xec>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d104      	bne.n	8004c7c <osThreadNew+0xec>
          mem = 0;
 8004c72:	2300      	movs	r3, #0
 8004c74:	623b      	str	r3, [r7, #32]
 8004c76:	e001      	b.n	8004c7c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d110      	bne.n	8004ca4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c8a:	9202      	str	r2, [sp, #8]
 8004c8c:	9301      	str	r3, [sp, #4]
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f000 fe3f 	bl	800591c <xTaskCreateStatic>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	613b      	str	r3, [r7, #16]
 8004ca2:	e013      	b.n	8004ccc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004ca4:	6a3b      	ldr	r3, [r7, #32]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d110      	bne.n	8004ccc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	f107 0310 	add.w	r3, r7, #16
 8004cb2:	9301      	str	r3, [sp, #4]
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 fe90 	bl	80059e2 <xTaskCreate>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d001      	beq.n	8004ccc <osThreadNew+0x13c>
          hTask = NULL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004ccc:	693b      	ldr	r3, [r7, #16]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3730      	adds	r7, #48	; 0x30
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	200008f4 	.word	0x200008f4

08004cdc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ce4:	f3ef 8305 	mrs	r3, IPSR
 8004ce8:	613b      	str	r3, [r7, #16]
  return(result);
 8004cea:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10f      	bne.n	8004d10 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d105      	bne.n	8004d08 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004cfc:	f3ef 8311 	mrs	r3, BASEPRI
 8004d00:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d007      	beq.n	8004d18 <osDelay+0x3c>
 8004d08:	4b0a      	ldr	r3, [pc, #40]	; (8004d34 <osDelay+0x58>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d103      	bne.n	8004d18 <osDelay+0x3c>
    stat = osErrorISR;
 8004d10:	f06f 0305 	mvn.w	r3, #5
 8004d14:	617b      	str	r3, [r7, #20]
 8004d16:	e007      	b.n	8004d28 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d002      	beq.n	8004d28 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 ffba 	bl	8005c9c <vTaskDelay>
    }
  }

  return (stat);
 8004d28:	697b      	ldr	r3, [r7, #20]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	200008f4 	.word	0x200008f4

08004d38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4a07      	ldr	r2, [pc, #28]	; (8004d64 <vApplicationGetIdleTaskMemory+0x2c>)
 8004d48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	4a06      	ldr	r2, [pc, #24]	; (8004d68 <vApplicationGetIdleTaskMemory+0x30>)
 8004d4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2280      	movs	r2, #128	; 0x80
 8004d54:	601a      	str	r2, [r3, #0]
}
 8004d56:	bf00      	nop
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	200008f8 	.word	0x200008f8
 8004d68:	200009b4 	.word	0x200009b4

08004d6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4a07      	ldr	r2, [pc, #28]	; (8004d98 <vApplicationGetTimerTaskMemory+0x2c>)
 8004d7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	4a06      	ldr	r2, [pc, #24]	; (8004d9c <vApplicationGetTimerTaskMemory+0x30>)
 8004d82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d8a:	601a      	str	r2, [r3, #0]
}
 8004d8c:	bf00      	nop
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	20000bb4 	.word	0x20000bb4
 8004d9c:	20000c70 	.word	0x20000c70

08004da0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f103 0208 	add.w	r2, r3, #8
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004db8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f103 0208 	add.w	r2, r3, #8
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f103 0208 	add.w	r2, r3, #8
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b085      	sub	sp, #20
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	601a      	str	r2, [r3, #0]
}
 8004e36:	bf00      	nop
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e42:	b480      	push	{r7}
 8004e44:	b085      	sub	sp, #20
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
 8004e4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e58:	d103      	bne.n	8004e62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	e00c      	b.n	8004e7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	3308      	adds	r3, #8
 8004e66:	60fb      	str	r3, [r7, #12]
 8004e68:	e002      	b.n	8004e70 <vListInsert+0x2e>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d2f6      	bcs.n	8004e6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	1c5a      	adds	r2, r3, #1
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	601a      	str	r2, [r3, #0]
}
 8004ea8:	bf00      	nop
 8004eaa:	3714      	adds	r7, #20
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	6892      	ldr	r2, [r2, #8]
 8004eca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	6852      	ldr	r2, [r2, #4]
 8004ed4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d103      	bne.n	8004ee8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	1e5a      	subs	r2, r3, #1
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10c      	bne.n	8004f36 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f20:	b672      	cpsid	i
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	b662      	cpsie	i
 8004f30:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004f32:	bf00      	nop
 8004f34:	e7fe      	b.n	8004f34 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004f36:	f002 f8a9 	bl	800708c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f42:	68f9      	ldr	r1, [r7, #12]
 8004f44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004f46:	fb01 f303 	mul.w	r3, r1, r3
 8004f4a:	441a      	add	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f66:	3b01      	subs	r3, #1
 8004f68:	68f9      	ldr	r1, [r7, #12]
 8004f6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004f6c:	fb01 f303 	mul.w	r3, r1, r3
 8004f70:	441a      	add	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	22ff      	movs	r2, #255	; 0xff
 8004f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	22ff      	movs	r2, #255	; 0xff
 8004f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d114      	bne.n	8004fb6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d01a      	beq.n	8004fca <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	3310      	adds	r3, #16
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f001 f95d 	bl	8006258 <xTaskRemoveFromEventList>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d012      	beq.n	8004fca <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004fa4:	4b0c      	ldr	r3, [pc, #48]	; (8004fd8 <xQueueGenericReset+0xd0>)
 8004fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	e009      	b.n	8004fca <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	3310      	adds	r3, #16
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7ff fef0 	bl	8004da0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	3324      	adds	r3, #36	; 0x24
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff feeb 	bl	8004da0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004fca:	f002 f893 	bl	80070f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004fce:	2301      	movs	r3, #1
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	e000ed04 	.word	0xe000ed04

08004fdc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08e      	sub	sp, #56	; 0x38
 8004fe0:	af02      	add	r7, sp, #8
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10c      	bne.n	800500a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff4:	b672      	cpsid	i
 8004ff6:	f383 8811 	msr	BASEPRI, r3
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	b662      	cpsie	i
 8005004:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005006:	bf00      	nop
 8005008:	e7fe      	b.n	8005008 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10c      	bne.n	800502a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8005010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005014:	b672      	cpsid	i
 8005016:	f383 8811 	msr	BASEPRI, r3
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	b662      	cpsie	i
 8005024:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005026:	bf00      	nop
 8005028:	e7fe      	b.n	8005028 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d002      	beq.n	8005036 <xQueueGenericCreateStatic+0x5a>
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <xQueueGenericCreateStatic+0x5e>
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <xQueueGenericCreateStatic+0x60>
 800503a:	2300      	movs	r3, #0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10c      	bne.n	800505a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005044:	b672      	cpsid	i
 8005046:	f383 8811 	msr	BASEPRI, r3
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	b662      	cpsie	i
 8005054:	623b      	str	r3, [r7, #32]
}
 8005056:	bf00      	nop
 8005058:	e7fe      	b.n	8005058 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d102      	bne.n	8005066 <xQueueGenericCreateStatic+0x8a>
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <xQueueGenericCreateStatic+0x8e>
 8005066:	2301      	movs	r3, #1
 8005068:	e000      	b.n	800506c <xQueueGenericCreateStatic+0x90>
 800506a:	2300      	movs	r3, #0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10c      	bne.n	800508a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8005070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005074:	b672      	cpsid	i
 8005076:	f383 8811 	msr	BASEPRI, r3
 800507a:	f3bf 8f6f 	isb	sy
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	b662      	cpsie	i
 8005084:	61fb      	str	r3, [r7, #28]
}
 8005086:	bf00      	nop
 8005088:	e7fe      	b.n	8005088 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800508a:	2350      	movs	r3, #80	; 0x50
 800508c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2b50      	cmp	r3, #80	; 0x50
 8005092:	d00c      	beq.n	80050ae <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8005094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005098:	b672      	cpsid	i
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	b662      	cpsie	i
 80050a8:	61bb      	str	r3, [r7, #24]
}
 80050aa:	bf00      	nop
 80050ac:	e7fe      	b.n	80050ac <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80050ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80050b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00d      	beq.n	80050d6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80050ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80050c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80050c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	4613      	mov	r3, r2
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	68b9      	ldr	r1, [r7, #8]
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 f805 	bl	80050e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80050d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80050d8:	4618      	mov	r0, r3
 80050da:	3730      	adds	r7, #48	; 0x30
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d103      	bne.n	80050fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	e002      	b.n	8005102 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800510e:	2101      	movs	r1, #1
 8005110:	69b8      	ldr	r0, [r7, #24]
 8005112:	f7ff fef9 	bl	8004f08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	78fa      	ldrb	r2, [r7, #3]
 800511a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800511e:	bf00      	nop
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
	...

08005128 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08e      	sub	sp, #56	; 0x38
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005136:	2300      	movs	r3, #0
 8005138:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800513e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10c      	bne.n	800515e <xQueueGenericSend+0x36>
	__asm volatile
 8005144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005148:	b672      	cpsid	i
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	b662      	cpsie	i
 8005158:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800515a:	bf00      	nop
 800515c:	e7fe      	b.n	800515c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d103      	bne.n	800516c <xQueueGenericSend+0x44>
 8005164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <xQueueGenericSend+0x48>
 800516c:	2301      	movs	r3, #1
 800516e:	e000      	b.n	8005172 <xQueueGenericSend+0x4a>
 8005170:	2300      	movs	r3, #0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10c      	bne.n	8005190 <xQueueGenericSend+0x68>
	__asm volatile
 8005176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517a:	b672      	cpsid	i
 800517c:	f383 8811 	msr	BASEPRI, r3
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	b662      	cpsie	i
 800518a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800518c:	bf00      	nop
 800518e:	e7fe      	b.n	800518e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	2b02      	cmp	r3, #2
 8005194:	d103      	bne.n	800519e <xQueueGenericSend+0x76>
 8005196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519a:	2b01      	cmp	r3, #1
 800519c:	d101      	bne.n	80051a2 <xQueueGenericSend+0x7a>
 800519e:	2301      	movs	r3, #1
 80051a0:	e000      	b.n	80051a4 <xQueueGenericSend+0x7c>
 80051a2:	2300      	movs	r3, #0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10c      	bne.n	80051c2 <xQueueGenericSend+0x9a>
	__asm volatile
 80051a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ac:	b672      	cpsid	i
 80051ae:	f383 8811 	msr	BASEPRI, r3
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	b662      	cpsie	i
 80051bc:	623b      	str	r3, [r7, #32]
}
 80051be:	bf00      	nop
 80051c0:	e7fe      	b.n	80051c0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051c2:	f001 fa13 	bl	80065ec <xTaskGetSchedulerState>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d102      	bne.n	80051d2 <xQueueGenericSend+0xaa>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <xQueueGenericSend+0xae>
 80051d2:	2301      	movs	r3, #1
 80051d4:	e000      	b.n	80051d8 <xQueueGenericSend+0xb0>
 80051d6:	2300      	movs	r3, #0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10c      	bne.n	80051f6 <xQueueGenericSend+0xce>
	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	b672      	cpsid	i
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	b662      	cpsie	i
 80051f0:	61fb      	str	r3, [r7, #28]
}
 80051f2:	bf00      	nop
 80051f4:	e7fe      	b.n	80051f4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051f6:	f001 ff49 	bl	800708c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005202:	429a      	cmp	r2, r3
 8005204:	d302      	bcc.n	800520c <xQueueGenericSend+0xe4>
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b02      	cmp	r3, #2
 800520a:	d129      	bne.n	8005260 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	68b9      	ldr	r1, [r7, #8]
 8005210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005212:	f000 fa15 	bl	8005640 <prvCopyDataToQueue>
 8005216:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	2b00      	cmp	r3, #0
 800521e:	d010      	beq.n	8005242 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005222:	3324      	adds	r3, #36	; 0x24
 8005224:	4618      	mov	r0, r3
 8005226:	f001 f817 	bl	8006258 <xTaskRemoveFromEventList>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d013      	beq.n	8005258 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005230:	4b3f      	ldr	r3, [pc, #252]	; (8005330 <xQueueGenericSend+0x208>)
 8005232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	e00a      	b.n	8005258 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005244:	2b00      	cmp	r3, #0
 8005246:	d007      	beq.n	8005258 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005248:	4b39      	ldr	r3, [pc, #228]	; (8005330 <xQueueGenericSend+0x208>)
 800524a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800524e:	601a      	str	r2, [r3, #0]
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005258:	f001 ff4c 	bl	80070f4 <vPortExitCritical>
				return pdPASS;
 800525c:	2301      	movs	r3, #1
 800525e:	e063      	b.n	8005328 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d103      	bne.n	800526e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005266:	f001 ff45 	bl	80070f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800526a:	2300      	movs	r3, #0
 800526c:	e05c      	b.n	8005328 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800526e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005270:	2b00      	cmp	r3, #0
 8005272:	d106      	bne.n	8005282 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005274:	f107 0314 	add.w	r3, r7, #20
 8005278:	4618      	mov	r0, r3
 800527a:	f001 f853 	bl	8006324 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800527e:	2301      	movs	r3, #1
 8005280:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005282:	f001 ff37 	bl	80070f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005286:	f000 fdb3 	bl	8005df0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800528a:	f001 feff 	bl	800708c <vPortEnterCritical>
 800528e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005290:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005294:	b25b      	sxtb	r3, r3
 8005296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800529a:	d103      	bne.n	80052a4 <xQueueGenericSend+0x17c>
 800529c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052aa:	b25b      	sxtb	r3, r3
 80052ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052b0:	d103      	bne.n	80052ba <xQueueGenericSend+0x192>
 80052b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052ba:	f001 ff1b 	bl	80070f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052be:	1d3a      	adds	r2, r7, #4
 80052c0:	f107 0314 	add.w	r3, r7, #20
 80052c4:	4611      	mov	r1, r2
 80052c6:	4618      	mov	r0, r3
 80052c8:	f001 f842 	bl	8006350 <xTaskCheckForTimeOut>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d124      	bne.n	800531c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80052d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052d4:	f000 faac 	bl	8005830 <prvIsQueueFull>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d018      	beq.n	8005310 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80052de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e0:	3310      	adds	r3, #16
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	4611      	mov	r1, r2
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 ff62 	bl	80061b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80052ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052ee:	f000 fa37 	bl	8005760 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80052f2:	f000 fd8b 	bl	8005e0c <xTaskResumeAll>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f47f af7c 	bne.w	80051f6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80052fe:	4b0c      	ldr	r3, [pc, #48]	; (8005330 <xQueueGenericSend+0x208>)
 8005300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	e772      	b.n	80051f6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005312:	f000 fa25 	bl	8005760 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005316:	f000 fd79 	bl	8005e0c <xTaskResumeAll>
 800531a:	e76c      	b.n	80051f6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800531c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800531e:	f000 fa1f 	bl	8005760 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005322:	f000 fd73 	bl	8005e0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005326:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005328:	4618      	mov	r0, r3
 800532a:	3738      	adds	r7, #56	; 0x38
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	e000ed04 	.word	0xe000ed04

08005334 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b08e      	sub	sp, #56	; 0x38
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
 8005340:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10c      	bne.n	8005366 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800534c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005350:	b672      	cpsid	i
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	b662      	cpsie	i
 8005360:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005362:	bf00      	nop
 8005364:	e7fe      	b.n	8005364 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d103      	bne.n	8005374 <xQueueGenericSendFromISR+0x40>
 800536c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <xQueueGenericSendFromISR+0x44>
 8005374:	2301      	movs	r3, #1
 8005376:	e000      	b.n	800537a <xQueueGenericSendFromISR+0x46>
 8005378:	2300      	movs	r3, #0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10c      	bne.n	8005398 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005382:	b672      	cpsid	i
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	b662      	cpsie	i
 8005392:	623b      	str	r3, [r7, #32]
}
 8005394:	bf00      	nop
 8005396:	e7fe      	b.n	8005396 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	2b02      	cmp	r3, #2
 800539c:	d103      	bne.n	80053a6 <xQueueGenericSendFromISR+0x72>
 800539e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d101      	bne.n	80053aa <xQueueGenericSendFromISR+0x76>
 80053a6:	2301      	movs	r3, #1
 80053a8:	e000      	b.n	80053ac <xQueueGenericSendFromISR+0x78>
 80053aa:	2300      	movs	r3, #0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10c      	bne.n	80053ca <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80053b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b4:	b672      	cpsid	i
 80053b6:	f383 8811 	msr	BASEPRI, r3
 80053ba:	f3bf 8f6f 	isb	sy
 80053be:	f3bf 8f4f 	dsb	sy
 80053c2:	b662      	cpsie	i
 80053c4:	61fb      	str	r3, [r7, #28]
}
 80053c6:	bf00      	nop
 80053c8:	e7fe      	b.n	80053c8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80053ca:	f001 ff47 	bl	800725c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80053ce:	f3ef 8211 	mrs	r2, BASEPRI
 80053d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d6:	b672      	cpsid	i
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	b662      	cpsie	i
 80053e6:	61ba      	str	r2, [r7, #24]
 80053e8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80053ea:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80053ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d302      	bcc.n	8005400 <xQueueGenericSendFromISR+0xcc>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d12c      	bne.n	800545a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005402:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	68b9      	ldr	r1, [r7, #8]
 800540e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005410:	f000 f916 	bl	8005640 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005414:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800541c:	d112      	bne.n	8005444 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	2b00      	cmp	r3, #0
 8005424:	d016      	beq.n	8005454 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005428:	3324      	adds	r3, #36	; 0x24
 800542a:	4618      	mov	r0, r3
 800542c:	f000 ff14 	bl	8006258 <xTaskRemoveFromEventList>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00e      	beq.n	8005454 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00b      	beq.n	8005454 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	e007      	b.n	8005454 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005444:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005448:	3301      	adds	r3, #1
 800544a:	b2db      	uxtb	r3, r3
 800544c:	b25a      	sxtb	r2, r3
 800544e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005454:	2301      	movs	r3, #1
 8005456:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005458:	e001      	b.n	800545e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800545a:	2300      	movs	r3, #0
 800545c:	637b      	str	r3, [r7, #52]	; 0x34
 800545e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005460:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005468:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800546a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800546c:	4618      	mov	r0, r3
 800546e:	3738      	adds	r7, #56	; 0x38
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b08c      	sub	sp, #48	; 0x30
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005480:	2300      	movs	r3, #0
 8005482:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10c      	bne.n	80054a8 <xQueueReceive+0x34>
	__asm volatile
 800548e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005492:	b672      	cpsid	i
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	b662      	cpsie	i
 80054a2:	623b      	str	r3, [r7, #32]
}
 80054a4:	bf00      	nop
 80054a6:	e7fe      	b.n	80054a6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d103      	bne.n	80054b6 <xQueueReceive+0x42>
 80054ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <xQueueReceive+0x46>
 80054b6:	2301      	movs	r3, #1
 80054b8:	e000      	b.n	80054bc <xQueueReceive+0x48>
 80054ba:	2300      	movs	r3, #0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10c      	bne.n	80054da <xQueueReceive+0x66>
	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c4:	b672      	cpsid	i
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	b662      	cpsie	i
 80054d4:	61fb      	str	r3, [r7, #28]
}
 80054d6:	bf00      	nop
 80054d8:	e7fe      	b.n	80054d8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054da:	f001 f887 	bl	80065ec <xTaskGetSchedulerState>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d102      	bne.n	80054ea <xQueueReceive+0x76>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <xQueueReceive+0x7a>
 80054ea:	2301      	movs	r3, #1
 80054ec:	e000      	b.n	80054f0 <xQueueReceive+0x7c>
 80054ee:	2300      	movs	r3, #0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10c      	bne.n	800550e <xQueueReceive+0x9a>
	__asm volatile
 80054f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f8:	b672      	cpsid	i
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	b662      	cpsie	i
 8005508:	61bb      	str	r3, [r7, #24]
}
 800550a:	bf00      	nop
 800550c:	e7fe      	b.n	800550c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800550e:	f001 fdbd 	bl	800708c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	2b00      	cmp	r3, #0
 800551c:	d01f      	beq.n	800555e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800551e:	68b9      	ldr	r1, [r7, #8]
 8005520:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005522:	f000 f8f7 	bl	8005714 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	1e5a      	subs	r2, r3, #1
 800552a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800552e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00f      	beq.n	8005556 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005538:	3310      	adds	r3, #16
 800553a:	4618      	mov	r0, r3
 800553c:	f000 fe8c 	bl	8006258 <xTaskRemoveFromEventList>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d007      	beq.n	8005556 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005546:	4b3d      	ldr	r3, [pc, #244]	; (800563c <xQueueReceive+0x1c8>)
 8005548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	f3bf 8f4f 	dsb	sy
 8005552:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005556:	f001 fdcd 	bl	80070f4 <vPortExitCritical>
				return pdPASS;
 800555a:	2301      	movs	r3, #1
 800555c:	e069      	b.n	8005632 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d103      	bne.n	800556c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005564:	f001 fdc6 	bl	80070f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005568:	2300      	movs	r3, #0
 800556a:	e062      	b.n	8005632 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800556c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556e:	2b00      	cmp	r3, #0
 8005570:	d106      	bne.n	8005580 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005572:	f107 0310 	add.w	r3, r7, #16
 8005576:	4618      	mov	r0, r3
 8005578:	f000 fed4 	bl	8006324 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800557c:	2301      	movs	r3, #1
 800557e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005580:	f001 fdb8 	bl	80070f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005584:	f000 fc34 	bl	8005df0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005588:	f001 fd80 	bl	800708c <vPortEnterCritical>
 800558c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005592:	b25b      	sxtb	r3, r3
 8005594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005598:	d103      	bne.n	80055a2 <xQueueReceive+0x12e>
 800559a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055a8:	b25b      	sxtb	r3, r3
 80055aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055ae:	d103      	bne.n	80055b8 <xQueueReceive+0x144>
 80055b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055b8:	f001 fd9c 	bl	80070f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055bc:	1d3a      	adds	r2, r7, #4
 80055be:	f107 0310 	add.w	r3, r7, #16
 80055c2:	4611      	mov	r1, r2
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 fec3 	bl	8006350 <xTaskCheckForTimeOut>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d123      	bne.n	8005618 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055d2:	f000 f917 	bl	8005804 <prvIsQueueEmpty>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d017      	beq.n	800560c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80055dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055de:	3324      	adds	r3, #36	; 0x24
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	4611      	mov	r1, r2
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 fde3 	bl	80061b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80055ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055ec:	f000 f8b8 	bl	8005760 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80055f0:	f000 fc0c 	bl	8005e0c <xTaskResumeAll>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d189      	bne.n	800550e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80055fa:	4b10      	ldr	r3, [pc, #64]	; (800563c <xQueueReceive+0x1c8>)
 80055fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	e780      	b.n	800550e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800560c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800560e:	f000 f8a7 	bl	8005760 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005612:	f000 fbfb 	bl	8005e0c <xTaskResumeAll>
 8005616:	e77a      	b.n	800550e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800561a:	f000 f8a1 	bl	8005760 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800561e:	f000 fbf5 	bl	8005e0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005622:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005624:	f000 f8ee 	bl	8005804 <prvIsQueueEmpty>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	f43f af6f 	beq.w	800550e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005630:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005632:	4618      	mov	r0, r3
 8005634:	3730      	adds	r7, #48	; 0x30
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	e000ed04 	.word	0xe000ed04

08005640 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800564c:	2300      	movs	r3, #0
 800564e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005654:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10d      	bne.n	800567a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d14d      	bne.n	8005702 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	4618      	mov	r0, r3
 800566c:	f000 ffdc 	bl	8006628 <xTaskPriorityDisinherit>
 8005670:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	609a      	str	r2, [r3, #8]
 8005678:	e043      	b.n	8005702 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d119      	bne.n	80056b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6858      	ldr	r0, [r3, #4]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005688:	461a      	mov	r2, r3
 800568a:	68b9      	ldr	r1, [r7, #8]
 800568c:	f002 f834 	bl	80076f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005698:	441a      	add	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d32b      	bcc.n	8005702 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	605a      	str	r2, [r3, #4]
 80056b2:	e026      	b.n	8005702 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	68d8      	ldr	r0, [r3, #12]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056bc:	461a      	mov	r2, r3
 80056be:	68b9      	ldr	r1, [r7, #8]
 80056c0:	f002 f81a 	bl	80076f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	68da      	ldr	r2, [r3, #12]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056cc:	425b      	negs	r3, r3
 80056ce:	441a      	add	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	68da      	ldr	r2, [r3, #12]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d207      	bcs.n	80056f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e8:	425b      	negs	r3, r3
 80056ea:	441a      	add	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d105      	bne.n	8005702 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d002      	beq.n	8005702 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	3b01      	subs	r3, #1
 8005700:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1c5a      	adds	r2, r3, #1
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800570a:	697b      	ldr	r3, [r7, #20]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3718      	adds	r7, #24
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	2b00      	cmp	r3, #0
 8005724:	d018      	beq.n	8005758 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68da      	ldr	r2, [r3, #12]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	441a      	add	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	429a      	cmp	r2, r3
 800573e:	d303      	bcc.n	8005748 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68d9      	ldr	r1, [r3, #12]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005750:	461a      	mov	r2, r3
 8005752:	6838      	ldr	r0, [r7, #0]
 8005754:	f001 ffd0 	bl	80076f8 <memcpy>
	}
}
 8005758:	bf00      	nop
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005768:	f001 fc90 	bl	800708c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005772:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005774:	e011      	b.n	800579a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	2b00      	cmp	r3, #0
 800577c:	d012      	beq.n	80057a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	3324      	adds	r3, #36	; 0x24
 8005782:	4618      	mov	r0, r3
 8005784:	f000 fd68 	bl	8006258 <xTaskRemoveFromEventList>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800578e:	f000 fe45 	bl	800641c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005792:	7bfb      	ldrb	r3, [r7, #15]
 8005794:	3b01      	subs	r3, #1
 8005796:	b2db      	uxtb	r3, r3
 8005798:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800579a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	dce9      	bgt.n	8005776 <prvUnlockQueue+0x16>
 80057a2:	e000      	b.n	80057a6 <prvUnlockQueue+0x46>
					break;
 80057a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	22ff      	movs	r2, #255	; 0xff
 80057aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80057ae:	f001 fca1 	bl	80070f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80057b2:	f001 fc6b 	bl	800708c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057be:	e011      	b.n	80057e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d012      	beq.n	80057ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	3310      	adds	r3, #16
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 fd43 	bl	8006258 <xTaskRemoveFromEventList>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d001      	beq.n	80057dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80057d8:	f000 fe20 	bl	800641c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80057dc:	7bbb      	ldrb	r3, [r7, #14]
 80057de:	3b01      	subs	r3, #1
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	dce9      	bgt.n	80057c0 <prvUnlockQueue+0x60>
 80057ec:	e000      	b.n	80057f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80057ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	22ff      	movs	r2, #255	; 0xff
 80057f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80057f8:	f001 fc7c 	bl	80070f4 <vPortExitCritical>
}
 80057fc:	bf00      	nop
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800580c:	f001 fc3e 	bl	800708c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005814:	2b00      	cmp	r3, #0
 8005816:	d102      	bne.n	800581e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005818:	2301      	movs	r3, #1
 800581a:	60fb      	str	r3, [r7, #12]
 800581c:	e001      	b.n	8005822 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800581e:	2300      	movs	r3, #0
 8005820:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005822:	f001 fc67 	bl	80070f4 <vPortExitCritical>

	return xReturn;
 8005826:	68fb      	ldr	r3, [r7, #12]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005838:	f001 fc28 	bl	800708c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005844:	429a      	cmp	r2, r3
 8005846:	d102      	bne.n	800584e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005848:	2301      	movs	r3, #1
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	e001      	b.n	8005852 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800584e:	2300      	movs	r3, #0
 8005850:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005852:	f001 fc4f 	bl	80070f4 <vPortExitCritical>

	return xReturn;
 8005856:	68fb      	ldr	r3, [r7, #12]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800586a:	2300      	movs	r3, #0
 800586c:	60fb      	str	r3, [r7, #12]
 800586e:	e014      	b.n	800589a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005870:	4a0f      	ldr	r2, [pc, #60]	; (80058b0 <vQueueAddToRegistry+0x50>)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10b      	bne.n	8005894 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800587c:	490c      	ldr	r1, [pc, #48]	; (80058b0 <vQueueAddToRegistry+0x50>)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005886:	4a0a      	ldr	r2, [pc, #40]	; (80058b0 <vQueueAddToRegistry+0x50>)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	4413      	add	r3, r2
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005892:	e006      	b.n	80058a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	3301      	adds	r3, #1
 8005898:	60fb      	str	r3, [r7, #12]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2b07      	cmp	r3, #7
 800589e:	d9e7      	bls.n	8005870 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80058a0:	bf00      	nop
 80058a2:	bf00      	nop
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	20001070 	.word	0x20001070

080058b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80058c4:	f001 fbe2 	bl	800708c <vPortEnterCritical>
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058ce:	b25b      	sxtb	r3, r3
 80058d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058d4:	d103      	bne.n	80058de <vQueueWaitForMessageRestricted+0x2a>
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058e4:	b25b      	sxtb	r3, r3
 80058e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058ea:	d103      	bne.n	80058f4 <vQueueWaitForMessageRestricted+0x40>
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058f4:	f001 fbfe 	bl	80070f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d106      	bne.n	800590e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	3324      	adds	r3, #36	; 0x24
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	68b9      	ldr	r1, [r7, #8]
 8005908:	4618      	mov	r0, r3
 800590a:	f000 fc77 	bl	80061fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800590e:	6978      	ldr	r0, [r7, #20]
 8005910:	f7ff ff26 	bl	8005760 <prvUnlockQueue>
	}
 8005914:	bf00      	nop
 8005916:	3718      	adds	r7, #24
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800591c:	b580      	push	{r7, lr}
 800591e:	b08e      	sub	sp, #56	; 0x38
 8005920:	af04      	add	r7, sp, #16
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
 8005928:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800592a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10c      	bne.n	800594a <xTaskCreateStatic+0x2e>
	__asm volatile
 8005930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005934:	b672      	cpsid	i
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	b662      	cpsie	i
 8005944:	623b      	str	r3, [r7, #32]
}
 8005946:	bf00      	nop
 8005948:	e7fe      	b.n	8005948 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800594a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10c      	bne.n	800596a <xTaskCreateStatic+0x4e>
	__asm volatile
 8005950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005954:	b672      	cpsid	i
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	b662      	cpsie	i
 8005964:	61fb      	str	r3, [r7, #28]
}
 8005966:	bf00      	nop
 8005968:	e7fe      	b.n	8005968 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800596a:	23bc      	movs	r3, #188	; 0xbc
 800596c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	2bbc      	cmp	r3, #188	; 0xbc
 8005972:	d00c      	beq.n	800598e <xTaskCreateStatic+0x72>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005978:	b672      	cpsid	i
 800597a:	f383 8811 	msr	BASEPRI, r3
 800597e:	f3bf 8f6f 	isb	sy
 8005982:	f3bf 8f4f 	dsb	sy
 8005986:	b662      	cpsie	i
 8005988:	61bb      	str	r3, [r7, #24]
}
 800598a:	bf00      	nop
 800598c:	e7fe      	b.n	800598c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800598e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005992:	2b00      	cmp	r3, #0
 8005994:	d01e      	beq.n	80059d4 <xTaskCreateStatic+0xb8>
 8005996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005998:	2b00      	cmp	r3, #0
 800599a:	d01b      	beq.n	80059d4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800599c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80059a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a8:	2202      	movs	r2, #2
 80059aa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80059ae:	2300      	movs	r3, #0
 80059b0:	9303      	str	r3, [sp, #12]
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	9302      	str	r3, [sp, #8]
 80059b6:	f107 0314 	add.w	r3, r7, #20
 80059ba:	9301      	str	r3, [sp, #4]
 80059bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	68b9      	ldr	r1, [r7, #8]
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 f850 	bl	8005a6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059ce:	f000 f8f5 	bl	8005bbc <prvAddNewTaskToReadyList>
 80059d2:	e001      	b.n	80059d8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80059d4:	2300      	movs	r3, #0
 80059d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80059d8:	697b      	ldr	r3, [r7, #20]
	}
 80059da:	4618      	mov	r0, r3
 80059dc:	3728      	adds	r7, #40	; 0x28
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b08c      	sub	sp, #48	; 0x30
 80059e6:	af04      	add	r7, sp, #16
 80059e8:	60f8      	str	r0, [r7, #12]
 80059ea:	60b9      	str	r1, [r7, #8]
 80059ec:	603b      	str	r3, [r7, #0]
 80059ee:	4613      	mov	r3, r2
 80059f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80059f2:	88fb      	ldrh	r3, [r7, #6]
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4618      	mov	r0, r3
 80059f8:	f001 fc74 	bl	80072e4 <pvPortMalloc>
 80059fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00e      	beq.n	8005a22 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a04:	20bc      	movs	r0, #188	; 0xbc
 8005a06:	f001 fc6d 	bl	80072e4 <pvPortMalloc>
 8005a0a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	631a      	str	r2, [r3, #48]	; 0x30
 8005a18:	e005      	b.n	8005a26 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a1a:	6978      	ldr	r0, [r7, #20]
 8005a1c:	f001 fd2c 	bl	8007478 <vPortFree>
 8005a20:	e001      	b.n	8005a26 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a22:	2300      	movs	r3, #0
 8005a24:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d017      	beq.n	8005a5c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a34:	88fa      	ldrh	r2, [r7, #6]
 8005a36:	2300      	movs	r3, #0
 8005a38:	9303      	str	r3, [sp, #12]
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	9302      	str	r3, [sp, #8]
 8005a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a40:	9301      	str	r3, [sp, #4]
 8005a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	68b9      	ldr	r1, [r7, #8]
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 f80e 	bl	8005a6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a50:	69f8      	ldr	r0, [r7, #28]
 8005a52:	f000 f8b3 	bl	8005bbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005a56:	2301      	movs	r3, #1
 8005a58:	61bb      	str	r3, [r7, #24]
 8005a5a:	e002      	b.n	8005a62 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a60:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005a62:	69bb      	ldr	r3, [r7, #24]
	}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3720      	adds	r7, #32
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b088      	sub	sp, #32
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
 8005a78:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	461a      	mov	r2, r3
 8005a84:	21a5      	movs	r1, #165	; 0xa5
 8005a86:	f001 fe45 	bl	8007714 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a8e:	6879      	ldr	r1, [r7, #4]
 8005a90:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005a94:	440b      	add	r3, r1
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	f023 0307 	bic.w	r3, r3, #7
 8005aa2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00c      	beq.n	8005ac8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8005aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab2:	b672      	cpsid	i
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	b662      	cpsie	i
 8005ac2:	617b      	str	r3, [r7, #20]
}
 8005ac4:	bf00      	nop
 8005ac6:	e7fe      	b.n	8005ac6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d01f      	beq.n	8005b0e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ace:	2300      	movs	r3, #0
 8005ad0:	61fb      	str	r3, [r7, #28]
 8005ad2:	e012      	b.n	8005afa <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	4413      	add	r3, r2
 8005ada:	7819      	ldrb	r1, [r3, #0]
 8005adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	3334      	adds	r3, #52	; 0x34
 8005ae4:	460a      	mov	r2, r1
 8005ae6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	4413      	add	r3, r2
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d006      	beq.n	8005b02 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	3301      	adds	r3, #1
 8005af8:	61fb      	str	r3, [r7, #28]
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	2b0f      	cmp	r3, #15
 8005afe:	d9e9      	bls.n	8005ad4 <prvInitialiseNewTask+0x68>
 8005b00:	e000      	b.n	8005b04 <prvInitialiseNewTask+0x98>
			{
				break;
 8005b02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b0c:	e003      	b.n	8005b16 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b18:	2b37      	cmp	r3, #55	; 0x37
 8005b1a:	d901      	bls.n	8005b20 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b1c:	2337      	movs	r3, #55	; 0x37
 8005b1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b2a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2e:	2200      	movs	r2, #0
 8005b30:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b34:	3304      	adds	r3, #4
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7ff f952 	bl	8004de0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3e:	3318      	adds	r3, #24
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7ff f94d 	bl	8004de0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6e:	3354      	adds	r3, #84	; 0x54
 8005b70:	2260      	movs	r2, #96	; 0x60
 8005b72:	2100      	movs	r1, #0
 8005b74:	4618      	mov	r0, r3
 8005b76:	f001 fdcd 	bl	8007714 <memset>
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7c:	4a0c      	ldr	r2, [pc, #48]	; (8005bb0 <prvInitialiseNewTask+0x144>)
 8005b7e:	659a      	str	r2, [r3, #88]	; 0x58
 8005b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b82:	4a0c      	ldr	r2, [pc, #48]	; (8005bb4 <prvInitialiseNewTask+0x148>)
 8005b84:	65da      	str	r2, [r3, #92]	; 0x5c
 8005b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b88:	4a0b      	ldr	r2, [pc, #44]	; (8005bb8 <prvInitialiseNewTask+0x14c>)
 8005b8a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b8c:	683a      	ldr	r2, [r7, #0]
 8005b8e:	68f9      	ldr	r1, [r7, #12]
 8005b90:	69b8      	ldr	r0, [r7, #24]
 8005b92:	f001 f96b 	bl	8006e6c <pxPortInitialiseStack>
 8005b96:	4602      	mov	r2, r0
 8005b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d002      	beq.n	8005ba8 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ba6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ba8:	bf00      	nop
 8005baa:	3720      	adds	r7, #32
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	08007968 	.word	0x08007968
 8005bb4:	08007988 	.word	0x08007988
 8005bb8:	08007948 	.word	0x08007948

08005bbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005bc4:	f001 fa62 	bl	800708c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005bc8:	4b2d      	ldr	r3, [pc, #180]	; (8005c80 <prvAddNewTaskToReadyList+0xc4>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	4a2c      	ldr	r2, [pc, #176]	; (8005c80 <prvAddNewTaskToReadyList+0xc4>)
 8005bd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005bd2:	4b2c      	ldr	r3, [pc, #176]	; (8005c84 <prvAddNewTaskToReadyList+0xc8>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d109      	bne.n	8005bee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005bda:	4a2a      	ldr	r2, [pc, #168]	; (8005c84 <prvAddNewTaskToReadyList+0xc8>)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005be0:	4b27      	ldr	r3, [pc, #156]	; (8005c80 <prvAddNewTaskToReadyList+0xc4>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d110      	bne.n	8005c0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005be8:	f000 fc3c 	bl	8006464 <prvInitialiseTaskLists>
 8005bec:	e00d      	b.n	8005c0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005bee:	4b26      	ldr	r3, [pc, #152]	; (8005c88 <prvAddNewTaskToReadyList+0xcc>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d109      	bne.n	8005c0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005bf6:	4b23      	ldr	r3, [pc, #140]	; (8005c84 <prvAddNewTaskToReadyList+0xc8>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d802      	bhi.n	8005c0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c04:	4a1f      	ldr	r2, [pc, #124]	; (8005c84 <prvAddNewTaskToReadyList+0xc8>)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c0a:	4b20      	ldr	r3, [pc, #128]	; (8005c8c <prvAddNewTaskToReadyList+0xd0>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	4a1e      	ldr	r2, [pc, #120]	; (8005c8c <prvAddNewTaskToReadyList+0xd0>)
 8005c12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005c14:	4b1d      	ldr	r3, [pc, #116]	; (8005c8c <prvAddNewTaskToReadyList+0xd0>)
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c20:	4b1b      	ldr	r3, [pc, #108]	; (8005c90 <prvAddNewTaskToReadyList+0xd4>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d903      	bls.n	8005c30 <prvAddNewTaskToReadyList+0x74>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2c:	4a18      	ldr	r2, [pc, #96]	; (8005c90 <prvAddNewTaskToReadyList+0xd4>)
 8005c2e:	6013      	str	r3, [r2, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c34:	4613      	mov	r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4a15      	ldr	r2, [pc, #84]	; (8005c94 <prvAddNewTaskToReadyList+0xd8>)
 8005c3e:	441a      	add	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3304      	adds	r3, #4
 8005c44:	4619      	mov	r1, r3
 8005c46:	4610      	mov	r0, r2
 8005c48:	f7ff f8d7 	bl	8004dfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c4c:	f001 fa52 	bl	80070f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c50:	4b0d      	ldr	r3, [pc, #52]	; (8005c88 <prvAddNewTaskToReadyList+0xcc>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00e      	beq.n	8005c76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c58:	4b0a      	ldr	r3, [pc, #40]	; (8005c84 <prvAddNewTaskToReadyList+0xc8>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d207      	bcs.n	8005c76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c66:	4b0c      	ldr	r3, [pc, #48]	; (8005c98 <prvAddNewTaskToReadyList+0xdc>)
 8005c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c76:	bf00      	nop
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	20001584 	.word	0x20001584
 8005c84:	200010b0 	.word	0x200010b0
 8005c88:	20001590 	.word	0x20001590
 8005c8c:	200015a0 	.word	0x200015a0
 8005c90:	2000158c 	.word	0x2000158c
 8005c94:	200010b4 	.word	0x200010b4
 8005c98:	e000ed04 	.word	0xe000ed04

08005c9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d019      	beq.n	8005ce2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005cae:	4b14      	ldr	r3, [pc, #80]	; (8005d00 <vTaskDelay+0x64>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00c      	beq.n	8005cd0 <vTaskDelay+0x34>
	__asm volatile
 8005cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cba:	b672      	cpsid	i
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	b662      	cpsie	i
 8005cca:	60bb      	str	r3, [r7, #8]
}
 8005ccc:	bf00      	nop
 8005cce:	e7fe      	b.n	8005cce <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005cd0:	f000 f88e 	bl	8005df0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fd18 	bl	800670c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005cdc:	f000 f896 	bl	8005e0c <xTaskResumeAll>
 8005ce0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d107      	bne.n	8005cf8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005ce8:	4b06      	ldr	r3, [pc, #24]	; (8005d04 <vTaskDelay+0x68>)
 8005cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cee:	601a      	str	r2, [r3, #0]
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005cf8:	bf00      	nop
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	200015ac 	.word	0x200015ac
 8005d04:	e000ed04 	.word	0xe000ed04

08005d08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b08a      	sub	sp, #40	; 0x28
 8005d0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d12:	2300      	movs	r3, #0
 8005d14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d16:	463a      	mov	r2, r7
 8005d18:	1d39      	adds	r1, r7, #4
 8005d1a:	f107 0308 	add.w	r3, r7, #8
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7ff f80a 	bl	8004d38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d24:	6839      	ldr	r1, [r7, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	9202      	str	r2, [sp, #8]
 8005d2c:	9301      	str	r3, [sp, #4]
 8005d2e:	2300      	movs	r3, #0
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	2300      	movs	r3, #0
 8005d34:	460a      	mov	r2, r1
 8005d36:	4926      	ldr	r1, [pc, #152]	; (8005dd0 <vTaskStartScheduler+0xc8>)
 8005d38:	4826      	ldr	r0, [pc, #152]	; (8005dd4 <vTaskStartScheduler+0xcc>)
 8005d3a:	f7ff fdef 	bl	800591c <xTaskCreateStatic>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	4a25      	ldr	r2, [pc, #148]	; (8005dd8 <vTaskStartScheduler+0xd0>)
 8005d42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d44:	4b24      	ldr	r3, [pc, #144]	; (8005dd8 <vTaskStartScheduler+0xd0>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d002      	beq.n	8005d52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	617b      	str	r3, [r7, #20]
 8005d50:	e001      	b.n	8005d56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d52:	2300      	movs	r3, #0
 8005d54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d102      	bne.n	8005d62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005d5c:	f000 fd2a 	bl	80067b4 <xTimerCreateTimerTask>
 8005d60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d11d      	bne.n	8005da4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8005d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6c:	b672      	cpsid	i
 8005d6e:	f383 8811 	msr	BASEPRI, r3
 8005d72:	f3bf 8f6f 	isb	sy
 8005d76:	f3bf 8f4f 	dsb	sy
 8005d7a:	b662      	cpsie	i
 8005d7c:	613b      	str	r3, [r7, #16]
}
 8005d7e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d80:	4b16      	ldr	r3, [pc, #88]	; (8005ddc <vTaskStartScheduler+0xd4>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3354      	adds	r3, #84	; 0x54
 8005d86:	4a16      	ldr	r2, [pc, #88]	; (8005de0 <vTaskStartScheduler+0xd8>)
 8005d88:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d8a:	4b16      	ldr	r3, [pc, #88]	; (8005de4 <vTaskStartScheduler+0xdc>)
 8005d8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d92:	4b15      	ldr	r3, [pc, #84]	; (8005de8 <vTaskStartScheduler+0xe0>)
 8005d94:	2201      	movs	r2, #1
 8005d96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005d98:	4b14      	ldr	r3, [pc, #80]	; (8005dec <vTaskStartScheduler+0xe4>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d9e:	f001 f8f7 	bl	8006f90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005da2:	e010      	b.n	8005dc6 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005daa:	d10c      	bne.n	8005dc6 <vTaskStartScheduler+0xbe>
	__asm volatile
 8005dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db0:	b672      	cpsid	i
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	b662      	cpsie	i
 8005dc0:	60fb      	str	r3, [r7, #12]
}
 8005dc2:	bf00      	nop
 8005dc4:	e7fe      	b.n	8005dc4 <vTaskStartScheduler+0xbc>
}
 8005dc6:	bf00      	nop
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	080078d0 	.word	0x080078d0
 8005dd4:	08006435 	.word	0x08006435
 8005dd8:	200015a8 	.word	0x200015a8
 8005ddc:	200010b0 	.word	0x200010b0
 8005de0:	20000018 	.word	0x20000018
 8005de4:	200015a4 	.word	0x200015a4
 8005de8:	20001590 	.word	0x20001590
 8005dec:	20001588 	.word	0x20001588

08005df0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005df0:	b480      	push	{r7}
 8005df2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005df4:	4b04      	ldr	r3, [pc, #16]	; (8005e08 <vTaskSuspendAll+0x18>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	4a03      	ldr	r2, [pc, #12]	; (8005e08 <vTaskSuspendAll+0x18>)
 8005dfc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005dfe:	bf00      	nop
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr
 8005e08:	200015ac 	.word	0x200015ac

08005e0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e12:	2300      	movs	r3, #0
 8005e14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e16:	2300      	movs	r3, #0
 8005e18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e1a:	4b43      	ldr	r3, [pc, #268]	; (8005f28 <xTaskResumeAll+0x11c>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10c      	bne.n	8005e3c <xTaskResumeAll+0x30>
	__asm volatile
 8005e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e26:	b672      	cpsid	i
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	b662      	cpsie	i
 8005e36:	603b      	str	r3, [r7, #0]
}
 8005e38:	bf00      	nop
 8005e3a:	e7fe      	b.n	8005e3a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e3c:	f001 f926 	bl	800708c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e40:	4b39      	ldr	r3, [pc, #228]	; (8005f28 <xTaskResumeAll+0x11c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3b01      	subs	r3, #1
 8005e46:	4a38      	ldr	r2, [pc, #224]	; (8005f28 <xTaskResumeAll+0x11c>)
 8005e48:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e4a:	4b37      	ldr	r3, [pc, #220]	; (8005f28 <xTaskResumeAll+0x11c>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d162      	bne.n	8005f18 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e52:	4b36      	ldr	r3, [pc, #216]	; (8005f2c <xTaskResumeAll+0x120>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d05e      	beq.n	8005f18 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e5a:	e02f      	b.n	8005ebc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e5c:	4b34      	ldr	r3, [pc, #208]	; (8005f30 <xTaskResumeAll+0x124>)
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	3318      	adds	r3, #24
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7ff f823 	bl	8004eb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	3304      	adds	r3, #4
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7ff f81e 	bl	8004eb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7c:	4b2d      	ldr	r3, [pc, #180]	; (8005f34 <xTaskResumeAll+0x128>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d903      	bls.n	8005e8c <xTaskResumeAll+0x80>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e88:	4a2a      	ldr	r2, [pc, #168]	; (8005f34 <xTaskResumeAll+0x128>)
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e90:	4613      	mov	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4a27      	ldr	r2, [pc, #156]	; (8005f38 <xTaskResumeAll+0x12c>)
 8005e9a:	441a      	add	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	4610      	mov	r0, r2
 8005ea4:	f7fe ffa9 	bl	8004dfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eac:	4b23      	ldr	r3, [pc, #140]	; (8005f3c <xTaskResumeAll+0x130>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d302      	bcc.n	8005ebc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005eb6:	4b22      	ldr	r3, [pc, #136]	; (8005f40 <xTaskResumeAll+0x134>)
 8005eb8:	2201      	movs	r2, #1
 8005eba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ebc:	4b1c      	ldr	r3, [pc, #112]	; (8005f30 <xTaskResumeAll+0x124>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1cb      	bne.n	8005e5c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d001      	beq.n	8005ece <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005eca:	f000 fb6f 	bl	80065ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005ece:	4b1d      	ldr	r3, [pc, #116]	; (8005f44 <xTaskResumeAll+0x138>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d010      	beq.n	8005efc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005eda:	f000 f847 	bl	8005f6c <xTaskIncrementTick>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d002      	beq.n	8005eea <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005ee4:	4b16      	ldr	r3, [pc, #88]	; (8005f40 <xTaskResumeAll+0x134>)
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	3b01      	subs	r3, #1
 8005eee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1f1      	bne.n	8005eda <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005ef6:	4b13      	ldr	r3, [pc, #76]	; (8005f44 <xTaskResumeAll+0x138>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005efc:	4b10      	ldr	r3, [pc, #64]	; (8005f40 <xTaskResumeAll+0x134>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d009      	beq.n	8005f18 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f04:	2301      	movs	r3, #1
 8005f06:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f08:	4b0f      	ldr	r3, [pc, #60]	; (8005f48 <xTaskResumeAll+0x13c>)
 8005f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f0e:	601a      	str	r2, [r3, #0]
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f18:	f001 f8ec 	bl	80070f4 <vPortExitCritical>

	return xAlreadyYielded;
 8005f1c:	68bb      	ldr	r3, [r7, #8]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	200015ac 	.word	0x200015ac
 8005f2c:	20001584 	.word	0x20001584
 8005f30:	20001544 	.word	0x20001544
 8005f34:	2000158c 	.word	0x2000158c
 8005f38:	200010b4 	.word	0x200010b4
 8005f3c:	200010b0 	.word	0x200010b0
 8005f40:	20001598 	.word	0x20001598
 8005f44:	20001594 	.word	0x20001594
 8005f48:	e000ed04 	.word	0xe000ed04

08005f4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005f52:	4b05      	ldr	r3, [pc, #20]	; (8005f68 <xTaskGetTickCount+0x1c>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005f58:	687b      	ldr	r3, [r7, #4]
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	20001588 	.word	0x20001588

08005f6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f72:	2300      	movs	r3, #0
 8005f74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f76:	4b50      	ldr	r3, [pc, #320]	; (80060b8 <xTaskIncrementTick+0x14c>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f040 808b 	bne.w	8006096 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f80:	4b4e      	ldr	r3, [pc, #312]	; (80060bc <xTaskIncrementTick+0x150>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	3301      	adds	r3, #1
 8005f86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f88:	4a4c      	ldr	r2, [pc, #304]	; (80060bc <xTaskIncrementTick+0x150>)
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d122      	bne.n	8005fda <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f94:	4b4a      	ldr	r3, [pc, #296]	; (80060c0 <xTaskIncrementTick+0x154>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00c      	beq.n	8005fb8 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa2:	b672      	cpsid	i
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	b662      	cpsie	i
 8005fb2:	603b      	str	r3, [r7, #0]
}
 8005fb4:	bf00      	nop
 8005fb6:	e7fe      	b.n	8005fb6 <xTaskIncrementTick+0x4a>
 8005fb8:	4b41      	ldr	r3, [pc, #260]	; (80060c0 <xTaskIncrementTick+0x154>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	60fb      	str	r3, [r7, #12]
 8005fbe:	4b41      	ldr	r3, [pc, #260]	; (80060c4 <xTaskIncrementTick+0x158>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a3f      	ldr	r2, [pc, #252]	; (80060c0 <xTaskIncrementTick+0x154>)
 8005fc4:	6013      	str	r3, [r2, #0]
 8005fc6:	4a3f      	ldr	r2, [pc, #252]	; (80060c4 <xTaskIncrementTick+0x158>)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	4b3e      	ldr	r3, [pc, #248]	; (80060c8 <xTaskIncrementTick+0x15c>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	4a3d      	ldr	r2, [pc, #244]	; (80060c8 <xTaskIncrementTick+0x15c>)
 8005fd4:	6013      	str	r3, [r2, #0]
 8005fd6:	f000 fae9 	bl	80065ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005fda:	4b3c      	ldr	r3, [pc, #240]	; (80060cc <xTaskIncrementTick+0x160>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d349      	bcc.n	8006078 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fe4:	4b36      	ldr	r3, [pc, #216]	; (80060c0 <xTaskIncrementTick+0x154>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d104      	bne.n	8005ff8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fee:	4b37      	ldr	r3, [pc, #220]	; (80060cc <xTaskIncrementTick+0x160>)
 8005ff0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ff4:	601a      	str	r2, [r3, #0]
					break;
 8005ff6:	e03f      	b.n	8006078 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ff8:	4b31      	ldr	r3, [pc, #196]	; (80060c0 <xTaskIncrementTick+0x154>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	429a      	cmp	r2, r3
 800600e:	d203      	bcs.n	8006018 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006010:	4a2e      	ldr	r2, [pc, #184]	; (80060cc <xTaskIncrementTick+0x160>)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006016:	e02f      	b.n	8006078 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	3304      	adds	r3, #4
 800601c:	4618      	mov	r0, r3
 800601e:	f7fe ff49 	bl	8004eb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006026:	2b00      	cmp	r3, #0
 8006028:	d004      	beq.n	8006034 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	3318      	adds	r3, #24
 800602e:	4618      	mov	r0, r3
 8006030:	f7fe ff40 	bl	8004eb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006038:	4b25      	ldr	r3, [pc, #148]	; (80060d0 <xTaskIncrementTick+0x164>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	429a      	cmp	r2, r3
 800603e:	d903      	bls.n	8006048 <xTaskIncrementTick+0xdc>
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006044:	4a22      	ldr	r2, [pc, #136]	; (80060d0 <xTaskIncrementTick+0x164>)
 8006046:	6013      	str	r3, [r2, #0]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800604c:	4613      	mov	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4a1f      	ldr	r2, [pc, #124]	; (80060d4 <xTaskIncrementTick+0x168>)
 8006056:	441a      	add	r2, r3
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	3304      	adds	r3, #4
 800605c:	4619      	mov	r1, r3
 800605e:	4610      	mov	r0, r2
 8006060:	f7fe fecb 	bl	8004dfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006068:	4b1b      	ldr	r3, [pc, #108]	; (80060d8 <xTaskIncrementTick+0x16c>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606e:	429a      	cmp	r2, r3
 8006070:	d3b8      	bcc.n	8005fe4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8006072:	2301      	movs	r3, #1
 8006074:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006076:	e7b5      	b.n	8005fe4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006078:	4b17      	ldr	r3, [pc, #92]	; (80060d8 <xTaskIncrementTick+0x16c>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800607e:	4915      	ldr	r1, [pc, #84]	; (80060d4 <xTaskIncrementTick+0x168>)
 8006080:	4613      	mov	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	440b      	add	r3, r1
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d907      	bls.n	80060a0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8006090:	2301      	movs	r3, #1
 8006092:	617b      	str	r3, [r7, #20]
 8006094:	e004      	b.n	80060a0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006096:	4b11      	ldr	r3, [pc, #68]	; (80060dc <xTaskIncrementTick+0x170>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	3301      	adds	r3, #1
 800609c:	4a0f      	ldr	r2, [pc, #60]	; (80060dc <xTaskIncrementTick+0x170>)
 800609e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80060a0:	4b0f      	ldr	r3, [pc, #60]	; (80060e0 <xTaskIncrementTick+0x174>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d001      	beq.n	80060ac <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80060a8:	2301      	movs	r3, #1
 80060aa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80060ac:	697b      	ldr	r3, [r7, #20]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3718      	adds	r7, #24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	200015ac 	.word	0x200015ac
 80060bc:	20001588 	.word	0x20001588
 80060c0:	2000153c 	.word	0x2000153c
 80060c4:	20001540 	.word	0x20001540
 80060c8:	2000159c 	.word	0x2000159c
 80060cc:	200015a4 	.word	0x200015a4
 80060d0:	2000158c 	.word	0x2000158c
 80060d4:	200010b4 	.word	0x200010b4
 80060d8:	200010b0 	.word	0x200010b0
 80060dc:	20001594 	.word	0x20001594
 80060e0:	20001598 	.word	0x20001598

080060e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80060ea:	4b2b      	ldr	r3, [pc, #172]	; (8006198 <vTaskSwitchContext+0xb4>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80060f2:	4b2a      	ldr	r3, [pc, #168]	; (800619c <vTaskSwitchContext+0xb8>)
 80060f4:	2201      	movs	r2, #1
 80060f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80060f8:	e048      	b.n	800618c <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 80060fa:	4b28      	ldr	r3, [pc, #160]	; (800619c <vTaskSwitchContext+0xb8>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006100:	4b27      	ldr	r3, [pc, #156]	; (80061a0 <vTaskSwitchContext+0xbc>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	60fb      	str	r3, [r7, #12]
 8006106:	e012      	b.n	800612e <vTaskSwitchContext+0x4a>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10c      	bne.n	8006128 <vTaskSwitchContext+0x44>
	__asm volatile
 800610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006112:	b672      	cpsid	i
 8006114:	f383 8811 	msr	BASEPRI, r3
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	b662      	cpsie	i
 8006122:	607b      	str	r3, [r7, #4]
}
 8006124:	bf00      	nop
 8006126:	e7fe      	b.n	8006126 <vTaskSwitchContext+0x42>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	3b01      	subs	r3, #1
 800612c:	60fb      	str	r3, [r7, #12]
 800612e:	491d      	ldr	r1, [pc, #116]	; (80061a4 <vTaskSwitchContext+0xc0>)
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	4613      	mov	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	440b      	add	r3, r1
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d0e2      	beq.n	8006108 <vTaskSwitchContext+0x24>
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4a15      	ldr	r2, [pc, #84]	; (80061a4 <vTaskSwitchContext+0xc0>)
 800614e:	4413      	add	r3, r2
 8006150:	60bb      	str	r3, [r7, #8]
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	605a      	str	r2, [r3, #4]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	685a      	ldr	r2, [r3, #4]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	3308      	adds	r3, #8
 8006164:	429a      	cmp	r2, r3
 8006166:	d104      	bne.n	8006172 <vTaskSwitchContext+0x8e>
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	605a      	str	r2, [r3, #4]
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	4a0b      	ldr	r2, [pc, #44]	; (80061a8 <vTaskSwitchContext+0xc4>)
 800617a:	6013      	str	r3, [r2, #0]
 800617c:	4a08      	ldr	r2, [pc, #32]	; (80061a0 <vTaskSwitchContext+0xbc>)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006182:	4b09      	ldr	r3, [pc, #36]	; (80061a8 <vTaskSwitchContext+0xc4>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	3354      	adds	r3, #84	; 0x54
 8006188:	4a08      	ldr	r2, [pc, #32]	; (80061ac <vTaskSwitchContext+0xc8>)
 800618a:	6013      	str	r3, [r2, #0]
}
 800618c:	bf00      	nop
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	200015ac 	.word	0x200015ac
 800619c:	20001598 	.word	0x20001598
 80061a0:	2000158c 	.word	0x2000158c
 80061a4:	200010b4 	.word	0x200010b4
 80061a8:	200010b0 	.word	0x200010b0
 80061ac:	20000018 	.word	0x20000018

080061b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10c      	bne.n	80061da <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80061c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c4:	b672      	cpsid	i
 80061c6:	f383 8811 	msr	BASEPRI, r3
 80061ca:	f3bf 8f6f 	isb	sy
 80061ce:	f3bf 8f4f 	dsb	sy
 80061d2:	b662      	cpsie	i
 80061d4:	60fb      	str	r3, [r7, #12]
}
 80061d6:	bf00      	nop
 80061d8:	e7fe      	b.n	80061d8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061da:	4b07      	ldr	r3, [pc, #28]	; (80061f8 <vTaskPlaceOnEventList+0x48>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3318      	adds	r3, #24
 80061e0:	4619      	mov	r1, r3
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7fe fe2d 	bl	8004e42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80061e8:	2101      	movs	r1, #1
 80061ea:	6838      	ldr	r0, [r7, #0]
 80061ec:	f000 fa8e 	bl	800670c <prvAddCurrentTaskToDelayedList>
}
 80061f0:	bf00      	nop
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	200010b0 	.word	0x200010b0

080061fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10c      	bne.n	8006228 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800620e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006212:	b672      	cpsid	i
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	b662      	cpsie	i
 8006222:	617b      	str	r3, [r7, #20]
}
 8006224:	bf00      	nop
 8006226:	e7fe      	b.n	8006226 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006228:	4b0a      	ldr	r3, [pc, #40]	; (8006254 <vTaskPlaceOnEventListRestricted+0x58>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3318      	adds	r3, #24
 800622e:	4619      	mov	r1, r3
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f7fe fde2 	bl	8004dfa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800623c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006240:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006242:	6879      	ldr	r1, [r7, #4]
 8006244:	68b8      	ldr	r0, [r7, #8]
 8006246:	f000 fa61 	bl	800670c <prvAddCurrentTaskToDelayedList>
	}
 800624a:	bf00      	nop
 800624c:	3718      	adds	r7, #24
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	200010b0 	.word	0x200010b0

08006258 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10c      	bne.n	8006288 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800626e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006272:	b672      	cpsid	i
 8006274:	f383 8811 	msr	BASEPRI, r3
 8006278:	f3bf 8f6f 	isb	sy
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	b662      	cpsie	i
 8006282:	60fb      	str	r3, [r7, #12]
}
 8006284:	bf00      	nop
 8006286:	e7fe      	b.n	8006286 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	3318      	adds	r3, #24
 800628c:	4618      	mov	r0, r3
 800628e:	f7fe fe11 	bl	8004eb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006292:	4b1e      	ldr	r3, [pc, #120]	; (800630c <xTaskRemoveFromEventList+0xb4>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d11d      	bne.n	80062d6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	3304      	adds	r3, #4
 800629e:	4618      	mov	r0, r3
 80062a0:	f7fe fe08 	bl	8004eb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a8:	4b19      	ldr	r3, [pc, #100]	; (8006310 <xTaskRemoveFromEventList+0xb8>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d903      	bls.n	80062b8 <xTaskRemoveFromEventList+0x60>
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b4:	4a16      	ldr	r2, [pc, #88]	; (8006310 <xTaskRemoveFromEventList+0xb8>)
 80062b6:	6013      	str	r3, [r2, #0]
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062bc:	4613      	mov	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4a13      	ldr	r2, [pc, #76]	; (8006314 <xTaskRemoveFromEventList+0xbc>)
 80062c6:	441a      	add	r2, r3
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	3304      	adds	r3, #4
 80062cc:	4619      	mov	r1, r3
 80062ce:	4610      	mov	r0, r2
 80062d0:	f7fe fd93 	bl	8004dfa <vListInsertEnd>
 80062d4:	e005      	b.n	80062e2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	3318      	adds	r3, #24
 80062da:	4619      	mov	r1, r3
 80062dc:	480e      	ldr	r0, [pc, #56]	; (8006318 <xTaskRemoveFromEventList+0xc0>)
 80062de:	f7fe fd8c 	bl	8004dfa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e6:	4b0d      	ldr	r3, [pc, #52]	; (800631c <xTaskRemoveFromEventList+0xc4>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d905      	bls.n	80062fc <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80062f0:	2301      	movs	r3, #1
 80062f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80062f4:	4b0a      	ldr	r3, [pc, #40]	; (8006320 <xTaskRemoveFromEventList+0xc8>)
 80062f6:	2201      	movs	r2, #1
 80062f8:	601a      	str	r2, [r3, #0]
 80062fa:	e001      	b.n	8006300 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80062fc:	2300      	movs	r3, #0
 80062fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006300:	697b      	ldr	r3, [r7, #20]
}
 8006302:	4618      	mov	r0, r3
 8006304:	3718      	adds	r7, #24
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	200015ac 	.word	0x200015ac
 8006310:	2000158c 	.word	0x2000158c
 8006314:	200010b4 	.word	0x200010b4
 8006318:	20001544 	.word	0x20001544
 800631c:	200010b0 	.word	0x200010b0
 8006320:	20001598 	.word	0x20001598

08006324 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800632c:	4b06      	ldr	r3, [pc, #24]	; (8006348 <vTaskInternalSetTimeOutState+0x24>)
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006334:	4b05      	ldr	r3, [pc, #20]	; (800634c <vTaskInternalSetTimeOutState+0x28>)
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	605a      	str	r2, [r3, #4]
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr
 8006348:	2000159c 	.word	0x2000159c
 800634c:	20001588 	.word	0x20001588

08006350 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b088      	sub	sp, #32
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10c      	bne.n	800637a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006364:	b672      	cpsid	i
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	b662      	cpsie	i
 8006374:	613b      	str	r3, [r7, #16]
}
 8006376:	bf00      	nop
 8006378:	e7fe      	b.n	8006378 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10c      	bne.n	800639a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006384:	b672      	cpsid	i
 8006386:	f383 8811 	msr	BASEPRI, r3
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	b662      	cpsie	i
 8006394:	60fb      	str	r3, [r7, #12]
}
 8006396:	bf00      	nop
 8006398:	e7fe      	b.n	8006398 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800639a:	f000 fe77 	bl	800708c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800639e:	4b1d      	ldr	r3, [pc, #116]	; (8006414 <xTaskCheckForTimeOut+0xc4>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	69ba      	ldr	r2, [r7, #24]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063b6:	d102      	bne.n	80063be <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80063b8:	2300      	movs	r3, #0
 80063ba:	61fb      	str	r3, [r7, #28]
 80063bc:	e023      	b.n	8006406 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	4b15      	ldr	r3, [pc, #84]	; (8006418 <xTaskCheckForTimeOut+0xc8>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d007      	beq.n	80063da <xTaskCheckForTimeOut+0x8a>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d302      	bcc.n	80063da <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80063d4:	2301      	movs	r3, #1
 80063d6:	61fb      	str	r3, [r7, #28]
 80063d8:	e015      	b.n	8006406 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d20b      	bcs.n	80063fc <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	1ad2      	subs	r2, r2, r3
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7ff ff97 	bl	8006324 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80063f6:	2300      	movs	r3, #0
 80063f8:	61fb      	str	r3, [r7, #28]
 80063fa:	e004      	b.n	8006406 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006402:	2301      	movs	r3, #1
 8006404:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006406:	f000 fe75 	bl	80070f4 <vPortExitCritical>

	return xReturn;
 800640a:	69fb      	ldr	r3, [r7, #28]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3720      	adds	r7, #32
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	20001588 	.word	0x20001588
 8006418:	2000159c 	.word	0x2000159c

0800641c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800641c:	b480      	push	{r7}
 800641e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006420:	4b03      	ldr	r3, [pc, #12]	; (8006430 <vTaskMissedYield+0x14>)
 8006422:	2201      	movs	r2, #1
 8006424:	601a      	str	r2, [r3, #0]
}
 8006426:	bf00      	nop
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr
 8006430:	20001598 	.word	0x20001598

08006434 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800643c:	f000 f852 	bl	80064e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006440:	4b06      	ldr	r3, [pc, #24]	; (800645c <prvIdleTask+0x28>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d9f9      	bls.n	800643c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006448:	4b05      	ldr	r3, [pc, #20]	; (8006460 <prvIdleTask+0x2c>)
 800644a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006458:	e7f0      	b.n	800643c <prvIdleTask+0x8>
 800645a:	bf00      	nop
 800645c:	200010b4 	.word	0x200010b4
 8006460:	e000ed04 	.word	0xe000ed04

08006464 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800646a:	2300      	movs	r3, #0
 800646c:	607b      	str	r3, [r7, #4]
 800646e:	e00c      	b.n	800648a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	4613      	mov	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4a12      	ldr	r2, [pc, #72]	; (80064c4 <prvInitialiseTaskLists+0x60>)
 800647c:	4413      	add	r3, r2
 800647e:	4618      	mov	r0, r3
 8006480:	f7fe fc8e 	bl	8004da0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	3301      	adds	r3, #1
 8006488:	607b      	str	r3, [r7, #4]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2b37      	cmp	r3, #55	; 0x37
 800648e:	d9ef      	bls.n	8006470 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006490:	480d      	ldr	r0, [pc, #52]	; (80064c8 <prvInitialiseTaskLists+0x64>)
 8006492:	f7fe fc85 	bl	8004da0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006496:	480d      	ldr	r0, [pc, #52]	; (80064cc <prvInitialiseTaskLists+0x68>)
 8006498:	f7fe fc82 	bl	8004da0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800649c:	480c      	ldr	r0, [pc, #48]	; (80064d0 <prvInitialiseTaskLists+0x6c>)
 800649e:	f7fe fc7f 	bl	8004da0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80064a2:	480c      	ldr	r0, [pc, #48]	; (80064d4 <prvInitialiseTaskLists+0x70>)
 80064a4:	f7fe fc7c 	bl	8004da0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80064a8:	480b      	ldr	r0, [pc, #44]	; (80064d8 <prvInitialiseTaskLists+0x74>)
 80064aa:	f7fe fc79 	bl	8004da0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80064ae:	4b0b      	ldr	r3, [pc, #44]	; (80064dc <prvInitialiseTaskLists+0x78>)
 80064b0:	4a05      	ldr	r2, [pc, #20]	; (80064c8 <prvInitialiseTaskLists+0x64>)
 80064b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80064b4:	4b0a      	ldr	r3, [pc, #40]	; (80064e0 <prvInitialiseTaskLists+0x7c>)
 80064b6:	4a05      	ldr	r2, [pc, #20]	; (80064cc <prvInitialiseTaskLists+0x68>)
 80064b8:	601a      	str	r2, [r3, #0]
}
 80064ba:	bf00      	nop
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	200010b4 	.word	0x200010b4
 80064c8:	20001514 	.word	0x20001514
 80064cc:	20001528 	.word	0x20001528
 80064d0:	20001544 	.word	0x20001544
 80064d4:	20001558 	.word	0x20001558
 80064d8:	20001570 	.word	0x20001570
 80064dc:	2000153c 	.word	0x2000153c
 80064e0:	20001540 	.word	0x20001540

080064e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064ea:	e019      	b.n	8006520 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80064ec:	f000 fdce 	bl	800708c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064f0:	4b10      	ldr	r3, [pc, #64]	; (8006534 <prvCheckTasksWaitingTermination+0x50>)
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	3304      	adds	r3, #4
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fe fcd9 	bl	8004eb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006502:	4b0d      	ldr	r3, [pc, #52]	; (8006538 <prvCheckTasksWaitingTermination+0x54>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	3b01      	subs	r3, #1
 8006508:	4a0b      	ldr	r2, [pc, #44]	; (8006538 <prvCheckTasksWaitingTermination+0x54>)
 800650a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800650c:	4b0b      	ldr	r3, [pc, #44]	; (800653c <prvCheckTasksWaitingTermination+0x58>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3b01      	subs	r3, #1
 8006512:	4a0a      	ldr	r2, [pc, #40]	; (800653c <prvCheckTasksWaitingTermination+0x58>)
 8006514:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006516:	f000 fded 	bl	80070f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f810 	bl	8006540 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006520:	4b06      	ldr	r3, [pc, #24]	; (800653c <prvCheckTasksWaitingTermination+0x58>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1e1      	bne.n	80064ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006528:	bf00      	nop
 800652a:	bf00      	nop
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	20001558 	.word	0x20001558
 8006538:	20001584 	.word	0x20001584
 800653c:	2000156c 	.word	0x2000156c

08006540 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	3354      	adds	r3, #84	; 0x54
 800654c:	4618      	mov	r0, r3
 800654e:	f001 f8f7 	bl	8007740 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006558:	2b00      	cmp	r3, #0
 800655a:	d108      	bne.n	800656e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006560:	4618      	mov	r0, r3
 8006562:	f000 ff89 	bl	8007478 <vPortFree>
				vPortFree( pxTCB );
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 ff86 	bl	8007478 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800656c:	e01a      	b.n	80065a4 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006574:	2b01      	cmp	r3, #1
 8006576:	d103      	bne.n	8006580 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 ff7d 	bl	8007478 <vPortFree>
	}
 800657e:	e011      	b.n	80065a4 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006586:	2b02      	cmp	r3, #2
 8006588:	d00c      	beq.n	80065a4 <prvDeleteTCB+0x64>
	__asm volatile
 800658a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658e:	b672      	cpsid	i
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	b662      	cpsie	i
 800659e:	60fb      	str	r3, [r7, #12]
}
 80065a0:	bf00      	nop
 80065a2:	e7fe      	b.n	80065a2 <prvDeleteTCB+0x62>
	}
 80065a4:	bf00      	nop
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065b2:	4b0c      	ldr	r3, [pc, #48]	; (80065e4 <prvResetNextTaskUnblockTime+0x38>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d104      	bne.n	80065c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80065bc:	4b0a      	ldr	r3, [pc, #40]	; (80065e8 <prvResetNextTaskUnblockTime+0x3c>)
 80065be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80065c4:	e008      	b.n	80065d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065c6:	4b07      	ldr	r3, [pc, #28]	; (80065e4 <prvResetNextTaskUnblockTime+0x38>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	4a04      	ldr	r2, [pc, #16]	; (80065e8 <prvResetNextTaskUnblockTime+0x3c>)
 80065d6:	6013      	str	r3, [r2, #0]
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr
 80065e4:	2000153c 	.word	0x2000153c
 80065e8:	200015a4 	.word	0x200015a4

080065ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80065f2:	4b0b      	ldr	r3, [pc, #44]	; (8006620 <xTaskGetSchedulerState+0x34>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d102      	bne.n	8006600 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80065fa:	2301      	movs	r3, #1
 80065fc:	607b      	str	r3, [r7, #4]
 80065fe:	e008      	b.n	8006612 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006600:	4b08      	ldr	r3, [pc, #32]	; (8006624 <xTaskGetSchedulerState+0x38>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d102      	bne.n	800660e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006608:	2302      	movs	r3, #2
 800660a:	607b      	str	r3, [r7, #4]
 800660c:	e001      	b.n	8006612 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800660e:	2300      	movs	r3, #0
 8006610:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006612:	687b      	ldr	r3, [r7, #4]
	}
 8006614:	4618      	mov	r0, r3
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	20001590 	.word	0x20001590
 8006624:	200015ac 	.word	0x200015ac

08006628 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006634:	2300      	movs	r3, #0
 8006636:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d05a      	beq.n	80066f4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800663e:	4b30      	ldr	r3, [pc, #192]	; (8006700 <xTaskPriorityDisinherit+0xd8>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	429a      	cmp	r2, r3
 8006646:	d00c      	beq.n	8006662 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8006648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664c:	b672      	cpsid	i
 800664e:	f383 8811 	msr	BASEPRI, r3
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	f3bf 8f4f 	dsb	sy
 800665a:	b662      	cpsie	i
 800665c:	60fb      	str	r3, [r7, #12]
}
 800665e:	bf00      	nop
 8006660:	e7fe      	b.n	8006660 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10c      	bne.n	8006684 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800666a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666e:	b672      	cpsid	i
 8006670:	f383 8811 	msr	BASEPRI, r3
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	b662      	cpsie	i
 800667e:	60bb      	str	r3, [r7, #8]
}
 8006680:	bf00      	nop
 8006682:	e7fe      	b.n	8006682 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006688:	1e5a      	subs	r2, r3, #1
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006696:	429a      	cmp	r2, r3
 8006698:	d02c      	beq.n	80066f4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d128      	bne.n	80066f4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	3304      	adds	r3, #4
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7fe fc04 	bl	8004eb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c4:	4b0f      	ldr	r3, [pc, #60]	; (8006704 <xTaskPriorityDisinherit+0xdc>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d903      	bls.n	80066d4 <xTaskPriorityDisinherit+0xac>
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d0:	4a0c      	ldr	r2, [pc, #48]	; (8006704 <xTaskPriorityDisinherit+0xdc>)
 80066d2:	6013      	str	r3, [r2, #0]
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d8:	4613      	mov	r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4413      	add	r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4a09      	ldr	r2, [pc, #36]	; (8006708 <xTaskPriorityDisinherit+0xe0>)
 80066e2:	441a      	add	r2, r3
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	3304      	adds	r3, #4
 80066e8:	4619      	mov	r1, r3
 80066ea:	4610      	mov	r0, r2
 80066ec:	f7fe fb85 	bl	8004dfa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80066f0:	2301      	movs	r3, #1
 80066f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80066f4:	697b      	ldr	r3, [r7, #20]
	}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3718      	adds	r7, #24
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	200010b0 	.word	0x200010b0
 8006704:	2000158c 	.word	0x2000158c
 8006708:	200010b4 	.word	0x200010b4

0800670c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006716:	4b21      	ldr	r3, [pc, #132]	; (800679c <prvAddCurrentTaskToDelayedList+0x90>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800671c:	4b20      	ldr	r3, [pc, #128]	; (80067a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	3304      	adds	r3, #4
 8006722:	4618      	mov	r0, r3
 8006724:	f7fe fbc6 	bl	8004eb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800672e:	d10a      	bne.n	8006746 <prvAddCurrentTaskToDelayedList+0x3a>
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d007      	beq.n	8006746 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006736:	4b1a      	ldr	r3, [pc, #104]	; (80067a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	3304      	adds	r3, #4
 800673c:	4619      	mov	r1, r3
 800673e:	4819      	ldr	r0, [pc, #100]	; (80067a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006740:	f7fe fb5b 	bl	8004dfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006744:	e026      	b.n	8006794 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4413      	add	r3, r2
 800674c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800674e:	4b14      	ldr	r3, [pc, #80]	; (80067a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	429a      	cmp	r2, r3
 800675c:	d209      	bcs.n	8006772 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800675e:	4b12      	ldr	r3, [pc, #72]	; (80067a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	4b0f      	ldr	r3, [pc, #60]	; (80067a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	3304      	adds	r3, #4
 8006768:	4619      	mov	r1, r3
 800676a:	4610      	mov	r0, r2
 800676c:	f7fe fb69 	bl	8004e42 <vListInsert>
}
 8006770:	e010      	b.n	8006794 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006772:	4b0e      	ldr	r3, [pc, #56]	; (80067ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	4b0a      	ldr	r3, [pc, #40]	; (80067a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	3304      	adds	r3, #4
 800677c:	4619      	mov	r1, r3
 800677e:	4610      	mov	r0, r2
 8006780:	f7fe fb5f 	bl	8004e42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006784:	4b0a      	ldr	r3, [pc, #40]	; (80067b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	429a      	cmp	r2, r3
 800678c:	d202      	bcs.n	8006794 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800678e:	4a08      	ldr	r2, [pc, #32]	; (80067b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	6013      	str	r3, [r2, #0]
}
 8006794:	bf00      	nop
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	20001588 	.word	0x20001588
 80067a0:	200010b0 	.word	0x200010b0
 80067a4:	20001570 	.word	0x20001570
 80067a8:	20001540 	.word	0x20001540
 80067ac:	2000153c 	.word	0x2000153c
 80067b0:	200015a4 	.word	0x200015a4

080067b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b08a      	sub	sp, #40	; 0x28
 80067b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80067ba:	2300      	movs	r3, #0
 80067bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80067be:	f000 fb15 	bl	8006dec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80067c2:	4b1d      	ldr	r3, [pc, #116]	; (8006838 <xTimerCreateTimerTask+0x84>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d021      	beq.n	800680e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80067ce:	2300      	movs	r3, #0
 80067d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80067d2:	1d3a      	adds	r2, r7, #4
 80067d4:	f107 0108 	add.w	r1, r7, #8
 80067d8:	f107 030c 	add.w	r3, r7, #12
 80067dc:	4618      	mov	r0, r3
 80067de:	f7fe fac5 	bl	8004d6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80067e2:	6879      	ldr	r1, [r7, #4]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	9202      	str	r2, [sp, #8]
 80067ea:	9301      	str	r3, [sp, #4]
 80067ec:	2302      	movs	r3, #2
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	2300      	movs	r3, #0
 80067f2:	460a      	mov	r2, r1
 80067f4:	4911      	ldr	r1, [pc, #68]	; (800683c <xTimerCreateTimerTask+0x88>)
 80067f6:	4812      	ldr	r0, [pc, #72]	; (8006840 <xTimerCreateTimerTask+0x8c>)
 80067f8:	f7ff f890 	bl	800591c <xTaskCreateStatic>
 80067fc:	4603      	mov	r3, r0
 80067fe:	4a11      	ldr	r2, [pc, #68]	; (8006844 <xTimerCreateTimerTask+0x90>)
 8006800:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006802:	4b10      	ldr	r3, [pc, #64]	; (8006844 <xTimerCreateTimerTask+0x90>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800680a:	2301      	movs	r3, #1
 800680c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10c      	bne.n	800682e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8006814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006818:	b672      	cpsid	i
 800681a:	f383 8811 	msr	BASEPRI, r3
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	b662      	cpsie	i
 8006828:	613b      	str	r3, [r7, #16]
}
 800682a:	bf00      	nop
 800682c:	e7fe      	b.n	800682c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800682e:	697b      	ldr	r3, [r7, #20]
}
 8006830:	4618      	mov	r0, r3
 8006832:	3718      	adds	r7, #24
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	200015e0 	.word	0x200015e0
 800683c:	080078d8 	.word	0x080078d8
 8006840:	08006985 	.word	0x08006985
 8006844:	200015e4 	.word	0x200015e4

08006848 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b08a      	sub	sp, #40	; 0x28
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
 8006854:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006856:	2300      	movs	r3, #0
 8006858:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10c      	bne.n	800687a <xTimerGenericCommand+0x32>
	__asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006864:	b672      	cpsid	i
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	b662      	cpsie	i
 8006874:	623b      	str	r3, [r7, #32]
}
 8006876:	bf00      	nop
 8006878:	e7fe      	b.n	8006878 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800687a:	4b1a      	ldr	r3, [pc, #104]	; (80068e4 <xTimerGenericCommand+0x9c>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d02a      	beq.n	80068d8 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	2b05      	cmp	r3, #5
 8006892:	dc18      	bgt.n	80068c6 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006894:	f7ff feaa 	bl	80065ec <xTaskGetSchedulerState>
 8006898:	4603      	mov	r3, r0
 800689a:	2b02      	cmp	r3, #2
 800689c:	d109      	bne.n	80068b2 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800689e:	4b11      	ldr	r3, [pc, #68]	; (80068e4 <xTimerGenericCommand+0x9c>)
 80068a0:	6818      	ldr	r0, [r3, #0]
 80068a2:	f107 0110 	add.w	r1, r7, #16
 80068a6:	2300      	movs	r3, #0
 80068a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068aa:	f7fe fc3d 	bl	8005128 <xQueueGenericSend>
 80068ae:	6278      	str	r0, [r7, #36]	; 0x24
 80068b0:	e012      	b.n	80068d8 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80068b2:	4b0c      	ldr	r3, [pc, #48]	; (80068e4 <xTimerGenericCommand+0x9c>)
 80068b4:	6818      	ldr	r0, [r3, #0]
 80068b6:	f107 0110 	add.w	r1, r7, #16
 80068ba:	2300      	movs	r3, #0
 80068bc:	2200      	movs	r2, #0
 80068be:	f7fe fc33 	bl	8005128 <xQueueGenericSend>
 80068c2:	6278      	str	r0, [r7, #36]	; 0x24
 80068c4:	e008      	b.n	80068d8 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80068c6:	4b07      	ldr	r3, [pc, #28]	; (80068e4 <xTimerGenericCommand+0x9c>)
 80068c8:	6818      	ldr	r0, [r3, #0]
 80068ca:	f107 0110 	add.w	r1, r7, #16
 80068ce:	2300      	movs	r3, #0
 80068d0:	683a      	ldr	r2, [r7, #0]
 80068d2:	f7fe fd2f 	bl	8005334 <xQueueGenericSendFromISR>
 80068d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3728      	adds	r7, #40	; 0x28
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	200015e0 	.word	0x200015e0

080068e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b088      	sub	sp, #32
 80068ec:	af02      	add	r7, sp, #8
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068f2:	4b23      	ldr	r3, [pc, #140]	; (8006980 <prvProcessExpiredTimer+0x98>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	3304      	adds	r3, #4
 8006900:	4618      	mov	r0, r3
 8006902:	f7fe fad7 	bl	8004eb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800690c:	f003 0304 	and.w	r3, r3, #4
 8006910:	2b00      	cmp	r3, #0
 8006912:	d024      	beq.n	800695e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	699a      	ldr	r2, [r3, #24]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	18d1      	adds	r1, r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	683a      	ldr	r2, [r7, #0]
 8006920:	6978      	ldr	r0, [r7, #20]
 8006922:	f000 f8d3 	bl	8006acc <prvInsertTimerInActiveList>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d021      	beq.n	8006970 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800692c:	2300      	movs	r3, #0
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	2300      	movs	r3, #0
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	2100      	movs	r1, #0
 8006936:	6978      	ldr	r0, [r7, #20]
 8006938:	f7ff ff86 	bl	8006848 <xTimerGenericCommand>
 800693c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d115      	bne.n	8006970 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8006944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006948:	b672      	cpsid	i
 800694a:	f383 8811 	msr	BASEPRI, r3
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	b662      	cpsie	i
 8006958:	60fb      	str	r3, [r7, #12]
}
 800695a:	bf00      	nop
 800695c:	e7fe      	b.n	800695c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006964:	f023 0301 	bic.w	r3, r3, #1
 8006968:	b2da      	uxtb	r2, r3
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	6a1b      	ldr	r3, [r3, #32]
 8006974:	6978      	ldr	r0, [r7, #20]
 8006976:	4798      	blx	r3
}
 8006978:	bf00      	nop
 800697a:	3718      	adds	r7, #24
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	200015d8 	.word	0x200015d8

08006984 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800698c:	f107 0308 	add.w	r3, r7, #8
 8006990:	4618      	mov	r0, r3
 8006992:	f000 f857 	bl	8006a44 <prvGetNextExpireTime>
 8006996:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	4619      	mov	r1, r3
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f000 f803 	bl	80069a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80069a2:	f000 f8d5 	bl	8006b50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069a6:	e7f1      	b.n	800698c <prvTimerTask+0x8>

080069a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80069b2:	f7ff fa1d 	bl	8005df0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069b6:	f107 0308 	add.w	r3, r7, #8
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 f866 	bl	8006a8c <prvSampleTimeNow>
 80069c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d130      	bne.n	8006a2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10a      	bne.n	80069e4 <prvProcessTimerOrBlockTask+0x3c>
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d806      	bhi.n	80069e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80069d6:	f7ff fa19 	bl	8005e0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80069da:	68f9      	ldr	r1, [r7, #12]
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f7ff ff83 	bl	80068e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80069e2:	e024      	b.n	8006a2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d008      	beq.n	80069fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80069ea:	4b13      	ldr	r3, [pc, #76]	; (8006a38 <prvProcessTimerOrBlockTask+0x90>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <prvProcessTimerOrBlockTask+0x50>
 80069f4:	2301      	movs	r3, #1
 80069f6:	e000      	b.n	80069fa <prvProcessTimerOrBlockTask+0x52>
 80069f8:	2300      	movs	r3, #0
 80069fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80069fc:	4b0f      	ldr	r3, [pc, #60]	; (8006a3c <prvProcessTimerOrBlockTask+0x94>)
 80069fe:	6818      	ldr	r0, [r3, #0]
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	4619      	mov	r1, r3
 8006a0a:	f7fe ff53 	bl	80058b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a0e:	f7ff f9fd 	bl	8005e0c <xTaskResumeAll>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10a      	bne.n	8006a2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006a18:	4b09      	ldr	r3, [pc, #36]	; (8006a40 <prvProcessTimerOrBlockTask+0x98>)
 8006a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a1e:	601a      	str	r2, [r3, #0]
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	f3bf 8f6f 	isb	sy
}
 8006a28:	e001      	b.n	8006a2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006a2a:	f7ff f9ef 	bl	8005e0c <xTaskResumeAll>
}
 8006a2e:	bf00      	nop
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	200015dc 	.word	0x200015dc
 8006a3c:	200015e0 	.word	0x200015e0
 8006a40:	e000ed04 	.word	0xe000ed04

08006a44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a4c:	4b0e      	ldr	r3, [pc, #56]	; (8006a88 <prvGetNextExpireTime+0x44>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <prvGetNextExpireTime+0x16>
 8006a56:	2201      	movs	r2, #1
 8006a58:	e000      	b.n	8006a5c <prvGetNextExpireTime+0x18>
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d105      	bne.n	8006a74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a68:	4b07      	ldr	r3, [pc, #28]	; (8006a88 <prvGetNextExpireTime+0x44>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	60fb      	str	r3, [r7, #12]
 8006a72:	e001      	b.n	8006a78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006a74:	2300      	movs	r3, #0
 8006a76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006a78:	68fb      	ldr	r3, [r7, #12]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	200015d8 	.word	0x200015d8

08006a8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006a94:	f7ff fa5a 	bl	8005f4c <xTaskGetTickCount>
 8006a98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006a9a:	4b0b      	ldr	r3, [pc, #44]	; (8006ac8 <prvSampleTimeNow+0x3c>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d205      	bcs.n	8006ab0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006aa4:	f000 f93c 	bl	8006d20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	601a      	str	r2, [r3, #0]
 8006aae:	e002      	b.n	8006ab6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006ab6:	4a04      	ldr	r2, [pc, #16]	; (8006ac8 <prvSampleTimeNow+0x3c>)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006abc:	68fb      	ldr	r3, [r7, #12]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	200015e8 	.word	0x200015e8

08006acc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
 8006ad8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006ada:	2300      	movs	r3, #0
 8006adc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d812      	bhi.n	8006b18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	1ad2      	subs	r2, r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d302      	bcc.n	8006b06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b00:	2301      	movs	r3, #1
 8006b02:	617b      	str	r3, [r7, #20]
 8006b04:	e01b      	b.n	8006b3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b06:	4b10      	ldr	r3, [pc, #64]	; (8006b48 <prvInsertTimerInActiveList+0x7c>)
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	4619      	mov	r1, r3
 8006b10:	4610      	mov	r0, r2
 8006b12:	f7fe f996 	bl	8004e42 <vListInsert>
 8006b16:	e012      	b.n	8006b3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d206      	bcs.n	8006b2e <prvInsertTimerInActiveList+0x62>
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d302      	bcc.n	8006b2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	617b      	str	r3, [r7, #20]
 8006b2c:	e007      	b.n	8006b3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b2e:	4b07      	ldr	r3, [pc, #28]	; (8006b4c <prvInsertTimerInActiveList+0x80>)
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	3304      	adds	r3, #4
 8006b36:	4619      	mov	r1, r3
 8006b38:	4610      	mov	r0, r2
 8006b3a:	f7fe f982 	bl	8004e42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006b3e:	697b      	ldr	r3, [r7, #20]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3718      	adds	r7, #24
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	200015dc 	.word	0x200015dc
 8006b4c:	200015d8 	.word	0x200015d8

08006b50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b08e      	sub	sp, #56	; 0x38
 8006b54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b56:	e0d0      	b.n	8006cfa <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	da1a      	bge.n	8006b94 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006b5e:	1d3b      	adds	r3, r7, #4
 8006b60:	3304      	adds	r3, #4
 8006b62:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10c      	bne.n	8006b84 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8006b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6e:	b672      	cpsid	i
 8006b70:	f383 8811 	msr	BASEPRI, r3
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	b662      	cpsie	i
 8006b7e:	61fb      	str	r3, [r7, #28]
}
 8006b80:	bf00      	nop
 8006b82:	e7fe      	b.n	8006b82 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b8a:	6850      	ldr	r0, [r2, #4]
 8006b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b8e:	6892      	ldr	r2, [r2, #8]
 8006b90:	4611      	mov	r1, r2
 8006b92:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	f2c0 80ae 	blt.w	8006cf8 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba2:	695b      	ldr	r3, [r3, #20]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d004      	beq.n	8006bb2 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006baa:	3304      	adds	r3, #4
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7fe f981 	bl	8004eb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bb2:	463b      	mov	r3, r7
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7ff ff69 	bl	8006a8c <prvSampleTimeNow>
 8006bba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b09      	cmp	r3, #9
 8006bc0:	f200 809b 	bhi.w	8006cfa <prvProcessReceivedCommands+0x1aa>
 8006bc4:	a201      	add	r2, pc, #4	; (adr r2, 8006bcc <prvProcessReceivedCommands+0x7c>)
 8006bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bca:	bf00      	nop
 8006bcc:	08006bf5 	.word	0x08006bf5
 8006bd0:	08006bf5 	.word	0x08006bf5
 8006bd4:	08006bf5 	.word	0x08006bf5
 8006bd8:	08006c6d 	.word	0x08006c6d
 8006bdc:	08006c81 	.word	0x08006c81
 8006be0:	08006ccf 	.word	0x08006ccf
 8006be4:	08006bf5 	.word	0x08006bf5
 8006be8:	08006bf5 	.word	0x08006bf5
 8006bec:	08006c6d 	.word	0x08006c6d
 8006bf0:	08006c81 	.word	0x08006c81
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bfa:	f043 0301 	orr.w	r3, r3, #1
 8006bfe:	b2da      	uxtb	r2, r3
 8006c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c06:	68ba      	ldr	r2, [r7, #8]
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	699b      	ldr	r3, [r3, #24]
 8006c0c:	18d1      	adds	r1, r2, r3
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c14:	f7ff ff5a 	bl	8006acc <prvInsertTimerInActiveList>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d06d      	beq.n	8006cfa <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c2c:	f003 0304 	and.w	r3, r3, #4
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d062      	beq.n	8006cfa <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	441a      	add	r2, r3
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	2300      	movs	r3, #0
 8006c42:	2100      	movs	r1, #0
 8006c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c46:	f7ff fdff 	bl	8006848 <xTimerGenericCommand>
 8006c4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d153      	bne.n	8006cfa <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8006c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c56:	b672      	cpsid	i
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	b662      	cpsie	i
 8006c66:	61bb      	str	r3, [r7, #24]
}
 8006c68:	bf00      	nop
 8006c6a:	e7fe      	b.n	8006c6a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c72:	f023 0301 	bic.w	r3, r3, #1
 8006c76:	b2da      	uxtb	r2, r3
 8006c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006c7e:	e03c      	b.n	8006cfa <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c86:	f043 0301 	orr.w	r3, r3, #1
 8006c8a:	b2da      	uxtb	r2, r3
 8006c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c96:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10c      	bne.n	8006cba <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8006ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca4:	b672      	cpsid	i
 8006ca6:	f383 8811 	msr	BASEPRI, r3
 8006caa:	f3bf 8f6f 	isb	sy
 8006cae:	f3bf 8f4f 	dsb	sy
 8006cb2:	b662      	cpsie	i
 8006cb4:	617b      	str	r3, [r7, #20]
}
 8006cb6:	bf00      	nop
 8006cb8:	e7fe      	b.n	8006cb8 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbc:	699a      	ldr	r2, [r3, #24]
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc0:	18d1      	adds	r1, r2, r3
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cc8:	f7ff ff00 	bl	8006acc <prvInsertTimerInActiveList>
					break;
 8006ccc:	e015      	b.n	8006cfa <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cd4:	f003 0302 	and.w	r3, r3, #2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d103      	bne.n	8006ce4 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006cdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cde:	f000 fbcb 	bl	8007478 <vPortFree>
 8006ce2:	e00a      	b.n	8006cfa <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cea:	f023 0301 	bic.w	r3, r3, #1
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006cf6:	e000      	b.n	8006cfa <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006cf8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006cfa:	4b08      	ldr	r3, [pc, #32]	; (8006d1c <prvProcessReceivedCommands+0x1cc>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	1d39      	adds	r1, r7, #4
 8006d00:	2200      	movs	r2, #0
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fe fbb6 	bl	8005474 <xQueueReceive>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f47f af24 	bne.w	8006b58 <prvProcessReceivedCommands+0x8>
	}
}
 8006d10:	bf00      	nop
 8006d12:	bf00      	nop
 8006d14:	3730      	adds	r7, #48	; 0x30
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	200015e0 	.word	0x200015e0

08006d20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b088      	sub	sp, #32
 8006d24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d26:	e04a      	b.n	8006dbe <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d28:	4b2e      	ldr	r3, [pc, #184]	; (8006de4 <prvSwitchTimerLists+0xc4>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d32:	4b2c      	ldr	r3, [pc, #176]	; (8006de4 <prvSwitchTimerLists+0xc4>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	3304      	adds	r3, #4
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7fe f8b7 	bl	8004eb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d54:	f003 0304 	and.w	r3, r3, #4
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d030      	beq.n	8006dbe <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	693a      	ldr	r2, [r7, #16]
 8006d62:	4413      	add	r3, r2
 8006d64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d90e      	bls.n	8006d8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d7a:	4b1a      	ldr	r3, [pc, #104]	; (8006de4 <prvSwitchTimerLists+0xc4>)
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	3304      	adds	r3, #4
 8006d82:	4619      	mov	r1, r3
 8006d84:	4610      	mov	r0, r2
 8006d86:	f7fe f85c 	bl	8004e42 <vListInsert>
 8006d8a:	e018      	b.n	8006dbe <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	2300      	movs	r3, #0
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	2100      	movs	r1, #0
 8006d96:	68f8      	ldr	r0, [r7, #12]
 8006d98:	f7ff fd56 	bl	8006848 <xTimerGenericCommand>
 8006d9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10c      	bne.n	8006dbe <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da8:	b672      	cpsid	i
 8006daa:	f383 8811 	msr	BASEPRI, r3
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f3bf 8f4f 	dsb	sy
 8006db6:	b662      	cpsie	i
 8006db8:	603b      	str	r3, [r7, #0]
}
 8006dba:	bf00      	nop
 8006dbc:	e7fe      	b.n	8006dbc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dbe:	4b09      	ldr	r3, [pc, #36]	; (8006de4 <prvSwitchTimerLists+0xc4>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1af      	bne.n	8006d28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006dc8:	4b06      	ldr	r3, [pc, #24]	; (8006de4 <prvSwitchTimerLists+0xc4>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006dce:	4b06      	ldr	r3, [pc, #24]	; (8006de8 <prvSwitchTimerLists+0xc8>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a04      	ldr	r2, [pc, #16]	; (8006de4 <prvSwitchTimerLists+0xc4>)
 8006dd4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006dd6:	4a04      	ldr	r2, [pc, #16]	; (8006de8 <prvSwitchTimerLists+0xc8>)
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	6013      	str	r3, [r2, #0]
}
 8006ddc:	bf00      	nop
 8006dde:	3718      	adds	r7, #24
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	200015d8 	.word	0x200015d8
 8006de8:	200015dc 	.word	0x200015dc

08006dec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006df2:	f000 f94b 	bl	800708c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006df6:	4b15      	ldr	r3, [pc, #84]	; (8006e4c <prvCheckForValidListAndQueue+0x60>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d120      	bne.n	8006e40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006dfe:	4814      	ldr	r0, [pc, #80]	; (8006e50 <prvCheckForValidListAndQueue+0x64>)
 8006e00:	f7fd ffce 	bl	8004da0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e04:	4813      	ldr	r0, [pc, #76]	; (8006e54 <prvCheckForValidListAndQueue+0x68>)
 8006e06:	f7fd ffcb 	bl	8004da0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e0a:	4b13      	ldr	r3, [pc, #76]	; (8006e58 <prvCheckForValidListAndQueue+0x6c>)
 8006e0c:	4a10      	ldr	r2, [pc, #64]	; (8006e50 <prvCheckForValidListAndQueue+0x64>)
 8006e0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e10:	4b12      	ldr	r3, [pc, #72]	; (8006e5c <prvCheckForValidListAndQueue+0x70>)
 8006e12:	4a10      	ldr	r2, [pc, #64]	; (8006e54 <prvCheckForValidListAndQueue+0x68>)
 8006e14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e16:	2300      	movs	r3, #0
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	4b11      	ldr	r3, [pc, #68]	; (8006e60 <prvCheckForValidListAndQueue+0x74>)
 8006e1c:	4a11      	ldr	r2, [pc, #68]	; (8006e64 <prvCheckForValidListAndQueue+0x78>)
 8006e1e:	2110      	movs	r1, #16
 8006e20:	200a      	movs	r0, #10
 8006e22:	f7fe f8db 	bl	8004fdc <xQueueGenericCreateStatic>
 8006e26:	4603      	mov	r3, r0
 8006e28:	4a08      	ldr	r2, [pc, #32]	; (8006e4c <prvCheckForValidListAndQueue+0x60>)
 8006e2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e2c:	4b07      	ldr	r3, [pc, #28]	; (8006e4c <prvCheckForValidListAndQueue+0x60>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d005      	beq.n	8006e40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e34:	4b05      	ldr	r3, [pc, #20]	; (8006e4c <prvCheckForValidListAndQueue+0x60>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	490b      	ldr	r1, [pc, #44]	; (8006e68 <prvCheckForValidListAndQueue+0x7c>)
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fe fd10 	bl	8005860 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e40:	f000 f958 	bl	80070f4 <vPortExitCritical>
}
 8006e44:	bf00      	nop
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	200015e0 	.word	0x200015e0
 8006e50:	200015b0 	.word	0x200015b0
 8006e54:	200015c4 	.word	0x200015c4
 8006e58:	200015d8 	.word	0x200015d8
 8006e5c:	200015dc 	.word	0x200015dc
 8006e60:	2000168c 	.word	0x2000168c
 8006e64:	200015ec 	.word	0x200015ec
 8006e68:	080078e0 	.word	0x080078e0

08006e6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	3b04      	subs	r3, #4
 8006e7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	3b04      	subs	r3, #4
 8006e8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	f023 0201 	bic.w	r2, r3, #1
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	3b04      	subs	r3, #4
 8006e9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006e9c:	4a0c      	ldr	r2, [pc, #48]	; (8006ed0 <pxPortInitialiseStack+0x64>)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	3b14      	subs	r3, #20
 8006ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	3b04      	subs	r3, #4
 8006eb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f06f 0202 	mvn.w	r2, #2
 8006eba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	3b20      	subs	r3, #32
 8006ec0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3714      	adds	r7, #20
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr
 8006ed0:	08006ed5 	.word	0x08006ed5

08006ed4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006eda:	2300      	movs	r3, #0
 8006edc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ede:	4b14      	ldr	r3, [pc, #80]	; (8006f30 <prvTaskExitError+0x5c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ee6:	d00c      	beq.n	8006f02 <prvTaskExitError+0x2e>
	__asm volatile
 8006ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eec:	b672      	cpsid	i
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	b662      	cpsie	i
 8006efc:	60fb      	str	r3, [r7, #12]
}
 8006efe:	bf00      	nop
 8006f00:	e7fe      	b.n	8006f00 <prvTaskExitError+0x2c>
	__asm volatile
 8006f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f06:	b672      	cpsid	i
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	b662      	cpsie	i
 8006f16:	60bb      	str	r3, [r7, #8]
}
 8006f18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f1a:	bf00      	nop
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d0fc      	beq.n	8006f1c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f22:	bf00      	nop
 8006f24:	bf00      	nop
 8006f26:	3714      	adds	r7, #20
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	20000014 	.word	0x20000014
	...

08006f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f40:	4b07      	ldr	r3, [pc, #28]	; (8006f60 <pxCurrentTCBConst2>)
 8006f42:	6819      	ldr	r1, [r3, #0]
 8006f44:	6808      	ldr	r0, [r1, #0]
 8006f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f4a:	f380 8809 	msr	PSP, r0
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f04f 0000 	mov.w	r0, #0
 8006f56:	f380 8811 	msr	BASEPRI, r0
 8006f5a:	4770      	bx	lr
 8006f5c:	f3af 8000 	nop.w

08006f60 <pxCurrentTCBConst2>:
 8006f60:	200010b0 	.word	0x200010b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f64:	bf00      	nop
 8006f66:	bf00      	nop

08006f68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f68:	4808      	ldr	r0, [pc, #32]	; (8006f8c <prvPortStartFirstTask+0x24>)
 8006f6a:	6800      	ldr	r0, [r0, #0]
 8006f6c:	6800      	ldr	r0, [r0, #0]
 8006f6e:	f380 8808 	msr	MSP, r0
 8006f72:	f04f 0000 	mov.w	r0, #0
 8006f76:	f380 8814 	msr	CONTROL, r0
 8006f7a:	b662      	cpsie	i
 8006f7c:	b661      	cpsie	f
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	df00      	svc	0
 8006f88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f8a:	bf00      	nop
 8006f8c:	e000ed08 	.word	0xe000ed08

08006f90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f96:	4b37      	ldr	r3, [pc, #220]	; (8007074 <xPortStartScheduler+0xe4>)
 8006f98:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	22ff      	movs	r2, #255	; 0xff
 8006fa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006fb0:	78fb      	ldrb	r3, [r7, #3]
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	4b2f      	ldr	r3, [pc, #188]	; (8007078 <xPortStartScheduler+0xe8>)
 8006fbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006fbe:	4b2f      	ldr	r3, [pc, #188]	; (800707c <xPortStartScheduler+0xec>)
 8006fc0:	2207      	movs	r2, #7
 8006fc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fc4:	e009      	b.n	8006fda <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006fc6:	4b2d      	ldr	r3, [pc, #180]	; (800707c <xPortStartScheduler+0xec>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	4a2b      	ldr	r2, [pc, #172]	; (800707c <xPortStartScheduler+0xec>)
 8006fce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006fd0:	78fb      	ldrb	r3, [r7, #3]
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	005b      	lsls	r3, r3, #1
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fda:	78fb      	ldrb	r3, [r7, #3]
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe2:	2b80      	cmp	r3, #128	; 0x80
 8006fe4:	d0ef      	beq.n	8006fc6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006fe6:	4b25      	ldr	r3, [pc, #148]	; (800707c <xPortStartScheduler+0xec>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f1c3 0307 	rsb	r3, r3, #7
 8006fee:	2b04      	cmp	r3, #4
 8006ff0:	d00c      	beq.n	800700c <xPortStartScheduler+0x7c>
	__asm volatile
 8006ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff6:	b672      	cpsid	i
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	b662      	cpsie	i
 8007006:	60bb      	str	r3, [r7, #8]
}
 8007008:	bf00      	nop
 800700a:	e7fe      	b.n	800700a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800700c:	4b1b      	ldr	r3, [pc, #108]	; (800707c <xPortStartScheduler+0xec>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	021b      	lsls	r3, r3, #8
 8007012:	4a1a      	ldr	r2, [pc, #104]	; (800707c <xPortStartScheduler+0xec>)
 8007014:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007016:	4b19      	ldr	r3, [pc, #100]	; (800707c <xPortStartScheduler+0xec>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800701e:	4a17      	ldr	r2, [pc, #92]	; (800707c <xPortStartScheduler+0xec>)
 8007020:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	b2da      	uxtb	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800702a:	4b15      	ldr	r3, [pc, #84]	; (8007080 <xPortStartScheduler+0xf0>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a14      	ldr	r2, [pc, #80]	; (8007080 <xPortStartScheduler+0xf0>)
 8007030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007034:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007036:	4b12      	ldr	r3, [pc, #72]	; (8007080 <xPortStartScheduler+0xf0>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a11      	ldr	r2, [pc, #68]	; (8007080 <xPortStartScheduler+0xf0>)
 800703c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007040:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007042:	f000 f8dd 	bl	8007200 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007046:	4b0f      	ldr	r3, [pc, #60]	; (8007084 <xPortStartScheduler+0xf4>)
 8007048:	2200      	movs	r2, #0
 800704a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800704c:	f000 f8fc 	bl	8007248 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007050:	4b0d      	ldr	r3, [pc, #52]	; (8007088 <xPortStartScheduler+0xf8>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a0c      	ldr	r2, [pc, #48]	; (8007088 <xPortStartScheduler+0xf8>)
 8007056:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800705a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800705c:	f7ff ff84 	bl	8006f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007060:	f7ff f840 	bl	80060e4 <vTaskSwitchContext>
	prvTaskExitError();
 8007064:	f7ff ff36 	bl	8006ed4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	e000e400 	.word	0xe000e400
 8007078:	200016dc 	.word	0x200016dc
 800707c:	200016e0 	.word	0x200016e0
 8007080:	e000ed20 	.word	0xe000ed20
 8007084:	20000014 	.word	0x20000014
 8007088:	e000ef34 	.word	0xe000ef34

0800708c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
	__asm volatile
 8007092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007096:	b672      	cpsid	i
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	b662      	cpsie	i
 80070a6:	607b      	str	r3, [r7, #4]
}
 80070a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80070aa:	4b10      	ldr	r3, [pc, #64]	; (80070ec <vPortEnterCritical+0x60>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	3301      	adds	r3, #1
 80070b0:	4a0e      	ldr	r2, [pc, #56]	; (80070ec <vPortEnterCritical+0x60>)
 80070b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80070b4:	4b0d      	ldr	r3, [pc, #52]	; (80070ec <vPortEnterCritical+0x60>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d111      	bne.n	80070e0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80070bc:	4b0c      	ldr	r3, [pc, #48]	; (80070f0 <vPortEnterCritical+0x64>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00c      	beq.n	80070e0 <vPortEnterCritical+0x54>
	__asm volatile
 80070c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ca:	b672      	cpsid	i
 80070cc:	f383 8811 	msr	BASEPRI, r3
 80070d0:	f3bf 8f6f 	isb	sy
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	b662      	cpsie	i
 80070da:	603b      	str	r3, [r7, #0]
}
 80070dc:	bf00      	nop
 80070de:	e7fe      	b.n	80070de <vPortEnterCritical+0x52>
	}
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	20000014 	.word	0x20000014
 80070f0:	e000ed04 	.word	0xe000ed04

080070f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80070fa:	4b13      	ldr	r3, [pc, #76]	; (8007148 <vPortExitCritical+0x54>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10c      	bne.n	800711c <vPortExitCritical+0x28>
	__asm volatile
 8007102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007106:	b672      	cpsid	i
 8007108:	f383 8811 	msr	BASEPRI, r3
 800710c:	f3bf 8f6f 	isb	sy
 8007110:	f3bf 8f4f 	dsb	sy
 8007114:	b662      	cpsie	i
 8007116:	607b      	str	r3, [r7, #4]
}
 8007118:	bf00      	nop
 800711a:	e7fe      	b.n	800711a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800711c:	4b0a      	ldr	r3, [pc, #40]	; (8007148 <vPortExitCritical+0x54>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	3b01      	subs	r3, #1
 8007122:	4a09      	ldr	r2, [pc, #36]	; (8007148 <vPortExitCritical+0x54>)
 8007124:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007126:	4b08      	ldr	r3, [pc, #32]	; (8007148 <vPortExitCritical+0x54>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d105      	bne.n	800713a <vPortExitCritical+0x46>
 800712e:	2300      	movs	r3, #0
 8007130:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	f383 8811 	msr	BASEPRI, r3
}
 8007138:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800713a:	bf00      	nop
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	20000014 	.word	0x20000014
 800714c:	00000000 	.word	0x00000000

08007150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007150:	f3ef 8009 	mrs	r0, PSP
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	4b15      	ldr	r3, [pc, #84]	; (80071b0 <pxCurrentTCBConst>)
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	f01e 0f10 	tst.w	lr, #16
 8007160:	bf08      	it	eq
 8007162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800716a:	6010      	str	r0, [r2, #0]
 800716c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007170:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007174:	b672      	cpsid	i
 8007176:	f380 8811 	msr	BASEPRI, r0
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	b662      	cpsie	i
 8007184:	f7fe ffae 	bl	80060e4 <vTaskSwitchContext>
 8007188:	f04f 0000 	mov.w	r0, #0
 800718c:	f380 8811 	msr	BASEPRI, r0
 8007190:	bc09      	pop	{r0, r3}
 8007192:	6819      	ldr	r1, [r3, #0]
 8007194:	6808      	ldr	r0, [r1, #0]
 8007196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800719a:	f01e 0f10 	tst.w	lr, #16
 800719e:	bf08      	it	eq
 80071a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80071a4:	f380 8809 	msr	PSP, r0
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop

080071b0 <pxCurrentTCBConst>:
 80071b0:	200010b0 	.word	0x200010b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80071b4:	bf00      	nop
 80071b6:	bf00      	nop

080071b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
	__asm volatile
 80071be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c2:	b672      	cpsid	i
 80071c4:	f383 8811 	msr	BASEPRI, r3
 80071c8:	f3bf 8f6f 	isb	sy
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	b662      	cpsie	i
 80071d2:	607b      	str	r3, [r7, #4]
}
 80071d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80071d6:	f7fe fec9 	bl	8005f6c <xTaskIncrementTick>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d003      	beq.n	80071e8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80071e0:	4b06      	ldr	r3, [pc, #24]	; (80071fc <SysTick_Handler+0x44>)
 80071e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071e6:	601a      	str	r2, [r3, #0]
 80071e8:	2300      	movs	r3, #0
 80071ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	f383 8811 	msr	BASEPRI, r3
}
 80071f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80071f4:	bf00      	nop
 80071f6:	3708      	adds	r7, #8
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	e000ed04 	.word	0xe000ed04

08007200 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007200:	b480      	push	{r7}
 8007202:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007204:	4b0b      	ldr	r3, [pc, #44]	; (8007234 <vPortSetupTimerInterrupt+0x34>)
 8007206:	2200      	movs	r2, #0
 8007208:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800720a:	4b0b      	ldr	r3, [pc, #44]	; (8007238 <vPortSetupTimerInterrupt+0x38>)
 800720c:	2200      	movs	r2, #0
 800720e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007210:	4b0a      	ldr	r3, [pc, #40]	; (800723c <vPortSetupTimerInterrupt+0x3c>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a0a      	ldr	r2, [pc, #40]	; (8007240 <vPortSetupTimerInterrupt+0x40>)
 8007216:	fba2 2303 	umull	r2, r3, r2, r3
 800721a:	099b      	lsrs	r3, r3, #6
 800721c:	4a09      	ldr	r2, [pc, #36]	; (8007244 <vPortSetupTimerInterrupt+0x44>)
 800721e:	3b01      	subs	r3, #1
 8007220:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007222:	4b04      	ldr	r3, [pc, #16]	; (8007234 <vPortSetupTimerInterrupt+0x34>)
 8007224:	2207      	movs	r2, #7
 8007226:	601a      	str	r2, [r3, #0]
}
 8007228:	bf00      	nop
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	e000e010 	.word	0xe000e010
 8007238:	e000e018 	.word	0xe000e018
 800723c:	20000008 	.word	0x20000008
 8007240:	10624dd3 	.word	0x10624dd3
 8007244:	e000e014 	.word	0xe000e014

08007248 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007248:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007258 <vPortEnableVFP+0x10>
 800724c:	6801      	ldr	r1, [r0, #0]
 800724e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007252:	6001      	str	r1, [r0, #0]
 8007254:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007256:	bf00      	nop
 8007258:	e000ed88 	.word	0xe000ed88

0800725c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800725c:	b480      	push	{r7}
 800725e:	b085      	sub	sp, #20
 8007260:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007262:	f3ef 8305 	mrs	r3, IPSR
 8007266:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2b0f      	cmp	r3, #15
 800726c:	d916      	bls.n	800729c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800726e:	4a19      	ldr	r2, [pc, #100]	; (80072d4 <vPortValidateInterruptPriority+0x78>)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	4413      	add	r3, r2
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007278:	4b17      	ldr	r3, [pc, #92]	; (80072d8 <vPortValidateInterruptPriority+0x7c>)
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	7afa      	ldrb	r2, [r7, #11]
 800727e:	429a      	cmp	r2, r3
 8007280:	d20c      	bcs.n	800729c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007286:	b672      	cpsid	i
 8007288:	f383 8811 	msr	BASEPRI, r3
 800728c:	f3bf 8f6f 	isb	sy
 8007290:	f3bf 8f4f 	dsb	sy
 8007294:	b662      	cpsie	i
 8007296:	607b      	str	r3, [r7, #4]
}
 8007298:	bf00      	nop
 800729a:	e7fe      	b.n	800729a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800729c:	4b0f      	ldr	r3, [pc, #60]	; (80072dc <vPortValidateInterruptPriority+0x80>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80072a4:	4b0e      	ldr	r3, [pc, #56]	; (80072e0 <vPortValidateInterruptPriority+0x84>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d90c      	bls.n	80072c6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80072ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b0:	b672      	cpsid	i
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	b662      	cpsie	i
 80072c0:	603b      	str	r3, [r7, #0]
}
 80072c2:	bf00      	nop
 80072c4:	e7fe      	b.n	80072c4 <vPortValidateInterruptPriority+0x68>
	}
 80072c6:	bf00      	nop
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	e000e3f0 	.word	0xe000e3f0
 80072d8:	200016dc 	.word	0x200016dc
 80072dc:	e000ed0c 	.word	0xe000ed0c
 80072e0:	200016e0 	.word	0x200016e0

080072e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b08a      	sub	sp, #40	; 0x28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80072ec:	2300      	movs	r3, #0
 80072ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80072f0:	f7fe fd7e 	bl	8005df0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80072f4:	4b5b      	ldr	r3, [pc, #364]	; (8007464 <pvPortMalloc+0x180>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d101      	bne.n	8007300 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80072fc:	f000 f91a 	bl	8007534 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007300:	4b59      	ldr	r3, [pc, #356]	; (8007468 <pvPortMalloc+0x184>)
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4013      	ands	r3, r2
 8007308:	2b00      	cmp	r3, #0
 800730a:	f040 8092 	bne.w	8007432 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d01f      	beq.n	8007354 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007314:	2208      	movs	r2, #8
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4413      	add	r3, r2
 800731a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f003 0307 	and.w	r3, r3, #7
 8007322:	2b00      	cmp	r3, #0
 8007324:	d016      	beq.n	8007354 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f023 0307 	bic.w	r3, r3, #7
 800732c:	3308      	adds	r3, #8
 800732e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f003 0307 	and.w	r3, r3, #7
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00c      	beq.n	8007354 <pvPortMalloc+0x70>
	__asm volatile
 800733a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733e:	b672      	cpsid	i
 8007340:	f383 8811 	msr	BASEPRI, r3
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	b662      	cpsie	i
 800734e:	617b      	str	r3, [r7, #20]
}
 8007350:	bf00      	nop
 8007352:	e7fe      	b.n	8007352 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d06b      	beq.n	8007432 <pvPortMalloc+0x14e>
 800735a:	4b44      	ldr	r3, [pc, #272]	; (800746c <pvPortMalloc+0x188>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	429a      	cmp	r2, r3
 8007362:	d866      	bhi.n	8007432 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007364:	4b42      	ldr	r3, [pc, #264]	; (8007470 <pvPortMalloc+0x18c>)
 8007366:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007368:	4b41      	ldr	r3, [pc, #260]	; (8007470 <pvPortMalloc+0x18c>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800736e:	e004      	b.n	800737a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007372:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800737a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	429a      	cmp	r2, r3
 8007382:	d903      	bls.n	800738c <pvPortMalloc+0xa8>
 8007384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1f1      	bne.n	8007370 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800738c:	4b35      	ldr	r3, [pc, #212]	; (8007464 <pvPortMalloc+0x180>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007392:	429a      	cmp	r2, r3
 8007394:	d04d      	beq.n	8007432 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007396:	6a3b      	ldr	r3, [r7, #32]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2208      	movs	r2, #8
 800739c:	4413      	add	r3, r2
 800739e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80073a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	6a3b      	ldr	r3, [r7, #32]
 80073a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80073a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073aa:	685a      	ldr	r2, [r3, #4]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	1ad2      	subs	r2, r2, r3
 80073b0:	2308      	movs	r3, #8
 80073b2:	005b      	lsls	r3, r3, #1
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d921      	bls.n	80073fc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4413      	add	r3, r2
 80073be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	f003 0307 	and.w	r3, r3, #7
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00c      	beq.n	80073e4 <pvPortMalloc+0x100>
	__asm volatile
 80073ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ce:	b672      	cpsid	i
 80073d0:	f383 8811 	msr	BASEPRI, r3
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	b662      	cpsie	i
 80073de:	613b      	str	r3, [r7, #16]
}
 80073e0:	bf00      	nop
 80073e2:	e7fe      	b.n	80073e2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	685a      	ldr	r2, [r3, #4]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	1ad2      	subs	r2, r2, r3
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073f6:	69b8      	ldr	r0, [r7, #24]
 80073f8:	f000 f8fe 	bl	80075f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073fc:	4b1b      	ldr	r3, [pc, #108]	; (800746c <pvPortMalloc+0x188>)
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	4a19      	ldr	r2, [pc, #100]	; (800746c <pvPortMalloc+0x188>)
 8007408:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800740a:	4b18      	ldr	r3, [pc, #96]	; (800746c <pvPortMalloc+0x188>)
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	4b19      	ldr	r3, [pc, #100]	; (8007474 <pvPortMalloc+0x190>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	429a      	cmp	r2, r3
 8007414:	d203      	bcs.n	800741e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007416:	4b15      	ldr	r3, [pc, #84]	; (800746c <pvPortMalloc+0x188>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a16      	ldr	r2, [pc, #88]	; (8007474 <pvPortMalloc+0x190>)
 800741c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	685a      	ldr	r2, [r3, #4]
 8007422:	4b11      	ldr	r3, [pc, #68]	; (8007468 <pvPortMalloc+0x184>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	431a      	orrs	r2, r3
 8007428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800742c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742e:	2200      	movs	r2, #0
 8007430:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007432:	f7fe fceb 	bl	8005e0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	f003 0307 	and.w	r3, r3, #7
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00c      	beq.n	800745a <pvPortMalloc+0x176>
	__asm volatile
 8007440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007444:	b672      	cpsid	i
 8007446:	f383 8811 	msr	BASEPRI, r3
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	b662      	cpsie	i
 8007454:	60fb      	str	r3, [r7, #12]
}
 8007456:	bf00      	nop
 8007458:	e7fe      	b.n	8007458 <pvPortMalloc+0x174>
	return pvReturn;
 800745a:	69fb      	ldr	r3, [r7, #28]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3728      	adds	r7, #40	; 0x28
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	200052ec 	.word	0x200052ec
 8007468:	200052f8 	.word	0x200052f8
 800746c:	200052f0 	.word	0x200052f0
 8007470:	200052e4 	.word	0x200052e4
 8007474:	200052f4 	.word	0x200052f4

08007478 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d04c      	beq.n	8007524 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800748a:	2308      	movs	r3, #8
 800748c:	425b      	negs	r3, r3
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	4413      	add	r3, r2
 8007492:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	4b23      	ldr	r3, [pc, #140]	; (800752c <vPortFree+0xb4>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4013      	ands	r3, r2
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10c      	bne.n	80074c0 <vPortFree+0x48>
	__asm volatile
 80074a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074aa:	b672      	cpsid	i
 80074ac:	f383 8811 	msr	BASEPRI, r3
 80074b0:	f3bf 8f6f 	isb	sy
 80074b4:	f3bf 8f4f 	dsb	sy
 80074b8:	b662      	cpsie	i
 80074ba:	60fb      	str	r3, [r7, #12]
}
 80074bc:	bf00      	nop
 80074be:	e7fe      	b.n	80074be <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00c      	beq.n	80074e2 <vPortFree+0x6a>
	__asm volatile
 80074c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074cc:	b672      	cpsid	i
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	b662      	cpsie	i
 80074dc:	60bb      	str	r3, [r7, #8]
}
 80074de:	bf00      	nop
 80074e0:	e7fe      	b.n	80074e0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	685a      	ldr	r2, [r3, #4]
 80074e6:	4b11      	ldr	r3, [pc, #68]	; (800752c <vPortFree+0xb4>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4013      	ands	r3, r2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d019      	beq.n	8007524 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d115      	bne.n	8007524 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	4b0b      	ldr	r3, [pc, #44]	; (800752c <vPortFree+0xb4>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	43db      	mvns	r3, r3
 8007502:	401a      	ands	r2, r3
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007508:	f7fe fc72 	bl	8005df0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	685a      	ldr	r2, [r3, #4]
 8007510:	4b07      	ldr	r3, [pc, #28]	; (8007530 <vPortFree+0xb8>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4413      	add	r3, r2
 8007516:	4a06      	ldr	r2, [pc, #24]	; (8007530 <vPortFree+0xb8>)
 8007518:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800751a:	6938      	ldr	r0, [r7, #16]
 800751c:	f000 f86c 	bl	80075f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007520:	f7fe fc74 	bl	8005e0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007524:	bf00      	nop
 8007526:	3718      	adds	r7, #24
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	200052f8 	.word	0x200052f8
 8007530:	200052f0 	.word	0x200052f0

08007534 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800753a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800753e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007540:	4b27      	ldr	r3, [pc, #156]	; (80075e0 <prvHeapInit+0xac>)
 8007542:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f003 0307 	and.w	r3, r3, #7
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00c      	beq.n	8007568 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	3307      	adds	r3, #7
 8007552:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f023 0307 	bic.w	r3, r3, #7
 800755a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	4a1f      	ldr	r2, [pc, #124]	; (80075e0 <prvHeapInit+0xac>)
 8007564:	4413      	add	r3, r2
 8007566:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800756c:	4a1d      	ldr	r2, [pc, #116]	; (80075e4 <prvHeapInit+0xb0>)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007572:	4b1c      	ldr	r3, [pc, #112]	; (80075e4 <prvHeapInit+0xb0>)
 8007574:	2200      	movs	r2, #0
 8007576:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	68ba      	ldr	r2, [r7, #8]
 800757c:	4413      	add	r3, r2
 800757e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007580:	2208      	movs	r2, #8
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	1a9b      	subs	r3, r3, r2
 8007586:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f023 0307 	bic.w	r3, r3, #7
 800758e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	4a15      	ldr	r2, [pc, #84]	; (80075e8 <prvHeapInit+0xb4>)
 8007594:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007596:	4b14      	ldr	r3, [pc, #80]	; (80075e8 <prvHeapInit+0xb4>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2200      	movs	r2, #0
 800759c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800759e:	4b12      	ldr	r3, [pc, #72]	; (80075e8 <prvHeapInit+0xb4>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2200      	movs	r2, #0
 80075a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	1ad2      	subs	r2, r2, r3
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80075b4:	4b0c      	ldr	r3, [pc, #48]	; (80075e8 <prvHeapInit+0xb4>)
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	4a0a      	ldr	r2, [pc, #40]	; (80075ec <prvHeapInit+0xb8>)
 80075c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	4a09      	ldr	r2, [pc, #36]	; (80075f0 <prvHeapInit+0xbc>)
 80075ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80075cc:	4b09      	ldr	r3, [pc, #36]	; (80075f4 <prvHeapInit+0xc0>)
 80075ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80075d2:	601a      	str	r2, [r3, #0]
}
 80075d4:	bf00      	nop
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr
 80075e0:	200016e4 	.word	0x200016e4
 80075e4:	200052e4 	.word	0x200052e4
 80075e8:	200052ec 	.word	0x200052ec
 80075ec:	200052f4 	.word	0x200052f4
 80075f0:	200052f0 	.word	0x200052f0
 80075f4:	200052f8 	.word	0x200052f8

080075f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007600:	4b28      	ldr	r3, [pc, #160]	; (80076a4 <prvInsertBlockIntoFreeList+0xac>)
 8007602:	60fb      	str	r3, [r7, #12]
 8007604:	e002      	b.n	800760c <prvInsertBlockIntoFreeList+0x14>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	60fb      	str	r3, [r7, #12]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	429a      	cmp	r2, r3
 8007614:	d8f7      	bhi.n	8007606 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	4413      	add	r3, r2
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	429a      	cmp	r2, r3
 8007626:	d108      	bne.n	800763a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	441a      	add	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	441a      	add	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	429a      	cmp	r2, r3
 800764c:	d118      	bne.n	8007680 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	4b15      	ldr	r3, [pc, #84]	; (80076a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	429a      	cmp	r2, r3
 8007658:	d00d      	beq.n	8007676 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685a      	ldr	r2, [r3, #4]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	441a      	add	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	e008      	b.n	8007688 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007676:	4b0c      	ldr	r3, [pc, #48]	; (80076a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	e003      	b.n	8007688 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	429a      	cmp	r2, r3
 800768e:	d002      	beq.n	8007696 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007696:	bf00      	nop
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	200052e4 	.word	0x200052e4
 80076a8:	200052ec 	.word	0x200052ec

080076ac <__libc_init_array>:
 80076ac:	b570      	push	{r4, r5, r6, lr}
 80076ae:	4d0d      	ldr	r5, [pc, #52]	; (80076e4 <__libc_init_array+0x38>)
 80076b0:	4c0d      	ldr	r4, [pc, #52]	; (80076e8 <__libc_init_array+0x3c>)
 80076b2:	1b64      	subs	r4, r4, r5
 80076b4:	10a4      	asrs	r4, r4, #2
 80076b6:	2600      	movs	r6, #0
 80076b8:	42a6      	cmp	r6, r4
 80076ba:	d109      	bne.n	80076d0 <__libc_init_array+0x24>
 80076bc:	4d0b      	ldr	r5, [pc, #44]	; (80076ec <__libc_init_array+0x40>)
 80076be:	4c0c      	ldr	r4, [pc, #48]	; (80076f0 <__libc_init_array+0x44>)
 80076c0:	f000 f8f2 	bl	80078a8 <_init>
 80076c4:	1b64      	subs	r4, r4, r5
 80076c6:	10a4      	asrs	r4, r4, #2
 80076c8:	2600      	movs	r6, #0
 80076ca:	42a6      	cmp	r6, r4
 80076cc:	d105      	bne.n	80076da <__libc_init_array+0x2e>
 80076ce:	bd70      	pop	{r4, r5, r6, pc}
 80076d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80076d4:	4798      	blx	r3
 80076d6:	3601      	adds	r6, #1
 80076d8:	e7ee      	b.n	80076b8 <__libc_init_array+0xc>
 80076da:	f855 3b04 	ldr.w	r3, [r5], #4
 80076de:	4798      	blx	r3
 80076e0:	3601      	adds	r6, #1
 80076e2:	e7f2      	b.n	80076ca <__libc_init_array+0x1e>
 80076e4:	080079b0 	.word	0x080079b0
 80076e8:	080079b0 	.word	0x080079b0
 80076ec:	080079b0 	.word	0x080079b0
 80076f0:	080079b4 	.word	0x080079b4

080076f4 <__retarget_lock_acquire_recursive>:
 80076f4:	4770      	bx	lr

080076f6 <__retarget_lock_release_recursive>:
 80076f6:	4770      	bx	lr

080076f8 <memcpy>:
 80076f8:	440a      	add	r2, r1
 80076fa:	4291      	cmp	r1, r2
 80076fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007700:	d100      	bne.n	8007704 <memcpy+0xc>
 8007702:	4770      	bx	lr
 8007704:	b510      	push	{r4, lr}
 8007706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800770a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800770e:	4291      	cmp	r1, r2
 8007710:	d1f9      	bne.n	8007706 <memcpy+0xe>
 8007712:	bd10      	pop	{r4, pc}

08007714 <memset>:
 8007714:	4402      	add	r2, r0
 8007716:	4603      	mov	r3, r0
 8007718:	4293      	cmp	r3, r2
 800771a:	d100      	bne.n	800771e <memset+0xa>
 800771c:	4770      	bx	lr
 800771e:	f803 1b01 	strb.w	r1, [r3], #1
 8007722:	e7f9      	b.n	8007718 <memset+0x4>

08007724 <cleanup_glue>:
 8007724:	b538      	push	{r3, r4, r5, lr}
 8007726:	460c      	mov	r4, r1
 8007728:	6809      	ldr	r1, [r1, #0]
 800772a:	4605      	mov	r5, r0
 800772c:	b109      	cbz	r1, 8007732 <cleanup_glue+0xe>
 800772e:	f7ff fff9 	bl	8007724 <cleanup_glue>
 8007732:	4621      	mov	r1, r4
 8007734:	4628      	mov	r0, r5
 8007736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800773a:	f000 b869 	b.w	8007810 <_free_r>
	...

08007740 <_reclaim_reent>:
 8007740:	4b2c      	ldr	r3, [pc, #176]	; (80077f4 <_reclaim_reent+0xb4>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4283      	cmp	r3, r0
 8007746:	b570      	push	{r4, r5, r6, lr}
 8007748:	4604      	mov	r4, r0
 800774a:	d051      	beq.n	80077f0 <_reclaim_reent+0xb0>
 800774c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800774e:	b143      	cbz	r3, 8007762 <_reclaim_reent+0x22>
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d14a      	bne.n	80077ec <_reclaim_reent+0xac>
 8007756:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007758:	6819      	ldr	r1, [r3, #0]
 800775a:	b111      	cbz	r1, 8007762 <_reclaim_reent+0x22>
 800775c:	4620      	mov	r0, r4
 800775e:	f000 f857 	bl	8007810 <_free_r>
 8007762:	6961      	ldr	r1, [r4, #20]
 8007764:	b111      	cbz	r1, 800776c <_reclaim_reent+0x2c>
 8007766:	4620      	mov	r0, r4
 8007768:	f000 f852 	bl	8007810 <_free_r>
 800776c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800776e:	b111      	cbz	r1, 8007776 <_reclaim_reent+0x36>
 8007770:	4620      	mov	r0, r4
 8007772:	f000 f84d 	bl	8007810 <_free_r>
 8007776:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007778:	b111      	cbz	r1, 8007780 <_reclaim_reent+0x40>
 800777a:	4620      	mov	r0, r4
 800777c:	f000 f848 	bl	8007810 <_free_r>
 8007780:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007782:	b111      	cbz	r1, 800778a <_reclaim_reent+0x4a>
 8007784:	4620      	mov	r0, r4
 8007786:	f000 f843 	bl	8007810 <_free_r>
 800778a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800778c:	b111      	cbz	r1, 8007794 <_reclaim_reent+0x54>
 800778e:	4620      	mov	r0, r4
 8007790:	f000 f83e 	bl	8007810 <_free_r>
 8007794:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007796:	b111      	cbz	r1, 800779e <_reclaim_reent+0x5e>
 8007798:	4620      	mov	r0, r4
 800779a:	f000 f839 	bl	8007810 <_free_r>
 800779e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80077a0:	b111      	cbz	r1, 80077a8 <_reclaim_reent+0x68>
 80077a2:	4620      	mov	r0, r4
 80077a4:	f000 f834 	bl	8007810 <_free_r>
 80077a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077aa:	b111      	cbz	r1, 80077b2 <_reclaim_reent+0x72>
 80077ac:	4620      	mov	r0, r4
 80077ae:	f000 f82f 	bl	8007810 <_free_r>
 80077b2:	69a3      	ldr	r3, [r4, #24]
 80077b4:	b1e3      	cbz	r3, 80077f0 <_reclaim_reent+0xb0>
 80077b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80077b8:	4620      	mov	r0, r4
 80077ba:	4798      	blx	r3
 80077bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80077be:	b1b9      	cbz	r1, 80077f0 <_reclaim_reent+0xb0>
 80077c0:	4620      	mov	r0, r4
 80077c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80077c6:	f7ff bfad 	b.w	8007724 <cleanup_glue>
 80077ca:	5949      	ldr	r1, [r1, r5]
 80077cc:	b941      	cbnz	r1, 80077e0 <_reclaim_reent+0xa0>
 80077ce:	3504      	adds	r5, #4
 80077d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077d2:	2d80      	cmp	r5, #128	; 0x80
 80077d4:	68d9      	ldr	r1, [r3, #12]
 80077d6:	d1f8      	bne.n	80077ca <_reclaim_reent+0x8a>
 80077d8:	4620      	mov	r0, r4
 80077da:	f000 f819 	bl	8007810 <_free_r>
 80077de:	e7ba      	b.n	8007756 <_reclaim_reent+0x16>
 80077e0:	680e      	ldr	r6, [r1, #0]
 80077e2:	4620      	mov	r0, r4
 80077e4:	f000 f814 	bl	8007810 <_free_r>
 80077e8:	4631      	mov	r1, r6
 80077ea:	e7ef      	b.n	80077cc <_reclaim_reent+0x8c>
 80077ec:	2500      	movs	r5, #0
 80077ee:	e7ef      	b.n	80077d0 <_reclaim_reent+0x90>
 80077f0:	bd70      	pop	{r4, r5, r6, pc}
 80077f2:	bf00      	nop
 80077f4:	20000018 	.word	0x20000018

080077f8 <__malloc_lock>:
 80077f8:	4801      	ldr	r0, [pc, #4]	; (8007800 <__malloc_lock+0x8>)
 80077fa:	f7ff bf7b 	b.w	80076f4 <__retarget_lock_acquire_recursive>
 80077fe:	bf00      	nop
 8007800:	200052fc 	.word	0x200052fc

08007804 <__malloc_unlock>:
 8007804:	4801      	ldr	r0, [pc, #4]	; (800780c <__malloc_unlock+0x8>)
 8007806:	f7ff bf76 	b.w	80076f6 <__retarget_lock_release_recursive>
 800780a:	bf00      	nop
 800780c:	200052fc 	.word	0x200052fc

08007810 <_free_r>:
 8007810:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007812:	2900      	cmp	r1, #0
 8007814:	d044      	beq.n	80078a0 <_free_r+0x90>
 8007816:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800781a:	9001      	str	r0, [sp, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	f1a1 0404 	sub.w	r4, r1, #4
 8007822:	bfb8      	it	lt
 8007824:	18e4      	addlt	r4, r4, r3
 8007826:	f7ff ffe7 	bl	80077f8 <__malloc_lock>
 800782a:	4a1e      	ldr	r2, [pc, #120]	; (80078a4 <_free_r+0x94>)
 800782c:	9801      	ldr	r0, [sp, #4]
 800782e:	6813      	ldr	r3, [r2, #0]
 8007830:	b933      	cbnz	r3, 8007840 <_free_r+0x30>
 8007832:	6063      	str	r3, [r4, #4]
 8007834:	6014      	str	r4, [r2, #0]
 8007836:	b003      	add	sp, #12
 8007838:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800783c:	f7ff bfe2 	b.w	8007804 <__malloc_unlock>
 8007840:	42a3      	cmp	r3, r4
 8007842:	d908      	bls.n	8007856 <_free_r+0x46>
 8007844:	6825      	ldr	r5, [r4, #0]
 8007846:	1961      	adds	r1, r4, r5
 8007848:	428b      	cmp	r3, r1
 800784a:	bf01      	itttt	eq
 800784c:	6819      	ldreq	r1, [r3, #0]
 800784e:	685b      	ldreq	r3, [r3, #4]
 8007850:	1949      	addeq	r1, r1, r5
 8007852:	6021      	streq	r1, [r4, #0]
 8007854:	e7ed      	b.n	8007832 <_free_r+0x22>
 8007856:	461a      	mov	r2, r3
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	b10b      	cbz	r3, 8007860 <_free_r+0x50>
 800785c:	42a3      	cmp	r3, r4
 800785e:	d9fa      	bls.n	8007856 <_free_r+0x46>
 8007860:	6811      	ldr	r1, [r2, #0]
 8007862:	1855      	adds	r5, r2, r1
 8007864:	42a5      	cmp	r5, r4
 8007866:	d10b      	bne.n	8007880 <_free_r+0x70>
 8007868:	6824      	ldr	r4, [r4, #0]
 800786a:	4421      	add	r1, r4
 800786c:	1854      	adds	r4, r2, r1
 800786e:	42a3      	cmp	r3, r4
 8007870:	6011      	str	r1, [r2, #0]
 8007872:	d1e0      	bne.n	8007836 <_free_r+0x26>
 8007874:	681c      	ldr	r4, [r3, #0]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	6053      	str	r3, [r2, #4]
 800787a:	4421      	add	r1, r4
 800787c:	6011      	str	r1, [r2, #0]
 800787e:	e7da      	b.n	8007836 <_free_r+0x26>
 8007880:	d902      	bls.n	8007888 <_free_r+0x78>
 8007882:	230c      	movs	r3, #12
 8007884:	6003      	str	r3, [r0, #0]
 8007886:	e7d6      	b.n	8007836 <_free_r+0x26>
 8007888:	6825      	ldr	r5, [r4, #0]
 800788a:	1961      	adds	r1, r4, r5
 800788c:	428b      	cmp	r3, r1
 800788e:	bf04      	itt	eq
 8007890:	6819      	ldreq	r1, [r3, #0]
 8007892:	685b      	ldreq	r3, [r3, #4]
 8007894:	6063      	str	r3, [r4, #4]
 8007896:	bf04      	itt	eq
 8007898:	1949      	addeq	r1, r1, r5
 800789a:	6021      	streq	r1, [r4, #0]
 800789c:	6054      	str	r4, [r2, #4]
 800789e:	e7ca      	b.n	8007836 <_free_r+0x26>
 80078a0:	b003      	add	sp, #12
 80078a2:	bd30      	pop	{r4, r5, pc}
 80078a4:	20005300 	.word	0x20005300

080078a8 <_init>:
 80078a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078aa:	bf00      	nop
 80078ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ae:	bc08      	pop	{r3}
 80078b0:	469e      	mov	lr, r3
 80078b2:	4770      	bx	lr

080078b4 <_fini>:
 80078b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b6:	bf00      	nop
 80078b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ba:	bc08      	pop	{r3}
 80078bc:	469e      	mov	lr, r3
 80078be:	4770      	bx	lr
